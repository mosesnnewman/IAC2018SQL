<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="sqlDataSource1.ResultSchemaSerializable" xml:space="preserve">
    <value>PERhdGFTZXQgTmFtZT0ic3FsRGF0YVNvdXJjZTEiPjxWaWV3IE5hbWU9IkNVU1RPTUVSIj48RmllbGQgTmFtZT0iQ3VzdG9tZXJJRCIgVHlwZT0iSW50MzIiIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX05PIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX0FERF9PTiIgVHlwZT0iQ2hhciIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfSUFDX1RZUEUiIFR5cGU9IkNoYXIiIC8+PEZpZWxkIE5hbWU9IklzQXJjaGl2ZSIgVHlwZT0iQm9vbGVhbiIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfRklSU1RfTkFNRSIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9MQVNUX05BTUUiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfREVBTEVSIiBUeXBlPSJJbnQzMiIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfREFZX0RVRSIgVHlwZT0iSW50MzIiIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX1BPU1RfSU5EIiBUeXBlPSJDaGFyIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9TVFJFRVRfMSIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9TVFJFRVRfMiIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9DSVRZIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX1NUQVRFIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX1pJUF8xIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX1pJUF8yIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX1JFQkFURV9DT0RFIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX0NPTU1FTlRfRkxBRyIgVHlwZT0iQ2hhciIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfUEFZTUVOVF9UWVBFIiBUeXBlPSJDaGFyIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9QQVlNRU5UX0NPREUiIFR5cGU9IkNoYXIiIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX0JSQU5DSF9OVU1CRVIiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfRElTVFJJQlVUT1JfTk8iIFR5cGU9IkludDMyIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9XUk9OR19BRERSRVNTIiBUeXBlPSJDaGFyIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9GVUxMX1BBWU1FTlRfRkxBRyIgVHlwZT0iQ2hhciIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfQ09OVEFDVCIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9QSE9ORV9OTyIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9QSE9ORV9FWFQiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfV09SS19QSE9ORSIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9XT1JLX0VYVCIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9DT1NfTkFNRSIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9DT1NfUEhPTkUiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfUkVQT19DREUiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfSU5JVF9EQVRFIiBUeXBlPSJEYXRlVGltZSIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfUEFSVElBTF9QQVkiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX0JBTEFOQ0VfTUVUSE9EIiBUeXBlPSJDaGFyIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9TVEFURU1FTlRfRlJFUVVFTkNZIiBUeXBlPSJDaGFyIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9DUkVESVRfU1RBVFVTIiBUeXBlPSJDaGFyIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9QQUlEX0RJU0NPVU5UIiBUeXBlPSJEb3VibGUiIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX1BUX1VQREFURSIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9BQ1RfU1RBVCIgVHlwZT0iQ2hhciIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfRklOQU5DRV9DSEFSR0VfRkxBRyIgVHlwZT0iQ2hhciIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfQkFMQU5DRSIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfSElHSEVTVF9CQUxBTkNFX0RVRSIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfTlVNQkVSX09GX01PTlRIUyIgVHlwZT0iSW50MzIiIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX0NPTlRST0xfTU9OVEgiIFR5cGU9IkludDMyIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9DT05UUk9MX1lFQVIiIFR5cGU9IkludDMyIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9MQVNUX1BBWU1FTlRfTUFERSIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfTEFTVF9QQVlNRU5UX0RBVEUiIFR5cGU9IkRhdGVUaW1lIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9MQVNUX0xDX0RBVEUiIFR5cGU9IkludDMyIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9OT19PRl9QQVlNRU5UU19NQURFIiBUeXBlPSJJbnQzMiIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfVEVSTSIgVHlwZT0iSW50MzIiIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX0JVWV9PVVQiIFR5cGU9IkNoYXIiIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX0RFQUxFUl9ESVNDIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9SRUdVTEFSX0FNT1VOVCIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfTE9BTl9BTU9VTlQiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX0xPQU5fSU5UIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9MT0FOX0NBU0giIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX0xBVEVfQ0hBUkdFIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9MQVRFX0NIQVJHRV9CQUwiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX1BBSURfSU5URVJFU1QiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX0JVWU9VVCIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfRk9STV9OTyIgVHlwZT0iSW50MzIiIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX1BBSURfVEhSVSIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9QQUlEX1RIUlVfTU0iIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfUEFJRF9USFJVX1lZIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX1BBWV9SRU1fMSIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9QQVlfUkVNXzIiIFR5cGU9IkludDMyIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9DT05UUkFDVF9TVEFUVVMiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX1BFUl9JTlRFUkVTVCIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfQU5OVUFMX0lOVEVSRVNUIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9QUkVWX0JBTEFOQ0UiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX0ZJTkFOQ0VfQ0hBUkdFIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9QQUlEIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9ZVERfTEFURV9DSEFSR0UiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX1REX0ZJTkFOQ0VfQ0hBUkdFIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9ZVERfRklOQU5DRV9DSEFSR0UiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX0xPQU5fSU5URVJFU1QiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX0NPTU1FTlRfMSIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9DT01NRU5UXzIiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfUFVSQ0hBU0VfT1JERVIiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfQ09OVFJPTF9OVU1CRVIiIFR5cGU9IkludDMyIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9JTlRfT1ZFUlJJREUiIFR5cGU9IkNoYXIiIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX1NUQVRVU19OTyIgVHlwZT0iSW50MzIiIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX1RPVEFMX1BBWU1FTlRTIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9UT1RBTF9MQVRFX0NIQVJHRSIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfVE9UQUxfRVhUIiBUeXBlPSJJbnQzMiIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfUEFSVElBTF9QQVlNRU5UUyIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfVE9UQUxfUEFZTUVOVFNfTUFERSIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfU1NfMSIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9TU18yIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX1NTXzMiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfQUxMT1RNRU5UIiBUeXBlPSJDaGFyIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9TVUZGSVgiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfSE9NRV9FWFQiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfQ1JFRElUX1NDT1JFX04iIFR5cGU9IkludDMyIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9DUkVESVRfU0NPUkVfQSIgVHlwZT0iQ2hhciIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfUEFZX1RZUEUiIFR5cGU9IkNoYXIiIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX1BBWV9DT0RFIiBUeXBlPSJDaGFyIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9VUERfQ09VTlQiIFR5cGU9IkludDMyIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9BVVRPUEFZIiBUeXBlPSJDaGFyIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9ERUFMRVJfRElTQ19CQUwiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX05PX0NPTlRBQ1QiIFR5cGU9IkNoYXIiIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX0NSRURJVF9MSU1JVCIgVHlwZT0iSW50MzIiIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX0NSRURJVF9BVkFJTEFCTEUiIFR5cGU9IkludDMyIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9JTlNVUkFOQ0UiIFR5cGU9IkNoYXIiIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX0FMVF9GTEFHIiBUeXBlPSJDaGFyIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9DUkVESVRfQlVSRUFVIiBUeXBlPSJDaGFyIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9ET0IiIFR5cGU9IkRhdGVUaW1lIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9UU0JfQ09NTUVOVF9DT0RFIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX0FOTlVBTF9QRVJDRU5UQUdFX1JBVEUiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkNVU1RPTUVSX0FNT1JUSVpFX0lORCIgVHlwZT0iQ2hhciIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfQ0VMTF9QSE9ORSIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9SRVBPX0lORCIgVHlwZT0iQ2hhciIgLz48RmllbGQgTmFtZT0iQ1VTVE9NRVJfVUVfSU5URVJFU1QiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkNPU0lHTkVSX0ZJUlNUX05BTUUiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iQ09TSUdORVJfTEFTVF9OQU1FIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkNPU0lHTkVSX0hPTUVfUEhPTkUiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iQ09TSUdORVJfV09SS19QSE9ORSIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJDT1NJR05FUl9XT1JLX0VYVCIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJDT1NJR05FUl9DRUxMX1BIT05FIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkNPU0lHTkVSX0FERFJFU1MxIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkNPU0lHTkVSX0NJVFkiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iQ09TSUdORVJfU1MxIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkNPU0lHTkVSX1NTMiIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJDT1NJR05FUl9TUzMiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iQ09TSUdORVJfU1RBVEUiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iQ09TSUdORVJfWklQX0NPREUiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iQ09TSUdORVJfRE9CX0RBVEUiIFR5cGU9IkRhdGVUaW1lIiAvPjxGaWVsZCBOYW1lPSJDT1NJR05FUl9TQU1FX0FERFJFU1MiIFR5cGU9IkNoYXIiIC8+PEZpZWxkIE5hbWU9IkNPU0lHTkVSX0pVTklPUiIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJDVVNUT01FUl9QUkVWX1BBUlRJQUxfUEFZTUVOVCIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iSXNMb2NrZWQiIFR5cGU9IkJvb2xlYW4iIC8+PEZpZWxkIE5hbWU9IkxvY2tlZEJ5IiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkxvY2tUaW1lIiBUeXBlPSJEYXRlVGltZSIgLz48RmllbGQgTmFtZT0iSXNSZWZpIiBUeXBlPSJCb29sZWFuIiAvPjxGaWVsZCBOYW1lPSJSZWZpQWNjb3VudCIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJQYWlkVGhyb3VnaCIgVHlwZT0iRGF0ZVRpbWUiIC8+PEZpZWxkIE5hbWU9IklzRnVsbFJlY291cnNlIiBUeXBlPSJCb29sZWFuIiAvPjxGaWVsZCBOYW1lPSJQYXJ0aWFsUGF5bWVudCIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iQ29udHJhY3REYXRlIiBUeXBlPSJEYXRlVGltZSIgLz48RmllbGQgTmFtZT0iVFNCQ29kZU92ZXJyaWRlIiBUeXBlPSJCb29sZWFuIiAvPjxGaWVsZCBOYW1lPSJUU0JQYXltZW50UmF0aW5nIiBUeXBlPSJDaGFyIiAvPjxGaWVsZCBOYW1lPSJNYXR1cml0eURhdGUiIFR5cGU9IkRhdGVUaW1lIiAvPjxGaWVsZCBOYW1lPSJDb3NpZ25lckNyZWRpdFNjb3JlIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJDb3NpZ25lckFubnVhbEluY29tZSIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iQ29zaWduZXJFbWFpbCIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJUYXhwYXllcklEIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9Ik1pZGRsZU5hbWUiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iR2FwSW5zIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IldhcnJhbnR5IiBUeXBlPSJCb29sZWFuIiAvPjxGaWVsZCBOYW1lPSJBbm51YWxJbmNvbWUiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IlRpZXIiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkZyb21UQ0kiIFR5cGU9IkJvb2xlYW4iIC8+PEZpZWxkIE5hbWU9IkNlbGxWYWxpZCIgVHlwZT0iQm9vbGVhbiIgLz48RmllbGQgTmFtZT0iRE5UQWNjdCIgVHlwZT0iQm9vbGVhbiIgLz48RmllbGQgTmFtZT0iRE5UTWt0ZyIgVHlwZT0iQm9vbGVhbiIgLz48RmllbGQgTmFtZT0iVEFjY3QiIFR5cGU9IkJvb2xlYW4iIC8+PEZpZWxkIE5hbWU9IlRCb3RoIiBUeXBlPSJCb29sZWFuIiAvPjxGaWVsZCBOYW1lPSJUUGluIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IlRDb25maXJtZWQiIFR5cGU9IkJvb2xlYW4iIC8+PEZpZWxkIE5hbWU9IkV4Y2x1ZGVWU0kiIFR5cGU9IkJvb2xlYW4iIC8+PEZpZWxkIE5hbWU9Ik1pbGl0YXJ5IiBUeXBlPSJCb29sZWFuIiAvPjxGaWVsZCBOYW1lPSJPdmVycmlkZUxhdGVDaGFyZ2UiIFR5cGU9IkJvb2xlYW4iIC8+PEZpZWxkIE5hbWU9IlRpZXJQb2ludHMiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkNvc2lnbmVyVGllclBvaW50cyIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iRnVuZGluZ0RhdGUiIFR5cGU9IkRhdGVUaW1lIiAvPjxGaWVsZCBOYW1lPSJGcm9tRGVmaSIgVHlwZT0iQm9vbGVhbiIgLz48RmllbGQgTmFtZT0iSXNDaGVja1ByaW50ZWQiIFR5cGU9IkJvb2xlYW4iIC8+PEZpZWxkIE5hbWU9IkNoZWNrTnVtYmVyIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IlJlY2VpdmVkQ29udHJhY3QiIFR5cGU9IkJvb2xlYW4iIC8+PEZpZWxkIE5hbWU9IkRhdGVDb250cmFjdFJlY2VpdmVkIiBUeXBlPSJEYXRlVGltZSIgLz48RmllbGQgTmFtZT0iVG90YWxEdWUiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkNPU0NlbGxWYWxpZCIgVHlwZT0iQm9vbGVhbiIgLz48RmllbGQgTmFtZT0iQ09TRE5UQWNjdCIgVHlwZT0iQm9vbGVhbiIgLz48RmllbGQgTmFtZT0iQ09TRE5UTWt0ZyIgVHlwZT0iQm9vbGVhbiIgLz48RmllbGQgTmFtZT0iQ09TVEFjY3QiIFR5cGU9IkJvb2xlYW4iIC8+PEZpZWxkIE5hbWU9IkNPU1RCb3RoIiBUeXBlPSJCb29sZWFuIiAvPjxGaWVsZCBOYW1lPSJDT1NUUGluIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkNPU1RDb25maXJtZWQiIFR5cGU9IkJvb2xlYW4iIC8+PEZpZWxkIE5hbWU9Ik1vbnRoc0FkdmFuY2VkIiBUeXBlPSJJbnQzMiIgLz48L1ZpZXc+PFZpZXcgTmFtZT0iREVBTEVSIj48RmllbGQgTmFtZT0iaWQiIFR5cGU9IkludDMyIiAvPjxGaWVsZCBOYW1lPSJERUFMRVJfQUNDX05PIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkRFQUxFUl9OQU1FIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkRFQUxFUl9BRERSIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkRFQUxFUl9IT01FX1BIT05FIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkRFQUxFUl9DSVRZIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkRFQUxFUl9TVCIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJERUFMRVJfV09SS19QSE9ORSIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJERUFMRVJfWklQIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkRFQUxFUl9QT1NUX0RBVEUiIFR5cGU9IkRhdGVUaW1lIiAvPjxGaWVsZCBOYW1lPSJERUFMRVJfQ1VSX1JTViIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iREVBTEVSX0NVUl9DT05UIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJERUFMRVJfQ1VSX09MT0FOIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJERUFMRVJfQ1VSX0FESiIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iREVBTEVSX0NVUl9CQUQiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkRFQUxFUl9DVVJfTE9TUyIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iREVBTEVSX1lURF9SU1YiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkRFQUxFUl9ZVERfQ09OVCIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iREVBTEVSX1lURF9PTE9BTiIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iREVBTEVSX1lURF9BREoiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkRFQUxFUl9ZVERfQkFEIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJERUFMRVJfWVREX0xPU1MiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkRFQUxFUl9TVEFUVVMiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iREVBTEVSX0NVUl9BTU9SVF9JTlQiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkRFQUxFUl9ZVERfQU1PUlRfSU5UIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJERUFMRVJfQ1VSX09MRF9JTlQiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkRFQUxFUl9ZVERfT0xEX0lOVCIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iREVBTEVSX0NVUl9TSU1QTEVfSU5UIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJERUFMRVJfWVREX1NJTVBMRV9JTlQiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkRFQUxFUl9DVVJfQU1PUlRfUERJIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJERUFMRVJfWVREX0FNT1JUX1BESSIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iREVBTEVSX0NVUl9TSU1QTEVfUERJIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJERUFMRVJfWVREX1NJTVBMRV9QREkiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkRFQUxFUl9DVVJfT0xEX1BESSIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iREVBTEVSX1lURF9PTERfUERJIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJJc0xvY2tlZCIgVHlwZT0iQm9vbGVhbiIgLz48RmllbGQgTmFtZT0iTG9ja2VkQnkiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iTG9ja1RpbWUiIFR5cGU9IkRhdGVUaW1lIiAvPjxGaWVsZCBOYW1lPSJEZWFsZXJTdGFydERhdGUiIFR5cGU9IkRhdGVUaW1lIiAvPjxGaWVsZCBOYW1lPSJDZWxsUGhvbmUiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iRW1haWwiIFR5cGU9IlN0cmluZyIgLz48L1ZpZXc+PFJlbGF0aW9uIE1hc3Rlcj0iQ1VTVE9NRVIiIERldGFpbD0iREVBTEVSIj48S2V5Q29sdW1uIE1hc3Rlcj0iQ1VTVE9NRVJfREVBTEVSIiBEZXRhaWw9ImlkIiAvPjwvUmVsYXRpb24+PC9EYXRhU2V0Pg==</value>
  </data>
</root>