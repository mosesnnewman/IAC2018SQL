<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Shell.Framework</name>
    </assembly>
    <members>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
                Reserved to be used by the compiler for tracking metadata.
                This class should not be used by developers in source code.
            </summary>
            <remarks>
                This definition is provided by the <i>IsExternalInit</i> NuGet package (https://www.nuget.org/packages/IsExternalInit).
                Please see https://github.com/manuelroemer/IsExternalInit for more information.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ActivityLog">
            <summary>
            Class which provides convenient managed methods for logging messages to the IVsActivityLog.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ActivityLog.LogFilePath">
            <summary>
            Gets the path to the activity log for the current application.
            </summary>
            <remarks>
            Can throw if the SVsShell service is not available.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ActivityLog.LogError(System.String,System.String)">
            <summary>
            Logs an error message in the activity log with the given source.
            </summary>
            <param name="source">A name associated with the source contributing the message.</param>
            <param name="message">The message to be written to the activity log.</param>
            <remarks>
            Can throw if the SVsActivityLog service is not available, or if the LogEntry method fails.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ActivityLog.LogWarning(System.String,System.String)">
            <summary>
            Logs a warning message in the activity log with the given source.
            </summary>
            <param name="source">A name associated with the source contributing the message.</param>
            <param name="message">The message to be written to the activity log.</param>
            <remarks>
            Can throw if the SVsActivityLog service is not available, or if the LogEntry method fails.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ActivityLog.LogInformation(System.String,System.String)">
            <summary>
            Logs an information message in the activity log with the given source.
            </summary>
            <param name="source">A name associated with the source contributing the message.</param>
            <param name="message">The message to be written to the activity log.</param>
            <remarks>
            Can throw if the SVsActivityLog service is not available, or if the LogEntry method fails.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ActivityLog.TryLogError(System.String,System.String)">
            <summary>
            Logs an error message in the activity log with the given source.
            </summary>
            <param name="source">A name associated with the source contributing the message.</param>
            <param name="message">The message to be written to the activity log.</param>
            <returns>True if the logging operation succeeded.  False otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ActivityLog.TryLogWarning(System.String,System.String)">
            <summary>
            Logs a warning message in the activity log with the given source.
            </summary>
            <param name="source">A name associated with the source contributing the message.</param>
            <param name="message">The message to be written to the activity log.</param>
            <returns>True if the logging operation succeeded.  False otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ActivityLog.TryLogInformation(System.String,System.String)">
            <summary>
            Logs an information message in the activity log with the given source.
            </summary>
            <param name="source">A name associated with the source contributing the message.</param>
            <param name="message">The message to be written to the activity log.</param>
            <returns>True if the logging operation succeeded.  False otherwise.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.AsyncServiceProvider.globalProvider">
            <summary>
            The global async service provider.
            Note that this is not a ThreadStatic field. Once a non-empty
            async service provider has been created, it will act as the
            async provider for all other threads as it is free-threaded and
            thread-safe.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncServiceProvider.#ctor(Microsoft.VisualStudio.Shell.Interop.COMAsyncServiceProvider.IAsyncServiceProvider)">
            <summary>
            Creates a new AsyncServiceProvider chaining to the other ctor and
            providing 'true' for the 'defaultServices' parameter.
            </summary>
            <param name="serviceProvider">The underlying service provider to use to answer requests.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncServiceProvider.#ctor(Microsoft.VisualStudio.Shell.Interop.COMAsyncServiceProvider.IAsyncServiceProvider,System.Boolean)">
            <summary>
            Creates a new AsyncServiceProvider object and uses the given interface to resolve
            services.  If defaultServices is true (the default used by the ctor that doesn't
            take a 'defaultServices' parameter) this service  provider will respond to
            IObjectWithSite as a service.  A query for IObjectWithSite will return this object.
            If false is passed in for defaultServices this service will not be provided and
            the service provider will be "transparent".
            </summary>
            <param name="serviceProvider">The underlying service provider to use to answer requests.</param>
            <param name="defaultServices">Indicates if this object will respond to queries for IObjectWithSite or not.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncServiceProvider.#ctor">
            <devdoc>
                Private, default constructor used to create a dummy AsyncServiceProvider with
                no underlying services.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncServiceProvider.CreateFromSetSite(Microsoft.VisualStudio.Shell.Interop.COMAsyncServiceProvider.IAsyncServiceProvider)">
            <summary>
            Create a new AsyncServiceProvider for the given site.
            Should be called from an object that implements SetSite
            (IObjectWithSite or IVsPackage). Automatically sets the global
            async service provider if it hasn't already been set.
            This method is typically called from the SetSite method of a
            Visual Studio package.
            Note: By calling this method, the caller declares that it knows
            the global async service provider and that the AsyncServiceProvider
            instance returned may be used by other, unrelated components,
            accessed via the AsyncServiceProvider.GlobalProvider static property.
            </summary>
            <param name="asyncServiceProvider">The global IAsyncServiceProvider service.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.AsyncServiceProvider.GlobalProvider">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents">
            <summary>
            This enum specifies the events that a build logger returned from <c>IVsBuildLoggerProvider</c>
            would like to receive.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.None">
            <summary>
            No events (will use verbosity instead).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.BuildStartedEvent">
            <summary>
            Build started event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.BuildFinishedEvent">
            <summary>
            Build finished event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.ProjectStartedEvent">
            <summary>
            Project started event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.ProjectFinishedEvent">
            <summary>
            Project finished event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.ProjectEvaluationStartedEvent">
            <summary>
            Project evaluation started event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.ProjectEvaluationFinishedEvent">
            <summary>
            Project evaluation finished event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.TargetStartedEvent">
            <summary>
            Target started event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.TargetFinishedEvent">
            <summary>
            Target finished event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.TaskStartedEvent">
            <summary>
            Task started event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.TaskFinishedEvent">
            <summary>
            Task finished event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.ErrorEvent">
            <summary>
            Error event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.WarningEvent">
            <summary>
            Warning event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.HighMessageEvent">
            <summary>
            High priority message event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.NormalMessageEvent">
            <summary>
            Normal priority message event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.LowMessageEvent">
            <summary>
            Low priority message event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.CustomEvent">
            <summary>
            Custom event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.CommandLine">
            <summary>
            Command line.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.PerformanceSummary">
            <summary>
            Build performance summary.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.NoSummary">
            <summary>
            No build performance summary.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.ShowCommandLine">
            <summary>
            Show command line.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.IncludeEvaluationProfile">
            <summary>
            Include evaluation profiles.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BuildLogging.BuildLoggerEvents.IncludeTaskInputs">
            <summary>
            Include task inputs.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.BuildLogging.IVsBuildLoggerProvider">
            <summary>
            This interface can be exported using MEF. At build time, the build system will
            call it to create a logger for the build.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.BuildLogging.IVsBuildLoggerProvider.Verbosity">
            <summary>
            The minimum verbosity that the loggers produced by this interface requires.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.BuildLogging.IVsBuildLoggerProvider.Events">
            <summary>
            The build events that the loggers produced by this interface requires.
            If this is <c>None</c>, then the events required will be determined by the
            minimum verbosity.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BuildLogging.IVsBuildLoggerProvider.GetLogger(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
             <summary>
             Returns a logger for a build.
            
             The logger returned by this method must handle its method being called on any
             thread and should not block, as they can block the progress of a build.
             </summary>
             <param name="projectPath">The path of the project file that is being built.</param>
             <param name="targets">The target being built.</param>
             <param name="properties">The properties set on the build.</param>
             <param name="isDesignTimeBuild">Whether the build is a user requested build or not.</param>
             <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Internal.ClientFeatures">
            <summary>
            List of features available as client target interfaces that can be passed to a remote service while querying thorugh <see cref="T:Microsoft.VisualStudio.Shell.Internal.IVsClientTargetsService" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Internal.ClientFeatures.None">
            <summary>
            Disables all features.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Internal.ClientFeatures.All">
            <summary>
            Enables all available features.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Internal.IVsClientFeatureCallbackTargetFactory">
            <summary>
            Interface for getting a target object that implements a certain set of client features to be passed to remote services.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.IVsClientFeatureCallbackTargetFactory.CreateInstance(Microsoft.ServiceHub.Framework.ServiceMoniker)">
            <summary>
            Creates an instance of callback target intended for the moniker that is passed in. The moniker is passed in for logging purposes only.
            </summary>
            <param name="moniker">Service moniker that target object is intended for.</param>
            <returns>an instance of the target object.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Internal.IVsClientTargetsService">
            <summary>
            Provides a way for internal components to query for a brokered service descriptor that automatically sets the connection
            with the callback target initialized to handle the client interaction features specified.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.IVsClientTargetsService.CreateDescriptorAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.VisualStudio.Shell.Internal.ClientFeatures,System.Type,System.Threading.CancellationToken)">
            <summary>
            Creates a service descriptor that automatically adds the callback targets for the specified features when querying for a service.
            The user specified callback target in <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" /> will also be added after the client feature ones.
            </summary>
            <remarks>
            The descriptor returned will be using <see cref="F:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters.UTF8" /> formatter and expects the requested service to be defined as such as well.
            </remarks>
            <param name="moniker">Service moniker that descriptor is intended for.</param>
            <param name="features">Features to be enabled in the callback target.</param>
            <param name="clientInterface">Type for the client callback interface if there is any, null otherwise.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns>a <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> instance that can be used to query for a service through <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.IVsClientTargetsService.CreateDescriptorAsync(Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor,Microsoft.VisualStudio.Shell.Internal.ClientFeatures,System.Threading.CancellationToken)">
            <summary>
            Creates a service descriptor that automatically adds the callback targets for the specified features when querying for a service.
            </summary>
            <param name="descriptor">Descriptor that the new descriptor should be based on.</param>
            <param name="features">Features to be enabled in the callback target.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns>a <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> instance that can be used to query for a service through <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Internal.SVsClientTargetsService">
            <summary>
             Interface for getting the <see cref="T:Microsoft.VisualStudio.Shell.Internal.IVsClientTargetsService" /> instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.UIInternalHelpers.IsRegistrationTask(Microsoft.VisualStudio.OperationProgress.OperationProgressTask)">
            <summary>
            Gets a value indicating whether this is the default task used for work registration.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.UIInternalHelpers.SetIsRegistrationTask(Microsoft.VisualStudio.OperationProgress.OperationProgressTask,System.Boolean)">
            <summary>
            Sets a value indicating whether this is the default task used for work registration.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.UIInternalHelpers.SetIsInProgress(Microsoft.VisualStudio.OperationProgress.OperationProgressStageStatus@,System.Boolean)">
            <summary>
            Sets a value indicating whether the stage is in progress or not.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer">
            <summary>
            A type that represents any source-code repository that Visual Studio can open and/or access,
            e.g. solution, folder.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.LocalProperties">
            <summary>
            Properties of a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer" /> that pertain to its existence on users machines.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.Remote">
            <summary>
            The server-side version of a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.IsFavorite">
            <summary>
            A flag that indicates whether this <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer" /> should be presented with special
            emphasis on Visual Studio's MRU.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.LastAccessed">
            <summary>
            Last accessed timestamp.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.#ctor(Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties,Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer,System.Boolean,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer" /> class.  Either <paramref name="localProperties" /> or
            <paramref name="remote" /> (or both) must be non-null.
            </summary>
            <param name="localProperties">Local properties.</param>
            <param name="remote">The server-side version.</param>
            <param name="isFavorite">A flag that indicates if this container has been marked favorite by the user.</param>
            <param name="lastAccessed">Last accessed timestamp.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.IsLocal">
            <summary>
            Indicates whether a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer" /> has local properties set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.HasRemote">
            <summary>
            Indicates whether a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer" /> has a remote set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.IsSourceControlled">
            <summary>
            Indicates whether a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer" /> has source control properties set.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.GetStatus">
            <summary>
            Retrieves the <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerStatus" /> of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer" />, e.g. is item
            under source-control, does it have an associated <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.WithLocalProperties(Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties)">
            <summary>
            Returns a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer" /> whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.LocalProperties" /> is set to the supplied <paramref name="localProperties" />.
            </summary>
            <param name="localProperties">The new local properties.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.WithRemote(Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer)">
            <summary>
            Returns a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer" /> whose <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer" /> is set to the supplied <paramref name="remote" />.
            </summary>
            <param name="remote">The new Remote Code Container.</param>
            <remarks>After being added to a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer" />, a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer" /> will always report its parent <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.LastAccessed" /> instead.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.WithIsFavorite(System.Boolean)">
            <summary>
            Returns a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer" /> whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.IsFavorite" /> has been set to <paramref name="isFavorite" />.
            </summary>
            <param name="isFavorite">Present container with special emphasis on Visual Studio's MRU.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.WithLastAccessed(System.DateTimeOffset)">
            <summary>
            Returns a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer" /> whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.LastAccessed" /> has been set to <paramref name="lastAccessed" />.
            </summary>
            <param name="lastAccessed">The last-accessed timestamp.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.CompareTo(Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer)">
            <summary>
            Compares two <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer" /> instances based on their <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.LastAccessed" /> timestamp.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerEqualityComparer">
            <summary>
            Compares two <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer" /> instances for equality.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties">
            <summary>
            Properties of a Code Container that pertain to its presence on the file-system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties.FullPath">
            <summary>
            Location on disk.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties.Type">
            <summary>
            Type of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer" />, e.g. solution, folder.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties.SourceControl">
            <summary>
            Source Control properties of a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer" />, e.g. VCS type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties.#ctor(System.String,Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerType,Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties" />.
            </summary>
            <param name="fullPath">The full path on disk.</param>
            <param name="type">Type, e.g. solution, folder.</param>
            <param name="sourceControlProperties">Source Control properties.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="fullPath" /> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="fullPath" />is either empty or whitespace.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties.WithFullPath(System.String)">
            <summary>
            Returns a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties" /> instance whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties.FullPath" /> is set to the supplied <paramref name="fullPath" />.
            </summary>
            <param name="fullPath">Full path on disk.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="fullPath" /> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="fullPath" />is either empty or whitespace.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties.WithType(Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerType)">
            <summary>
            Returns a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties" /> instance whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties.Type" /> is set to the supplied <paramref name="type" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties.WithSourceControl(Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties)">
            <summary>
            Returns a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties" /> instance whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties.SourceControl" /> is set to the supplied <paramref name="sourceControlProperties" />.
            </summary>
            <param name="sourceControlProperties">The new Source Control properties.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalPropertiesEqualityComparer">
            <summary>
            Compares two instances of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerLocalProperties" /> for equality.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties">
            <summary>
            Properties of a Code Container that pertain to source control, e.g. VCS name, root path
            of repository ... etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties.RepositoryRootFullPath">
            <summary>
            The Full path of the root directory of this <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties.SccProvider">
            <summary>
            Source Control Provider ID.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties.RepositoryName">
            <summary>
            Name of Code Container repository.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties.#ctor(System.String,System.String,System.Guid)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties" />.
            </summary>
            <param name="repositoryRootFullPath">The full path of the root directory.</param>
            <param name="sccProvider">Source Control Provider ID.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="repositoryRootFullPath" /> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if either <paramref name="repositoryRootFullPath" /> or <paramref name="sccProvider" /> is empty or whitespace.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties.WithRepositoryName(System.String)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties" /> whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties.RepositoryName" /> is set to <paramref name="repositoryName" />.
            </summary>
            <param name="repositoryName">The name of the repository.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="repositoryName" /> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="repositoryName" /> is empty or whitespace.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties.WithRepositoryRootFullPath(System.String)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties" /> whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties.RepositoryRootFullPath" /> is set to <paramref name="repositoryRootFullPath" />.
            </summary>
            <param name="repositoryRootFullPath">The full path of the root directory.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="repositoryRootFullPath" /> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="repositoryRootFullPath" /> is empty or whitespace.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties.WithSccProvider(System.Guid)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties" /> whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties.SccProvider" /> is set to <paramref name="sccProvider" />.
            </summary>
            <param name="sccProvider">Source Control provider ID.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="sccProvider" /> is empty.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlPropertiesEqualityComparer">
            <summary>
            Compares two instances of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerSourceControlProperties" /> for equality.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerStatus.IsLocal">
            <summary>
            Indicates that Code Container is present on disk.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerStatus.IsSourceControlled">
            <summary>
            Indicates that Code Container is currently under Source Control.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerStatus.HasRemote">
            <summary>
            Indicates that Code Container has Remote information.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerStatus.IsFaulty">
            <summary>
            Indicates that Code Container information is in an inconsistent state.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerType">
            <summary>
            The actual type of the underlying Code Container on disk.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerType.Project">
            <summary>
            A Visual Studio project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerType.Folder">
            <summary>
            A local or remote folder.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.ICodeContainerProvider">
            <summary>
            Information about a provider that is capable of acquiring an online resource to a local machine.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.ICodeContainerProvider.AcquireCodeContainerAsync(System.IProgress{Microsoft.VisualStudio.Shell.ServiceProgressData},System.Threading.CancellationToken)">
            <summary>
            Acquires an online code container locally.
            </summary>
            <param name="downloadProgress">Reports download progress. If this value is null, no download progress will be reported.</param>
            <param name="cancellationToken">A cancellation token to cancel the operation.</param>
            <returns>
            A task the returns a code container that has been acquired locally. If the task is faulted, the exception will be recorded in the VS activity log.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.ICodeContainerProvider.AcquireCodeContainerAsync(Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer,System.IProgress{Microsoft.VisualStudio.Shell.ServiceProgressData},System.Threading.CancellationToken)">
             <summary>
             Acquires a previously known online code container locally.
            
             An example of a previously known code container is for a given signed in user, a code container that was acquired on one device and available as an online code container on a
             second device and available for reacquisition.
             </summary>
             <param name="onlineCodeContainer">The online code container to acquire.</param>
             <param name="downloadProgress">Reports download progress. If this value is null, no download progress will be reported.</param>
             <param name="cancellationToken">A cancellation token to cancel the operation.</param>
             <returns>
             A task the returns a code container that has been acquired locally. If the task is faulted, the exception will be recorded in the VS activity log.
             </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.ICodeContainerStorageManager">
            <summary>
            A interface that defines that public APIs of the class responsible for managing the records of
            the Code Containers accessed by the Shell.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.ICodeContainerStorageManager.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer" /> whose Full-Path is equal to <paramref name="fullPath" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.ICodeContainerStorageManager.AddOrUpdateAsync(Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer,System.Threading.CancellationToken)">
            <summary>
            Adds or updates the records of the Shell for the supplied <paramref name="codeContainer" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.ICodeContainerStorageManager.RemoveAsync(Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer,System.Threading.CancellationToken)">
            <summary>
            Removes the records of the Shell for the supplied <paramref name="codeContainer" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.ICodeContainerStorageManager.ClearAsync(System.Threading.CancellationToken)">
            <summary>
            Clears all records of the Shell of all local and roaming Code Containers.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.ICodeContainerStorageManager.SubscribeAsync(System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.Shell.StatefulReadOnlyList{Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Allows <paramref name="targetBlock" /> to receive updates about Code Containers accessed by the Shell.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer">
            <summary>
            A type that represents the server-side version of a <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.Name">
            <summary>
            The name of the <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer" /> repository in its original web location.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.CodeContainerProvider">
            <summary>
            The unique identifier of the <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.ICodeContainerProvider" /> that is used to acquire this <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.DisplayUrl">
            <summary>
            The URL that is used to present <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.BrowseOnlineUrl">
            <summary>
            The user-browsable location of this <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer" /> on the web. An absolute URL.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.LastAccessed">
            <summary>
            Last-accessed timestamp.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.ExtraProperties">
            <summary>
            All properties that are currently present for this <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer" /> on the cloud but are not
            recognized by this version of the type. This is intended for the purposes of forward-compatibility with any
            properties that may be added in the future.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.#ctor(System.String,System.Guid,System.Uri,System.Uri,System.DateTimeOffset,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Initializes a new <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer" /> instance.
            </summary>
            <param name="name">Name in original web location.</param>
            <param name="codeContainerProvider">Provider ID.</param>
            <param name="displayUrl">Display URL.</param>
            <param name="browseOnlineUrl">Browse-Online URL.</param>
            <param name="lastAccessed">Last-Accessed timestamp in UTC.</param>
            <param name="extraProperties">Additional properties.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any of <paramref name="name" />, <paramref name="displayUrl" /> or <paramref name="browseOnlineUrl" /> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="name" /> is whitespace.</exception>
            <exception cref="T:System.ArgumentException">Thrown if either <paramref name="name" /> or <paramref name="codeContainerProvider" /> is empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="browseOnlineUrl" /> is not an absolute URL.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.WithName(System.String)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer" /> whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.Name" /> is equal to <paramref name="name" />.
            </summary>
            <param name="name">Name.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name" /> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="name" /> is empty or whitespace.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.WithCodeContainerProvider(System.Guid)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer" /> whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.CodeContainerProvider" /> is equal to <paramref name="codeContainerProvider" />.
            </summary>
            <param name="codeContainerProvider">Code Container Provider ID.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="codeContainerProvider" /> is empty.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.WithDisplayUrl(System.Uri)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer" /> whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.DisplayUrl" /> is equal to <paramref name="displayUrl" />.
            </summary>
            <param name="displayUrl">Display URL.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="displayUrl" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.WithBrowseOnlineUrl(System.Uri)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer" /> whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.BrowseOnlineUrl" /> is equal to <paramref name="browseOnlineUrl" />.
            </summary>
            <param name="browseOnlineUrl">Browse-Online URL.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="browseOnlineUrl" /> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="browseOnlineUrl" /> is not absolute.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.WithLastAccessed(System.DateTimeOffset)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer" /> whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.LastAccessed" /> is equal to <paramref name="lastAccessed" />.
            </summary>
            <param name="lastAccessed">Last-accessed timestamp.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.WithExtraProperties(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Returns an instance of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer" /> whose <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.ExtraProperties" /> is equal to <paramref name="extraProperties" />.
            </summary>
            <param name="extraProperties">Additional properties.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.CompareTo(Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer)">
            <summary>
            Compares two instances of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer" /> based on their <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.LastAccessed" /> timestamp.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainerEqualityComparer">
            <summary>
            Compares two instances of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer" /> for equality.
            </summary>
            <remarks>When comparing instances of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer" /> their <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.ExtraProperties" /> are not taken into account.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainerEqualityComparer.IgnoreLastAccessedUtcInstance">
            <summary>
            Compares two instances of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer" /> without taking their <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer.LastAccessed" /> property into account.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ICodeContainerProvider">
            <summary>
            Information about a provider that is capable of acquiring an online resource to a local machine.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ICodeContainerProvider.AcquireCodeContainerAsync(System.IProgress{Microsoft.VisualStudio.Shell.ServiceProgressData},System.Threading.CancellationToken)">
            <summary>
            Acquires an online code container locally.
            </summary>
            <param name="downloadProgress">Reports download progress. If this value is null, no download progress will be reported.</param>
            <param name="cancellationToken">A cancellation token to cancel the operation.</param>
            <returns>
            A task the returns a code container that has been acquired locally. If the task is faulted, the exception will be recorded in the VS activity log.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ICodeContainerProvider.AcquireCodeContainerAsync(Microsoft.VisualStudio.Shell.CodeContainer,System.IProgress{Microsoft.VisualStudio.Shell.ServiceProgressData},System.Threading.CancellationToken)">
             <summary>
             Acquires a previously known online code container locally.
            
             An example of a previously known code container is for a given signed in user, a code container that was acquired on one device and available as an online code container on a
             second device and available for reacquisition.
             </summary>
             <param name="onlineCodeContainer">The online code container to acquire.</param>
             <param name="downloadProgress">Reports download progress. If this value is null, no download progress will be reported.</param>
             <param name="cancellationToken">A cancellation token to cancel the operation.</param>
             <returns>
             A task the returns a code container that has been acquired locally. If the task is faulted, the exception will be recorded in the VS activity log.
             </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeContainer">
            <summary>
            Dummy class for a code container. Will be removed when a code container is actually available - when the Code Container Registry is ready.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.StatefulReadOnlyList`2">
            <summary>
            A read-only list with an associated state.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CommentTaskPriority">
            <summary>
            Value that indicates the priority of a task in the task list.
            </summary>
            <remarks>
            <para>
            The values in this enumeration correspond to the values in a the Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY enumeration.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredential.TokenValue">
            <summary>
            The last token value. If the value is empty call RefreshTokenValue.
            If RefreshToken fails it will be set to an empty string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredential.RefreshTokenValue">
            <summary>
            Get the token value (secret) for this credential. If the underlying credential has been deleted
            TokenValue will be an empty string. And false will be returned.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredential.SetTokenValue(System.String)">
            <summary>
            Sets the token value (secret) for this credential.
            If the underlying credential has already been deleted we will re-add it with the new token value.
            The token cannot be null or empty, or whitespace.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredential.GetProperty(System.String)">
            <summary>
            Get a property related to the credential out of storage
            The name cannot be null or empty, or whitespace
            If the property cannot be found or the underlying credential has been deleted null will be returned.
            Property names are case insensitive.
            </summary>
            <param name="name">Name of the property in storage.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredential.SetProperty(System.String,System.String)">
            <summary>
            Set a property related to the credential in storage.
            To remove a property you will need to remove the token itself from storage.
            The name cannot be null or empty, or whitespace
            The value cannot be null
            If the underlying credential could not be found false will be returned.
            Setting the same name again will overwrite the property
            Property names are case insensitive.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredentialKey.FeatureName">
            <summary>
            The feature name.
            </summary>
            <remarks>
            The FeatureName is case-sensitive.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredentialKey.Resource">
            <summary>
            The credential resource name or uri.
            </summary>
            <remarks>
            The resource is case-insensitive.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredentialKey.UserName">
            <summary>
            The credential user name, user id, or any app-specific unique value.
            </summary>
            <remarks>
            The user name is case-insensitive.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredentialKey.Type">
            <summary>
            The type of the credential. Can be any app-specific value,
            but is intended to convey the authentication type.
            Therefore some examples might be:
            "Federated", "OAuth", "Windows", "Basic", "ServiceIdentity", "S2S".
            </summary>
            <remarks>
            The type is case-insensitive.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredentialStorageService.Add(Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredentialKey,System.String)">
            <summary>
            Add a new credential to the storage.
            If a key already exists it is overwritten.
            </summary>
            <param name="credentialKey">Required, cannot be null.</param>
            <param name="credentialValue">Required, cannot be null, empty or whitespace.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredentialStorageService.Retrieve(Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredentialKey)">
            <summary>
            Retrieve the specified credential.
            The credential is a snapshot of what is in the credential store
            The methods on the IVsCredential are used to access the live data.
            If no credential is found null is returned.
            </summary>
            <param name="credentialKey">Required, cannot be null.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredentialStorageService.RetrieveAll(System.String)">
            <summary>
            Retrieve ALL specified credential for a given feature name.
            If no credentials exist an empty enumeration is returned.
            Each credential is a snapshot of what is in the credential store
            The methods on the IVsCredential itself are used to access the live data.
            </summary>
            <param name="featureName">Required, cannot be null, empty or whitespace.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredentialStorageService.Remove(Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredentialKey)">
            <summary>
            Remove a credential from storage. If the credential did not exist or could not be removed
            false is returned.
            </summary>
            <param name="credentialKey">Required, cannot be null.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.IVsCredentialStorageService.CreateCredentialKey(System.String,System.String,System.String,System.String)">
            <summary>
            Create a credential key which can be used with the retreieve and remove methods.
            </summary>
            <param name="featureName">Cannot be null, empty or whitespace.</param>
            <param name="resource">Cannot be null, empty or whitespace.</param>
            <param name="userName">Cannot be null, empty or whitespace.</param>
            <param name="type">Cannot be null, empty or whitespace.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Connected.CredentialStorage.SVsCredentialStorageService">
            <summary>
            Represents a service for publishing and subscribing to bulletins.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IReadOnlyObservableSet">
            <summary>
            A readonly observable collection that provides for constant time Contains look up.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IReadOnlyObservableSet`1">
            <summary>
            A readonly observable collection that provides for constant time Contains look up.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ISelectedGraphNode">
            <summary>
            Holds a reference to a selected GraphNode.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ISelectedGraphNode.Node">
            <summary>
            Gets the selected GraphNode.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ISolutionSearchOptions">
            <summary>
            Represents the options a search provider should use when providing
            search results for a search of the solution.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ISolutionSearchOptions.SearchFileContents">
            <summary>
            Gets whether or not the content of files should be searched.  If true,
            search results from within file contents should be returned.  If false,
            no file content searches should occur.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ISolutionSearchOptions.SearchExternalItems">
            <summary>
            Gets whether or not the content of external items should be searched.  If true,
            search results from within external items should be returned.  If false,
            no external items searches should occur.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ISolutionSearchParameters">
            <summary>
            Represents the parameters required to provide search results for a search
            of the solution.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ISolutionSearchParameters.SearchQuery">
            <summary>
            Gets the search terms provided by the user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ISolutionSearchParameters.Options">
            <summary>
            Gets the search options.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ISolutionSearchParameters.MaximumResults">
            <summary>
            Gets the maximum number of results that should be returned by the search.
            If more results than this are available, the search provider should call
            OnMaximumResultsExceeded to indicate that not all results were returned.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ISolutionSearchParameters.OnMaximumResultsExceeded">
            <summary>
            Callback that should be called by a provider that could have returned more
            results, but which limited itself to the number of results requested
            by MaximumResults.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ISolutionTreeFilter">
            <summary>
            A filter that controls a collection of items that should be included in the filtered tree.
            When the IncludedItems are placed into a tree, these items and their ancestors will be included
            in the tree, and all other items will be excluded.
            <remarks>
            When the filter is no longer needed, the tree control will dispose the filter.
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ISolutionTreeFilter.IncludedItems">
            <summary>
            Gets the set of items that are included by the filter.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ISolutionTreeFilter.GetFilterDescendantsBehavior(System.Object)">
            <summary>
            Decide whether to include descendents if none are exlicitly specified.
            </summary>
            <remarks>
            Default implementation includes for non-hierarchy items.  For hierarchies, it excludes for folder and project nodes and includes for typical member files.
            </remarks>
            <param name="item">The item to decide for.</param>
            <returns>Whether to exclude or include by default.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ISolutionTreeFilterProvider">
            <summary>
            Factory used to create an ISolutionTreeFilter.  ISolutionTreeFilter provides a way to provide a list
            of included items which should be placed into the tree.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ISolutionTreeFilterProvider.IsFilteringSupported(System.Collections.IEnumerable)">
            <summary>
            Determines whether or not this type of filter is supported when the given collection of items
            are at the root of the tree.
            </summary>
            <param name="rootItems">The current collection of root items in the tree.</param>
            <returns>True if the filter is supported, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ISolutionTreeFilterProvider.CreateFilter(System.Collections.IEnumerable)">
            <summary>
            Creates a new filter for the given collection of root items.
            </summary>
            <param name="rootItems">The current collection of root items in the tree.</param>
            <returns>An ISolutionTreeFilter instance that can be applied to the tree to control
            which items are included in the tree's filtered subset.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ISupportDisposalNotification">
            <summary>
            Represents an object which may become disposed, and which can notify listeners of
            changes to disposal state.  Objects which hold references to an instance of ISupportDisposalNotification
            should watch for property changes on the IsDisposed property, and should release their reference
            when the property's value becomes true.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ISupportDisposalNotification.IsDisposed">
            <summary>
            Determines if the item is disposed.  Changes to this property
            are notified through INotifyPropertyChanged.PropertyChanged,
            which allows consumers to easily use weak event listeners
            through PropertyChangedEventManager.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ExceptionExtensions.IsCancellationException(System.Exception)">
            <summary>
            Determines whether an exception represents a cancellation.
            </summary>
            <param name="ex">The exception to test.</param>
            <returns>
            <c>true</c> if the exception represents a cancellation, <c>false</c> if it does not.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.FindResults.FindResult">
            <summary>
            Struct defining the data associated with a find result.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.FindResults.FindResult.Code">
            <summary>
            A line of text from the original document that contains the find result.
            </summary>
            <remarks>
            This should be truncated as needed to be no more than 200 or so characters.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.FindResults.FindResult.Line">
            <summary>
            Line number of the find result (0-based).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.FindResults.FindResult.Column">
            <summary>
            Column number of the find result (0-based).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.FindResults.FindResult.Match">
            <summary>
            Location of the matching text within <see cref="F:Microsoft.VisualStudio.Shell.FindResults.FindResult.Code" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FindResults.FindResult.#ctor(System.String,System.Int32,System.Int32,Microsoft.VisualStudio.Text.Span)">
            <summary>
            ctor for <see cref="T:Microsoft.VisualStudio.Shell.FindResults.FindResult" />.
            </summary>
            <param name="code">Entire line (or relevant subset) that contains the result.</param>
            <param name="line">Line number in the document of the start of the match.</param>
            <param name="column">Offset from the start of the line of the start of the match.</param>
            <param name="match">Span of text within <paramref name="code" /> that indicates the match text.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Generators.IVsGeneratorRunningService">
            <summary>
            Service that schedules single file generators to run.
            Implemented by the project system.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Generators.IVsGeneratorRunningService.RunGeneratorAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Triggers the generator to be run on a file.
            </summary>
            <param name="filePath">Full path to the file.</param>
            <param name="cancellationToken">A token whose cancellation will attempt to cancel the generation.</param>
            <returns>A task representing the generation progress.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Generators.IVsGeneratorRunningService.RunGeneratorAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Triggers generators to be run on a set of files.
            </summary>
            <param name="filePaths">List of full paths to each file.</param>
            <param name="cancellationToken">A token whose cancellation will attempt to cancel the generation.</param>
            <returns>A task representing the generation progress.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Generators.IVsSingleFileGeneratorAsync">
            <summary>
            Asynchronously transforms a single input file into a single output file that can be compiled or added to a project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Generators.IVsSingleFileGeneratorAsync.GetDefaultExtensionAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves the file extension that is given to the output file name.
            </summary>
            <param name="cancellationToken">A token whose cancellation will attempt to cancel the generation.</param>
            <returns>A task that returns the file extension that is to be given to the output file name.
            The returned extension must include a leading period.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Generators.IVsSingleFileGeneratorAsync.GenerateAsync(System.String,System.String,System.String,System.IO.Stream,Microsoft.VisualStudio.Shell.Interop.IVsGeneratorProgress,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the transformation.
            </summary>
            <param name="inputFilePath">The full path of the input file.</param>
            <param name="inputFileContents">The contents of the input file.</param>
            <param name="defaultNamespace">The namespace into which the generated code will be placed.
            This parameter is only meaningful for custom tools that generate code.</param>
            <param name="outputStream">The stream containing the results of the generation, which should be written to the generated file.</param>
            <param name="generatorProgress">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsGeneratorProgress" /> object through which the generator can report its progress to the project system.</param>
            <param name="cancellationToken">A token whose cancellation will attempt to cancel the generation.</param>
            <returns>A task that corresponds to the file generation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsHierarchyItemCollectionProvider.GetDescendantsAsync(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets a flat list of hierarchy items that exist within the specified hierarchy.
            </summary>
            <remarks>
            The set returned is kept up to date as the hierarchy changes.
            </remarks>
            <param name="hierarchy">The hierarchy from which the descendant hierarchy items are aggregated.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the asynchronous request.</param>
            <returns>A task that when complete provides the flattened set of hierarchy items.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsHierarchyItemCollectionProvider.GetFilteredHierarchyItemsAsync(Microsoft.VisualStudio.Shell.IReadOnlyObservableSet{Microsoft.VisualStudio.Shell.IVsHierarchyItem},System.Predicate{Microsoft.VisualStudio.Shell.IVsHierarchyItem},System.Threading.CancellationToken,System.Int32[])">
            <summary>
            Asynchronously gets a filtered set of hierarchy items from the specified hierarchy item set.
            </summary>
            <param name="sourceCollection">The hierarchy items to filter.</param>
            <param name="includeInFilter">The predicate used to determine what is included in the filtered set.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the asynchronous request.</param>
            <param name="dependentProperties">An optional set of property ids that indicate the hierarchy item properties that affect the filter and as a result cause the includeInFilter predicate to be requeried.</param>
            <returns>A task that when complete provides the filtered set of hierarchy items.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IVsHierarchyItemManager.IsChangingItems">
             <summary>
             Gets whether or not item additions or removals from an IVsHierarchy are currently being processed.  This
             property will be true when changes from one of the following events are being processed:
            
             IVsHierarchyEvents.OnItemAdded
             IVsHierarchyEvents.OnItemDeleted
             IVsHierarchyEvents.OnItemsAppended
             IVsHierarchyEvents.OnInvalidateItems.
             </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IAsyncAttachedCollectionSource">
            <summary>
            Represents an IAttachedCollectionSource object that can report on whether or not
            the HasItems property is currently being initialized, and which raises an INotifyPropertyChanged
            event when the IsInitializingHasItems value changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IAsyncAttachedCollectionSource.IsUpdatingHasItems">
            <summary>
            Gets whether or not the HasItems property is currently being updated.  Because
            updating HasItems may be an asynchronous operation, consumers of the IAttachedCollectionSource
            may want to wait for this property to become false before deciding that there are no items.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IAsyncServiceProvider">
            <summary>
            Provides a mechanism for retrieving proffered services asynchronously. This is the async equivalent of <see cref="T:System.IServiceProvider" />
            and should be used in asynchronous contexts to avoid blocking calling threads.
            </summary>
            <remarks>
            <para>This interface is safe to access from any thread.</para>
            <para>Prefer <see cref="T:Microsoft.VisualStudio.Shell.IAsyncServiceProvider3" /> and <see cref="t:Microsoft.VisualStudio.Shell.ServiceExtensions" /> over using this interface directly to avoid unexpected
            blocking RPC calls when casting the resulting service to a specific interface. Both also provide more consistent throwing behavior.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IAsyncServiceProvider.GetServiceAsync(System.Type)">
            <summary>
            Retrieves a proffered service asynchronously.
            </summary>
            <param name="serviceType">The service identity of the proffered service to retrieve.</param>
            <returns>
            A task whose result is one of the following:
            <list type="bullet">
                <item>
                    <description>The service if the request was successful.</description>
                </item>
                <item>
                    <description><see langword="null" /> if the service threw an exception during activation.</description>
                </item>
                <item>
                    <description><see langword="null" /> if the associated package failed to load.</description>
                </item>
                <item>
                    <description><see langword="null" /> if the associated package proffered <see langword="null" />.</description>
                </item>
                <item>
                    <description><see langword="null" /> if the associated package could not be found, or the package did not correctly proffer the service.</description>
                </item>
                <item>
                    <description><see langword="null" /> if the environment has starting shutting down and the retrieval would have resulted in a package load.</description>
                </item>
                <item>
                    <description>Otherwise; <see langword="null" /> if there was any other failure retrieving the service.</description>
                </item>
            </list>
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="serviceType" /> is <see langword="null" />.</exception>
            <remarks>
            <para>
            Performing an explicit cast of the resulting service to a specific interface could perform a blocking RPC call if the underlying service is STA-bound,
            which can hang if the UI thread is blocked in a <see cref="M:Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run(System.Func{System.Threading.Tasks.Task})" /> or <see cref="M:Microsoft.VisualStudio.Threading.JoinableTask.Join(System.Threading.CancellationToken)" />. Instead, prefer the
            generic equivalents <see cref="M:Microsoft.VisualStudio.Shell.IAsyncServiceProvider3.GetServiceAsync``2(System.Boolean,System.Threading.CancellationToken)" /> and <see cref="m:Microsoft.VisualStudio.Shell.ServiceExtensions.GetServiceAsync" />, noting
            the difference in behavior around exceptions.
            </para>
            <para>This method is safe to access from any thread.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IAsyncServiceProvider2">
            <summary>
            Provides a mechanism for retrieving proffered services. This is the async equivalent of <see cref="T:System.IServiceProvider" />
            and should be used in asynchronous contexts to avoid blocking calling threads.
            </summary>
            <remarks>
            <para>This interface is safe to access from any thread.</para>
            <para>Prefer <see cref="T:Microsoft.VisualStudio.Shell.IAsyncServiceProvider3" /> and <see cref="t:Microsoft.VisualStudio.Shell.ServiceExtensions" /> over using this interface directly to avoid unexpected
            blocking RPC calls when casting the resulting service to a specific interface. Both also provide more consistent throwing behavior.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IAsyncServiceProvider2.GetServiceAsync(System.Type,System.Boolean)">
            <summary>
            Retrieves a proffered service asynchronously, specifying a hint whether to throw an exception if it could not be retrieved. It does not, however, guarantee exceptions will be thrown for all failure cases.
            </summary>
            <param name="serviceType">The service identity of the proffered service to retrieve.</param>
            <param name="swallowExceptions"><see langword="true" /> to return <see langword="null" /> on failure; otherwise, <see langword="false" /> to throw an exception if the service could not be retrieved. NOTE, specifying <see langword="false" /> does not does not guarantee exceptions will be thrown for all failures.</param>
            <returns>
            A task whose result is one of the following:
            <list type="bullet">
                <item>
                    <description>The service if the request was successful.</description>
                </item>
                <item>
                    <description><see langword="null" /> if the associated package proffered <see langword="null" />.</description>
                </item>
                <item>
                    <description><see langword="null" /> if the associated package could not be found, or the package did not correctly proffer the service.</description>
                </item>
                <item>
                    <description><see langword="null" /> if the environment has starting shutting down and the retrieval would have resulted in a package load.</description>
                </item>
                <item>
                    <description>Otherwise; <see langword="null" /> if there was any other failure retrieving the service and <paramref name="swallowExceptions" /> is <see langword="true" />.</description>
                </item>
            </list>
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="serviceType" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Exception">
            <paramref name="swallowExceptions" /> is <see langword="false" /> and there was failure retrieving the service due to one of the following conditions:
            <list type="bullet">
                <item>
                    <description>The service threw an exception during activation. <see cref="P:System.Exception.InnerException" /> may include details about the underlying failure.</description>
                </item>
                <item>
                    <description>The associated package failed to load. <see cref="P:System.Exception.InnerException" /> may include details about the underlying failure.</description>
                </item>
            </list>
            </exception>
            <remarks>
            <para>Performing an explicit cast of the resulting service to a specific interface could perform a blocking RPC call if the underlying service is STA-bound,
            which can hang if the UI thread is blocked in a <see cref="M:Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run(System.Func{System.Threading.Tasks.Task})" /> or <see cref="M:Microsoft.VisualStudio.Threading.JoinableTask.Join(System.Threading.CancellationToken)" />. Instead, prefer the
            generic equivalents <see cref="M:Microsoft.VisualStudio.Shell.IAsyncServiceProvider3.GetServiceAsync``2(System.Boolean,System.Threading.CancellationToken)" /> and <see cref="m:Microsoft.VisualStudio.Shell.ServiceExtensions.ServiceExtensions.GetServiceAsync" />, noting the difference in behavior around exceptions.</para>
            <para>This method is safe to access from any thread.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IAsyncServiceProvider3">
            <summary>
            Provides a mechanism for retrieving proffered services asynchronously. This is the async equivalent of <see cref="T:System.IServiceProvider" />
            and should be used in asynchronous contexts to avoid blocking calling threads.
            </summary>
            <remarks>
            <para>This interface is safe to access from any thread.</para>
            <para>Prefer this interface and <see cref="t:Microsoft.VisualStudio.Shell.ServiceExtensions" /> over using <see cref="T:Microsoft.VisualStudio.Shell.IAsyncServiceProvider" /> and <see cref="T:Microsoft.VisualStudio.Shell.IAsyncServiceProvider2" /> directly
            to avoid unexpected blocking RPC calls when casting the resulting service to a specific interface. The former also provide more consistent throwing behavior.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IAsyncServiceProvider3.GetServiceAsync``2(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Retrieves a proffered service asynchronously, specifying whether to throw an exception if it could not be retrieved.
            </summary>
            <typeparam name="TService">The service identity of the proffered service to retrieve.</typeparam>
            <typeparam name="TInterface">The interface used to interact with the proffered service. If <typeparamref name="TService" /> is not registered as async or free-threaded, then this cast will be performed on the main thread.</typeparam>
            <param name="throwOnFailure"><see langword="true" /> to throw an exception if the service could not be retrieved; otherwise, <see langword="false" /> to return <see langword="null" /> on failure.</param>
            <param name="cancellationToken">A token whose cancellation indicates that the caller no longer is interested in the result. This will not cancel the in-progress loading of packages and/or creation of services as a result of the service retrieval, but this token will result in an expedient cancellation of the returned Task.</param>
            <returns>A task representing the service retrieval whose result is the service or <see langword="null" /> if there was a failure and <paramref name="throwOnFailure" /> is <see langword="false" />.</returns>
            <exception cref="T:System.OperationCanceledException">
            <paramref name="cancellationToken" /> has been canceled.
            </exception>
            <exception cref="T:Microsoft.VisualStudio.Shell.ServiceUnavailableException">
            <paramref name="throwOnFailure" /> is <see langword="true" /> and there was a failure retrieving the service due to one of the following conditions:
            <list type="bullet">
                <item>
                    <description>The service threw an exception during activation. <see cref="P:System.Exception.InnerException" /> may include details about the underlying failure.</description>
                </item>
                <item>
                    <description>The associated package failed to load. <see cref="P:System.Exception.InnerException" /> may include details about the underlying failure.</description>
                </item>
                <item>
                    <description>The associated package could not be found, or the package did not correctly proffer the service.</description>
                </item>
                <item>
                    <description>The associated package proffered <see langword="null" />.</description>
                </item>
                <item>
                    <description>The service does not support the requested interface specified by <typeparamref name="TInterface" />.</description>
                </item>
                <item>
                    <description>The environment has starting shutting down and the retrieval would have resulted in a package load.</description>
                </item>
            </list>
            </exception>
            <remarks>
            <para>Prefer this method over an explicit cast to <typeparamref name="TInterface" /> to avoid a blocking RPC call if the underlying service is STA-bound,
            which can hang if the UI thread is blocked in a <see cref="M:Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run(System.Func{System.Threading.Tasks.Task})" /> or <see cref="M:Microsoft.VisualStudio.Threading.JoinableTask.Join(System.Threading.CancellationToken)" />.</para>
            <para>Note the difference in behavior this method has around exceptions to its non-generic equivalents <see cref="M:Microsoft.VisualStudio.Shell.IAsyncServiceProvider.GetServiceAsync(System.Type)" /> and <see cref="M:Microsoft.VisualStudio.Shell.IAsyncServiceProvider2.GetServiceAsync(System.Type,System.Boolean)" />.</para>
            <para>This method is safe to access from any thread.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IAttachedCollectionService">
            <summary>
            Represents a service that can get attached collections for an item based on a known relationship,
            and which can enumerate relationships supported for an item.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IAttachedCollectionService.GetRelationship(System.Object,System.String)">
            <summary>
            Given a name for a relationship, returns an IAttachedRelationship
            containing a localizable description of the relationship.
            </summary>
            <param name="item">The item for which to get the relationship display information.</param>
            <param name="relationshipName">The known name for the relationship.</param>
            <returns>An IAttachedRelationship instance corresponding to the relationship,
            or null if the relationship is unknown.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IAttachedCollectionService.GetRelationships(System.Object)">
            <summary>
            Gets the set of relationships supported for a given item.
            </summary>
            <param name="item">The item to get the supported relationships for.</param>
            <returns>An enumeration of supported relationships.</returns>
            <remarks>For a concrete example, an item of type "Class" might support
            relationships like "Base Types", "Derived Types", and "Members".
            These relationship descriptions would be returned from this method.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IAttachedCollectionService.GetOrCreateCollectionSource(System.Object,System.String)">
            <summary>
            Gets or creates an IAttachedCollectionSource instance representing an attached collection
            for the given relationship on the given item.
            </summary>
            <param name="item">The item to get the attached collection from.</param>
            <param name="relationshipName">The relationship name describing
            which attached collection to get or create.</param>
            <returns>An IAttachedCollectionSource instance representing the attached collection.</returns>
            <remarks>For a concrete example, an item of type "Class" for a relationship identified
            by "Base Types" would result in the construction of an IAttachedCollectionSource whose
            Items property contain the base types for the item.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IAttachedCollectionSource">
            <summary>
            Represents an object instance that can return a collection of items,
            and that knows whether or not any items exist without realizing the items
            themselves.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IAttachedCollectionSource.SourceItem">
            <summary>
            Gets the object used to create this IAttachedCollectionSource.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IAttachedCollectionSource.HasItems">
            <summary>
            Returns true if this IAttachedCollectionSource has any items, otherwise false.
            Accessing HasItems does not necessarily create the items themselves.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IAttachedCollectionSource.Items">
            <summary>
            Gets (and creates, if necessary) the collection of items associated
            with this IAttachedCollectionSource.
            </summary>
            <remarks>
            If this collection does not change after the initial collection is returned, you may return any implementation of IEnumerable.
            However, if this collection does change over time, you may return any collection which implements INotifyCollectionChanged
            (such as an ObservableCollection).  If you return a collection implementing INotifyCollectionChanged, the collection's consumer will
            observe changes to the collection and update the view on the collection when the collection is modified.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IAttachedCollectionSourceProvider">
            <summary>
            Represents a service which can enumerate relationships that exist for an object the service understands,
            and which can create attached collections for a relationship and object the service understands.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IAttachedCollectionSourceProvider.CreateCollectionSource(System.Object,System.String)">
            <summary>
            For a given object and relationship, create an IAttachedCollectionSource.  This attached
            collection should contain items for the given relationship as they related to the source item.
            </summary>
            <param name="item">The source item for which the collection should be created.</param>
            <returns>A new attached collection source, or null if this provider does not support
            creation of collections for this object.</returns>
            <param name="relationshipName">The name of the relationship for which a collection should be created.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IAttachedCollectionSourceProvider.GetRelationships(System.Object)">
            <summary>
            For a given object, enumerate the possible relationship collections this provider
            knows about.
            </summary>
            <param name="item">The item to enumerate possible relationships for.</param>
            <returns>An enumerable of relationships.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IAttachedCollectionSourceProvider2">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IAttachedCollectionSourceProvider2.GetItemsForPath(System.String)">
            <summary>
            Retrieves all the items owned by this provider that represent the document at the specified file path.
            </summary>
            <param name="filePath">File path to match.</param>
            <returns>Array of items.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IAttachedRelationship">
            <summary>
            Contains metadata about an attached relationship, used by the <see cref="T:Microsoft.VisualStudio.Shell.IAttachedCollectionService" />
            to describe relationships between objects.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IAttachedRelationship.Name">
            <summary>
            Gets the non-localized uniquely-identifying name of this relationship.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IAttachedRelationship.DisplayName">
            <summary>
            Gets a localizable description of this relationship.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IBuildCancellationAwareHostObject">
            <summary>
            Allows for a host object to be able to use a <see cref="T:System.Threading.CancellationToken" /> that is triggered when build is cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IBuildCancellationAwareHostObject.SetCancellationToken(System.Threading.CancellationToken)">
            <summary>
            Set the build cancellation token that the host object can use for cancelling operations when build is cancelled.
            </summary>
            <param name="cancellationToken">The cancellation token to use.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ICacheableAttachedCollectionSource">
            <summary>
            Represents an IAttachedCollectionSource that can potentially be cached.
            Cached sources do not need to be re-created each time they're requested.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ICacheableAttachedCollectionSource.CanCache">
            <summary>
            Gets whether or not the items from this IAttachedCollectionSource can be cached.
            IAttachedCollectionSource instances that do not support observable changes to their items
            (via INotifyCollectionChanged) but which do change over time
            should not be cached, since caching the IAttachedCollectionSource will permanently
            cache a stale collection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IClientRightsAdditionalMetadata">
            <summary>
            This interface is for passing any additional metadata from the client rights.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IClientRightsAdditionalMetadata.ClientRightsMetadata">
            <summary>
            We are using a dictionary as we do not know what data we may get in future
            At present it only contains the nonlocalized license description for telemetry.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ICommentTaskToken">
            <summary>
            This interface is used to get information about one of the tokens used to generate tasks.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ICommentTaskToken.Priority">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Shell.CommentTaskPriority" /> to use when creating tasks based on this token.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ICommentTaskToken.Text">
            <summary>
            Gets the keyword used to identify tasks in comments.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IJoinableTaskFactoryAwareHostObject">
            <summary>
            Allows for a host object to be able to use the main thread without blocking a build that is blocked on the main thread.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IJoinableTaskFactoryAwareHostObject.SetContext(Microsoft.VisualStudio.Threading.JoinableTaskFactory)">
            <summary>
            Set the joinable task factory that the host object should use for thread switching operations.
            </summary>
            <param name="factory">The joinable task factory to use.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IMaintenanceTask">
            <summary>
            An interface that may be implemented and exported into the default Visual Studio catalog
            in order to receive one chance per VS session when VS is idle to get some periodic work done.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IMaintenanceTask.PerformMaintenanceAsync(System.Threading.CancellationToken)">
            <summary>
            Invoked by the idle manager when it's a good time to get your periodic maintenance task done.
            </summary>
            <param name="cancellationToken">A token that is canceled when the user begins interacting with the IDE again.</param>
            <returns>A task that tracks the potentially asynchronous background operation.</returns>
            <exception cref="T:System.OperationCanceledException">May be thrown when <paramref name="cancellationToken" /> is canceled in order to be called again the next time the IDE is idle.</exception>
            <exception cref="T:System.Exception">Any other exception thrown by an implementation gets logged to the VS Activity Log and posted as fault telemetry.</exception>
            <remarks>
            <para>This method will be invoked on a background thread.
            Attempts to switch to the main thread with <see cref="M:Microsoft.VisualStudio.Threading.JoinableTaskFactory.SwitchToMainThreadAsync(System.Threading.CancellationToken)" />
            will be processed with background priority.</para>
            <para>This method runs at most once per session (during a long idle period), or more than once
            when prior runs were canceled due to user activity.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IMSDNChannel">
            <summary>
            interface for msdn subscription channel information.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IMSDNChannel.SubscriptionChannel">
            <summary>
            msdn subscription channel e.g. FTE, RETAIL etc.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.InvokableBase">
            <summary>
            Base class representing a call-back method which should be invoked on
            a specific thread. Exceptions are captured in the Exception property.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.InvokableAction">
            <summary>
            An Invokable method which has no return value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.InvokableFunction`1">
            <summary>
            An Invokable method with a return value.
            </summary>
            <typeparam name="TResult">The type of the return value from the method.</typeparam>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ISettingsMachineLocalityEvaluator">
            <summary>
            This interface is used in conjunction with SharedSettingsAttribute to evaluate whether a property value is
            machine-local (i.e. should not roam to other machines) at runtime.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ISettingsMachineLocalityEvaluator.IsMachineLocal(System.String,System.Object)">
            <summary>
            Evaluates whether a property value is machine-local.
            </summary>
            <param name="name">The full name of the setting as specified via SharedSettingsAttribute.</param>
            <param name="value">The current value of the property.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxExtensionsSdkInfo2">
            <summary>
            Provides additional information from SDK manifests.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IToolboxExtensionsSdkInfo2.GetAttributeValue(System.String)">
            <summary>
            Retrieves the value of an attribute in the manifest of an Extesion SDK.
            </summary>
            <param name="attributeName">The name of the attribute to retrieve the value for.</param>
            <returns>The value of the attribute, or null if it was not found.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxItemDiscoveryWithContext">
            <summary>
            Provides information about managed types from which toolbox items could be created.
            </summary>
            <remarks>
            Implemented by packages and supplied from IToolboxItemDiscoveryFactory.CreateItemDiscovery.
            Packages deriving from Microsoft.VisualStudio.Shell.Package supply this object via the
            discoveryType argument to ProvideToolboxItemDiscoveryAttribute.  This object is only used
            in a secondary appdomain which is unloaded after assembly enumeration completes.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IToolboxItemDiscoveryWithContext.AdditionalAssemblyPaths">
             <summary>
             Gets a collection of additional assembly paths to search for toolbox items.
             </summary>
             <remarks>
             For each framework in the "frameworksToEnumerate" argument of the ProvideToolboxItemDiscovery
             attribute, the toolbox will enumerate all assemblies registered under AssemblyFoldersEx keys,
             and pass their types to GetItemInfo.  However, if you want additional assemblies to show up
             in your list, you can supply their paths here.  You can even omit the "frameworksToEnumerate"
             argument altogether to use only the assemblies returned from this property.  You can return
             null or an empty enumerator if you don't need to provide any additional assemblies.
            
             This method may be called on a background thread.
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IToolboxItemDiscoveryWithContext.GetItemInfo(Microsoft.VisualStudio.Shell.IToolboxType,Microsoft.VisualStudio.Shell.ToolboxItemDiscoveryContext)">
             <summary>
             Returns the IToolboxItemInfo corresponding to a given type.
             </summary>
             <returns>The info about this type, or null if the type is not a valid toolbox control type recognized by this provider.</returns>
             <remarks>
             This method should inspect the type of the <paramref name="type" /> argument if
             it needs to provide different information depending on the source of the type (such as
             an extension SDK).  See the IToolbox*Type interfaces that derive from IToolboxType.
            
             This method may be called on a background thread.
             </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IVsAsyncFileChangeEx">
            <summary>
            Asynchronous methods for the VS file change service (<see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsFileChangeEx" />).
            </summary>
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsAsyncFileChangeEx.AdviseFileChangeAsync(System.String,Microsoft.VisualStudio.Shell.Interop._VSFILECHANGEFLAGS,Microsoft.VisualStudio.Shell.Interop.IVsFreeThreadedFileChangeEvents2,System.Threading.CancellationToken)">
            <summary>
            Creates a subscription to changes for a single file.
            </summary>
            <param name="filename">The name of the file to subscribe to.</param>
            <param name="filter">The flags describing the changes to be notified of.</param>
            <param name="sink">The event sink.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A task that will complete once the subscription has been set up.  The task's
            result will be the subscription cookie.
            </returns>
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsAsyncFileChangeEx.UnadviseFileChangeAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Removes a subscription to changes for a single file.
            </summary>
            <param name="cookie">The file subscription cookie.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A task that will complete once the subscription has been removed.  The task's
            result will be the name of the unsubscribed file.
            </returns>
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsAsyncFileChangeEx.UnadviseFileChangesAsync(System.Collections.Generic.IReadOnlyCollection{System.UInt32},System.Threading.CancellationToken)">
            <summary>
            Removes the subscriptions to changes for multiple files.
            </summary>
            <param name="cookies">The file subscription cookies.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A task that will complete once the subscriptions have been removed.
            </returns>
            <remarks>
            <para>
            This is for reversing the effects of one or more calls to IVsFileChangeEx.AdviseFileChange.
            </para>
            <para>
            This method is safe to access from any thread.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsAsyncFileChangeEx.AdviseDirChangeAsync(System.String,System.Boolean,Microsoft.VisualStudio.Shell.Interop.IVsFreeThreadedFileChangeEvents2,System.Threading.CancellationToken)">
            <summary>
            Creates a subscription to changes for a directory.
            </summary>
            <param name="directory">The name of the directory to subscribe to.</param>
            <param name="watchSubdirectories">
            If true, <paramref name="sink" /> is notified of changes to file in <paramref name="directory" />
            and any of its subdirectories.  If false, <paramref name="sink" /> is notified of changes to
            files in <paramref name="directory" /> only.
            </param>
            <param name="sink">The event sink.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A task that will complete once the subscription has been set up.  The task's
            result will be the subscription cookie.
            </returns>
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsAsyncFileChangeEx.UnadviseDirChangeAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Removes a subscription to changes for a directory.
            </summary>
            <param name="cookie">The file subscription cookie.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A task that will complete once the subscription has been removed.  The task's
            result will be the name of the unsubscribed directory.
            </returns>
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsAsyncFileChangeEx.UnadviseDirChangesAsync(System.Collections.Generic.IReadOnlyCollection{System.UInt32},System.Threading.CancellationToken)">
            <summary>
            Removes the subscriptions to changes for multiple directories.
            </summary>
            <param name="cookies">The directory subscription cookies.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A task that will complete once the subscriptions have been removed.
            </returns>
            <remarks>
            <para>
            This is for reversing the effects of one or more calls to IVsFileChangeEx.AdviseDirChange.
            </para>
            <para>
            This method is safe to access from any thread.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsAsyncFileChangeEx.SyncFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Forces change events to be sent for a file.
            </summary>
            <param name="filename">The name of the file to send notifications for.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that will complete once the notifications have been sent.</returns>
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsAsyncFileChangeEx.IgnoreFileAsync(System.UInt32,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Ignores or un-ignores changes in a file or in a subscription.
            </summary>
            <param name="cookie">
            The cookie for the file subscription to ignore.  If this is VSConstants.VSCOOKIE_NIL,
            then all subscriptions for <paramref name="filename" /> are ignored or un-ignored.
            If this is any other value, then the <paramref name="filename" /> parameter is not used.
            </param>
            <param name="filename">
            The name of the file to ignore.  This parameter is not used if <paramref name="cookie" />
            is any value other than VSConstants.VSCOOKIE_NIL.
            </param>
            <param name="ignore">True to ignore the file or subscription, false to un-ignore.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that will complete once the operation is finished.</returns>
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsAsyncFileChangeEx.IgnoreDirAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Ignores or un-ignores changes in a directory and its subdirectories.
            </summary>
            <param name="directory">The name of the directory to ignore.</param>
            <param name="ignore">True to ignore directory, false to un-ignore.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that will complete once the operation is finished.</returns>
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsAsyncFileChangeEx.FilterDirectoryChangesAsync(System.UInt32,System.String[],System.Threading.CancellationToken)">
            <summary>
            Filters the notifications from directory changes.
            </summary>
            <param name="cookie">The directory subscription cookie.</param>
            <param name="extensions">
            The file extensions for which change notifications will be sent.  If <paramref name="extensions" />
            is null or empty, all change notifications will be sent.  Extensions should include the period
            (e.g. ".cs").  If you want to be notified of changes to files that don't have an extension, include
            the empty string in the <paramref name="extensions" /> array.
            </param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that will complete once the operation is finished.</returns>
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IVsAsyncFileChangeEx2">
            <summary>
            Asynchronous methods for the VS file change service (<see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsFileChangeEx" />).
            </summary>
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsAsyncFileChangeEx2.AdviseFileChangesAsync(System.Collections.Generic.IReadOnlyCollection{System.String},Microsoft.VisualStudio.Shell.Interop._VSFILECHANGEFLAGS,Microsoft.VisualStudio.Shell.Interop.IVsFreeThreadedFileChangeEvents2,System.Threading.CancellationToken)">
            <summary>
            Creates subscriptions to changes for multiple files.
            </summary>
            <param name="filenames">The names of the files to subscribe to.</param>
            <param name="filter">The flags describing the changes to be notified of.</param>
            <param name="sink">The event sink.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A task that will complete once the subscriptions have been set up.  The task's
            result will be the subscription cookies.  The first cookie in the returned array
            is the cookie for the first file in the <paramref name="filenames" />, and so on.
            </returns>
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IVsProjectSecrets">
            <summary>
            An interface implemented by a project system to store secrets
            that the application this project builds can access at runtime.
            </summary>
            <remarks>
            <para>
            An implementation of this interface may be obtained by calling
            IVsProject.GetItemContext(VSConstants.VSITEMID_Root, out IServiceProvider sp)
            and querying the resulting IServiceProvider for the service that implements this interface.
            Multiple services that implement this interface may be defined, each representing a different
            persistent store of secrets (e.g. secrets.json, appsettings.json, Key Vault).
            This interface itself should <em>not</em> be proffered as a the service type/ID to avoid confusion
            between the different sources.
            If a particular storage system may apply to multiple files in the project, this service <em>may</em>
            be found by calling IVsProject.GetItemContext passing in the ITEMID for one of those represented files.
            </para>
            <para>
            Implementations are expected to be free-threaded and thread-safe.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsProjectSecrets.SanitizeName(System.String)">
            <summary>
            Replaces any disallowed characters from the proposed secret name with an allowed substitution character.
            For example, if `:` is not an allowed secret name character, this method might replace use of that character
            with an underscore (‘_’).
            </summary>
            <param name="name">The candidate name for the secret. Must not be <c>null</c>, but may be empty.</param>
            <returns>The sanitized name to use for the secret.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsProjectSecrets.GetInvalidCharactersFrom(System.String)">
            <summary>
            Gets the set of distinct characters from the proposed secret name that would be disallowed.
            </summary>
            <param name="name">The candidate name for the secret. Must not be <c>null</c>, but may be empty.</param>
            <returns>The set of characters found in <paramref name="name" /> that are reserved and not allowed for use.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsProjectSecrets.AddSecretAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Adds a secret with the given name so the application built by this project can access it at runtime.
            </summary>
            <param name="name">The name of the secret. Must not be <c>null</c> or empty.</param>
            <param name="value">The secret itself.</param>
            <param name="cancellationToken">A token that may cancel this operation.</param>
            <returns>A task that represents the asynchronous store operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="name" /> is empty, contains reserved characters that <see cref="M:Microsoft.VisualStudio.Shell.IVsProjectSecrets.GetInvalidCharactersFrom(System.String)" /> would have indicated were disallowed, or collides with the name of an existing secret.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when integrity rules would be violated by this operation.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when the user does not have permission for this operation.</exception>
            <exception cref="T:System.IO.IOException">Thrown when the operation could not be completed due to some network or I/O failure.</exception>
            <remarks>
            If a secret with the specified name already exists, an <see cref="T:System.ArgumentException" /> is thrown.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsProjectSecrets.SetSecretAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Adds or updates a secret with the given name so the application built by this project can access it at runtime.
            </summary>
            <param name="name">The name of the secret. Must not be <c>null</c> or empty.</param>
            <param name="value">The secret itself.</param>
            <param name="cancellationToken">A token that may cancel this operation.</param>
            <returns>A task that represents the asynchronous store operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="name" /> is empty or contains reserved characters that <see cref="M:Microsoft.VisualStudio.Shell.IVsProjectSecrets.GetInvalidCharactersFrom(System.String)" /> would have indicated were disallowed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when integrity rules would be violated by this operation.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when the user does not have permission for this operation.</exception>
            <exception cref="T:System.IO.IOException">Thrown when the operation could not be completed due to some network or I/O failure.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsProjectSecrets.GetSecretAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the secret with the given name.
            </summary>
            <param name="name">The name of the secret whose value should be retrieved. Must not be <c>null</c> or empty.</param>
            <param name="cancellationToken">A token that may cancel this operation.</param>
            <returns>The value of the secret.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="name" /> is empty.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if no secret with the specified <paramref name="name" /> could be found.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when the user does not have permission for this operation.</exception>
            <exception cref="T:System.IO.IOException">Thrown when the operation could not be completed due to some network or I/O failure.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsProjectSecrets.GetSecretNamesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the names of the stored secrets.
            </summary>
            <param name="cancellationToken">A token that may cancel this operation.</param>
            <returns>The set of secret names.</returns>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when the user does not have permission for this operation.</exception>
            <exception cref="T:System.IO.IOException">Thrown when the operation could not be completed due to some network or I/O failure.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsProjectSecrets.GetSecretsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a complete map of stored secret names and values.
            </summary>
            <param name="cancellationToken">A token that may cancel this operation.</param>
            <returns>A dictionary containing the names and values of all the secrets.</returns>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when the user does not have permission for this operation.</exception>
            <exception cref="T:System.IO.IOException">Thrown when the operation could not be completed due to some network or I/O failure.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsProjectSecrets.RemoveSecretAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes a previously stored secret.
            </summary>
            <param name="name">The name of the secret to remove. Must not be <c>null</c> or empty.</param>
            <param name="cancellationToken">A token that may cancel this operation.</param>
            <returns>
            A task that returns a boolean value indicating whether the secret was removed.
            <c>true</c> if the secret was successfully removed.
            <c>false</c> if no secret with the specified <paramref name="name" /> was found to remove.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="name" /> is empty.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when integrity rules would be violated by this operation.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when the user does not have permission for this operation.</exception>
            <exception cref="T:System.IO.IOException">Thrown when the operation could not be completed due to some network or I/O failure.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IVsTaskJoinableTask">
            <summary>
            Interface for attaching a single JoinableTask with an IVsTask instance.
            </summary>
            <remarks>
            Meant for MICROSOFT INTERNAL USE ONLY.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IVsTaskJoinableTask.CancellationToken">
            <summary>
            Gets the cancellation token used for this task.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsTaskJoinableTask.AssociateJoinableTask(System.Object)">
            <summary>
            Indicates that this IVsTask instance acts as a wrapper around the specified JoinableTask.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.OleServiceProvider.GlobalProvider">
            <summary>
            Access the global OLE service provider for the calling thread. If
            this has never been set, it is discovered from the OLE message
            filter for the calling thread.
            This may be null if the current thread does not have a suitable
            message filter implementing IOleServiceProvider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OleServiceProvider.GetGlobalProviderFromMessageFilter">
            <summary>
            Examine the current thread's COM message filter to obtain the global service provider.
            </summary>
            <returns>The global service provider, or null if this thread doesn't have one.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.RegistrationMethod">
            <summary>
            How should the assembly be registered/located.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.RegistrationMethod.Default">
            <summary>
            Default should only be used by tools.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.RegistrationMethod.CodeBase">
            <summary>
            The path to the assembly should be stored in the registry and used to locate the assembly at runtime.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.RegistrationMethod.Assembly">
            <summary>
            The assembly should be in the GAC or in PrivateAssemblies.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.RegistrationAttribute">
            <devdoc>
                This attribute is the basis for all other attributes that can be registered by RegPkg.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.TypeId">
            <summary>
            Override the TypeID property in order to let the RegistrationAttribute derived
            classes to work with System.ComponentModel.TypeDescriptor.GetAttributes(...).
            An attribute derived from this one will have to override this property only if
            it needs a better control on the instances that can be applied to a class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
             <devdoc>
                 Called to register this attribute with the given context.  The context
                 contains the location where the registration information should be placed.
                 It also contains such as the type being registered, and path information.
            
                 This method is called both for registration and unregistration.  The difference is
                 that unregistering just uses a hive that reverses the changes applied to it.
             </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <devdoc>
                Called to unregister this attribute with the given context.  The context
                contains the location where the registration information should be removed.
                It also contains things such as the type being unregistered, and path information.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key">
            <devdoc>
                Abstraction around a registry key.  This may or may not actually
                point to a real registry key.  It could point to a file.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key.Close">
            <devdoc>
                Called to close this key.  Alternately, you may use the C# "using"
                syntax on keys, since they are IDisposable. Always close keys when you
                are done with them.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key.CreateSubkey(System.String)">
            <devdoc>
                Creates a subkey of the given name.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key.SetValue(System.String,System.Object)">
            <devdoc>
                Sets the name to the given value. Pass an empty string or null into this to
                set the default value for a key.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key.System#IDisposable#Dispose">
            <internalonly />
            <devdoc>
            Closes the key.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext">
            <devdoc>
                Abstraction around the registry itself.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.ComponentPath">
            <devdoc>
                The path to the compnent that is being registered.  You should always use this rather than the
                codebase of the component type, and you should never assume that this is a physical path on
                disk.  It may be a token that identifies the path at install time.  The "component"
                is the type that the registration attribute was found on.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.ComponentType">
            <devdoc>
                The type of the component that is being registered.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.InprocServerPath">
            <devdoc>
                The path to the COM object supplying the class factory.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.CodeBase">
            <devdoc>
                The path to the object being registered (including filename).
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.RootFolder">
            <devdoc>
                The path to the installation for the host application (e.g. Visual Studio "C:\Program Files\Microsoft Visual Studio {version}\").
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.RegistrationMethod">
            <devdoc>
            Specify if the assembly should be located using CodeBase or Assembly.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.Log">
            <devdoc>
                Returns a text writer that can be used to log registration information.  This should
                be a human readable (and ideally localized) bit of text that describes the
                current registration process.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.CreateKey(System.String)">
            <devdoc>
                Creates a new key of the given name.  The key is created at the appropriate registration
                point in the registry.  Always close or dispose this key when finished with it.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.RemoveKey(System.String)">
            <devdoc>
            Removes the key of the given name.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.RemoveValue(System.String,System.String)">
            <devdoc>
            Removes the value of the given name under the key of the given keyname.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.RemoveKeyIfEmpty(System.String)">
            <devdoc>
            Removes the key of the given name if it has no child key and
            no value.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.EscapePath(System.String)">
            <devdoc>
            Escape the string if needed
            This is used by the implementation of the Register method on attributes so that paths be escaped when
            needed. The attribute itself does not know if we are writting to a .reg file or directly to the registry.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.GetPackageRegKeyPath(System.Guid)">
            <devdoc>
                Returns the registry path (relative to this AppID's registry root) where the
                registration for the given package is located.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Framework.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Framework.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Framework.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Framework.Resources.Error_DateTimeKindMustBeUtc">
            <summary>
              Looks up a localized string similar to DateTimeKind of timestamp must be DateTimeKind.Utc..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Framework.Resources.Error_UriMustBeAbsolute">
            <summary>
              Looks up a localized string similar to Uri must be absolute..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Framework.Resources.General_MissingService">
            <summary>
              Looks up a localized string similar to The service '{0}' must be installed for this feature to work.  Ensure that this service is available..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Framework.Resources.General_MissingServiceWithHR">
            <summary>
              Looks up a localized string similar to The service '{0}' must be installed for this feature to work.  Ensure that this service is available. HRESULT = 0x{1:X8}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Framework.Resources.General_NoServiceInterface">
            <summary>
              Looks up a localized string similar to The service '{0}' does not implement the '{1}' interface..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Framework.Resources.RunContextNotSafeForJoinableTasks">
            <summary>
              Looks up a localized string similar to The specified run context is not allowed for JoinableTask instances..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Framework.Resources.ServiceProvider_OnlySetErrorInfoFromUIThread">
            <summary>
              Looks up a localized string similar to Setting error info should only be done from the main thread..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Framework.Resources.Services_InvokedOnWrongThread">
            <summary>
              Looks up a localized string similar to Invoked on the wrong thread..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Framework.Resources.ThreadHelper_UIThreadDispatcherUnavailable">
            <summary>
              Looks up a localized string similar to Unable to identify the UI thread's Dispatcher object..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Framework.Resources.UIContext_SetIsActiveNotAllowed">
            <summary>
              Looks up a localized string similar to Activating or deactivating known UIContexts is not allowed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Framework.Resources.UIContext_ZombiedInstance">
            <summary>
              Looks up a localized string similar to This operation is not allowed on a zombie UIContext instance..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Framework.Resources.UIContext_AwaitDuringShutdown">
            <summary>
              Looks up a localized string similar to Awaiting a UI context is not allowed when the shell is shutting down..
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper">
            <summary>
            Helper methods for using Visual Studio task library in managed code.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.DefaultWaitDialogDelay">
            <summary>
            The default delay before a threaded wait dialog appears during a synchronous block of the UI thread.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.ServiceInstance">
            <summary>
            Gets the task scheduler service instance.
            </summary>
            <remarks>
            If service query failed we will keep retrying as GlobalServices class might not have been initialized yet.
            This can be true for older versions of Visual Studio Shell assembly.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.CreateTaskBody(Microsoft.VisualStudio.Shell.VsTaskBodyCallback)">
            <summary>
            Creates a task body that can be consumed by task scheduler service.
            </summary>
            <param name="action">Anonymous method to execute as the task body.</param>
            <returns>an implementation of IVsTaskBody.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.CreateTaskBody``1(System.Action{``0})">
            <summary>
            Creates a task body that can be consumed by task scheduler service.
            </summary>
            <param name="action">Anonymous method to execute as the task body.</param>
            <returns>an implementation of IVsTaskBody.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.CreateTaskBody``1(System.Func{``0,System.Object})">
            <summary>
            Creates a task body that can be consumed by task scheduler service.
            </summary>
            <param name="action">Anonymous method to execute as the task body.</param>
            <returns>an implementation of IVsTaskBody.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.CreateTaskBody(System.Func{System.Object})">
            <summary>
            Creates a task body that can be consumed by task scheduler service.
            </summary>
            <param name="action">Anonymous method to execute as the task body.</param>
            <returns>an implementation of IVsTaskBody.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.CreateTaskBody(System.Action)">
            <summary>
            Creates a task body that can be consumed by task scheduler service.
            </summary>
            <param name="action">Anonymous method to execute as the task body.</param>
            <returns>an implementation of IVsTaskBody.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.CreateAndStartTask(Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService,Microsoft.VisualStudio.Shell.VsTaskRunContext,System.Action)">
            <summary>
            Creates a Visual Studio task that will be executed with the specified context.
            </summary>
            <param name="scheduler">The scheduler that will execute the task.</param>
            <param name="context">Where the task will be executed.</param>
            <param name="action">Anonymous method to execute as the task body.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.CreateAndStartTask(Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService,Microsoft.VisualStudio.Shell.VsTaskRunContext,Microsoft.VisualStudio.Shell.VsTaskBodyCallback)">
            <summary>
            Creates a Visual Studio task that will be executed with the specified context.
            </summary>
            <param name="scheduler">The scheduler that will execute the task.</param>
            <param name="context">Where the task will be executed.</param>
            <param name="action">VsTaskBodyCallback action to execute as the task body.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.CreateAndStartTask(Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService,Microsoft.VisualStudio.Shell.VsTaskRunContext,Microsoft.VisualStudio.Shell.Interop.IVsTaskBody)">
            <summary>
            Creates a Visual Studio task that will be executed with the specified context.
            </summary>
            <param name="scheduler">The scheduler that will execute the task.</param>
            <param name="context">Where the task will be executed.</param>
            <param name="pTaskBody">Action to be executed.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.CreateAndStartTaskEx(Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService,Microsoft.VisualStudio.Shell.VsTaskRunContext,Microsoft.VisualStudio.Shell.VsTaskCreationOptions,Microsoft.VisualStudio.Shell.Interop.IVsTaskBody,System.Object)">
            <summary>
            Creates a Visual Studio task that will be executed with the specified context.
            </summary>
            <param name="scheduler">The scheduler that will execute the task.</param>
            <param name="context">Where the task will be executed.</param>
            <param name="options">The options to apply to the created task.</param>
            <param name="pTaskBody">Action to be executed.</param>
            <param name="pAsyncState">The state object to store with the task.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.Delay(Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService,System.TimeSpan)">
            <summary>
            Returns a task that delays execution of the subsequent task by a given period of time.
            </summary>
            <param name="scheduler">The task scheduler service.</param>
            <param name="delay">The amount of time to delay the subsequent task.</param>
            <returns>The delaying task.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.Yield(Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService,Microsoft.VisualStudio.Shell.VsTaskRunContext,Microsoft.VisualStudio.Shell.Interop.IVsTaskCompletionSource)">
            <summary>
            Yields the current operation on the thread, the rest of the async method will be scheduled as a continuation.
            </summary>
            <param name="scheduler">Task scheduler service instance.</param>
            <param name="context">Context to use for scheduling the rest of the async method.</param>
            <param name="taskCompletionSource">If a task completion source is passed in, the task created will be added as a dependency.</param>
            <returns>an awaiter implementation to use with await keyword.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.Yield(Microsoft.VisualStudio.Shell.VsTaskRunContext,Microsoft.VisualStudio.Shell.Interop.IVsTaskCompletionSource)">
            <summary>
            Yields the current operation on the thread, the rest of the async method will be scheduled as a continuation.
            </summary>
            <param name="context">Context to use for scheduling the rest of the async method.</param>
            <param name="taskCompletionSource">If a task completion source is passed in, the task created will be added as a dependency.</param>
            <returns>an awaiter implementation to use with await keyword.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.CompleteAfterTask``1(Microsoft.VisualStudio.Shell.Interop.IVsTaskCompletionSource,System.Threading.Tasks.Task{``0})">
            <summary>
            Sets a continuation on the task passed in so that task completion source is set to correct state after the task
            is completed/faulted or canceled.
            </summary>
            <typeparam name="T">Return type of the task.</typeparam>
            <param name="taskCompletionSource">Task completion source that will be set once the task is completed.</param>
            <param name="task">Task that will be used to set the state of the task completion source.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.CopyTaskResultIfCompleted``1(System.Threading.Tasks.Task{``0},Microsoft.VisualStudio.Shell.Interop.IVsTaskCompletionSource)">
            <summary>
            Returns true if the task was completed, otherwise false.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.InvokeAsync``1(Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService,Microsoft.VisualStudio.Shell.VsInvokableAsyncFunction{``0})">
            <summary>
            Helper function that transforms a TPL task from an async function into an IVsTask.
            </summary>
            <param name="scheduler">IVsTaskScheduler used to create the IVsTaskCompletionSource.</param>
            <param name="asyncFunction">Asynchronous function that takes an IVsTaskCompletionSource and returns a TPL task.</param>
            <returns>Returns an IVsTask that only completes once the TPL task returned from asyncFunction completes.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.Delay(Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService,System.Double)">
            <summary>
            Returns a task that delays execution of the subsequent task by a given period of time.
            </summary>
            <param name="scheduler">The task scheduler service.</param>
            <param name="delayMilliseconds">The number of milliseconds to delay the subsequent task.</param>
            <returns>The delaying task.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.RunAsync``1(Microsoft.VisualStudio.Threading.JoinableTaskFactory,Microsoft.VisualStudio.Shell.VsTaskRunContext,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Wraps the invocation of an async method such that it may
            execute asynchronously, but may potentially be
            synchronously completed (waited on) in the future.
            </summary>
            <typeparam name="T">The type of value returned by the asynchronous operation.</typeparam>
            <param name="joinableTaskFactory">The factory to use for creating the task.</param>
            <param name="priority">
            The priority with which to schedule any work on the UI thread,
            when and if <see cref="M:Microsoft.VisualStudio.Threading.JoinableTaskFactory.SwitchToMainThreadAsync(System.Threading.CancellationToken)" /> is called.
            </param>
            <param name="asyncMethod">The method that, when executed, will begin the async operation.</param>
            <returns>An object that tracks the completion of the async operation, and allows for later synchronous blocking of the main thread for completion if necessary.</returns>
            <remarks>
            Exceptions thrown by the delegate are captured by the returned <see cref="T:Microsoft.VisualStudio.Threading.JoinableTask" />.
            Note that the <paramref name="asyncMethod" /> delegate begins its execution on the caller's thread,
            and must explicitly call <see cref="M:Microsoft.VisualStudio.Threading.JoinableTaskFactory.SwitchToMainThreadAsync(System.Threading.CancellationToken)" /> if the main thread is desired.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.RunAsync(Microsoft.VisualStudio.Threading.JoinableTaskFactory,Microsoft.VisualStudio.Shell.VsTaskRunContext,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Wraps the invocation of an async method such that it may
            execute asynchronously, but may potentially be
            synchronously completed (waited on) in the future.
            </summary>
            <param name="joinableTaskFactory">The factory to use for creating the task.</param>
            <param name="priority">
            The priority with which to schedule any work on the UI thread,
            when and if <see cref="M:Microsoft.VisualStudio.Threading.JoinableTaskFactory.SwitchToMainThreadAsync(System.Threading.CancellationToken)" /> is called.
            </param>
            <param name="asyncMethod">The method that, when executed, will begin the async operation.</param>
            <returns>An object that tracks the completion of the async operation, and allows for later synchronous blocking of the main thread for completion if necessary.</returns>
            <remarks>
            Exceptions thrown by the delegate are captured by the returned <see cref="T:Microsoft.VisualStudio.Threading.JoinableTask" />.
            Note that the <paramref name="asyncMethod" /> delegate begins its execution on the caller's thread,
            and must explicitly call <see cref="M:Microsoft.VisualStudio.Threading.JoinableTaskFactory.SwitchToMainThreadAsync(System.Threading.CancellationToken)" /> if the main thread is desired.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.RunAsyncAsVsTask``1(Microsoft.VisualStudio.Threading.JoinableTaskFactory,Microsoft.VisualStudio.Shell.VsTaskRunContext,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates an IVsTask to track a cancelable async operation.
            </summary>
            <typeparam name="T">The type of value returned by the async operation.</typeparam>
            <param name="joinableTaskFactory">The factory to use for creating the task.</param>
            <param name="priority">
            The priority with which to schedule any work on the UI thread,
            when and if <see cref="M:Microsoft.VisualStudio.Threading.JoinableTaskFactory.SwitchToMainThreadAsync(System.Threading.CancellationToken)" /> is called.
            </param>
            <param name="asyncMethod">The method that, when executed, will begin the async operation.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTask" /> instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.Run(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,System.Func{System.IProgress{Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData},System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Nullable{System.TimeSpan})">
            <summary>
            Blocks the calling (UI) thread till a cancelable, async operation completes.
            An optionally cancelable wait dialog is displayed if the operation takes too long.
            </summary>
            <param name="joinableTaskFactory">The factory to use for creating the task.</param>
            <param name="waitCaption">The title of the wait dialog, when and if it appears.</param>
            <param name="asyncMethod">
            The operation which would otherwise be async but is blocking the UI thread in this scenario.
            A means of updating the wait dialog's progress display, and a CancellationToken signaling user cancellation are provided.
            </param>
            <param name="delayToShowDialog">The time to wait for <paramref name="asyncMethod" /> to complete before displaying the wait dialog. The default (null) is 2 seconds.</param>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown if not called on the UI thread.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.Run``1(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,System.Func{System.IProgress{Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData},System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan})">
            <inheritdoc cref="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.Run(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,System.Func{System.IProgress{Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData},System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Nullable{System.TimeSpan})" />
            <typeparam name="T">The return type of the async operation.</typeparam>
            <returns>The result of <paramref name="asyncMethod" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.Run(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,System.Func{System.IProgress{Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData},System.Threading.Tasks.Task},System.Nullable{System.TimeSpan})">
            <summary>
            Blocks the calling (UI) thread till an async operation completes.
            An optionally cancelable wait dialog is displayed if the operation takes too long.
            </summary>
            <param name="joinableTaskFactory">The factory to use for creating the task.</param>
            <param name="waitCaption">The title of the wait dialog, when and if it appears.</param>
            <param name="asyncMethod">
            The operation which would otherwise be async but is blocking the UI thread in this scenario.
            A means of updating the wait dialog's progress display is provided.
            </param>
            <param name="delayToShowDialog">The time to wait for <paramref name="asyncMethod" /> to complete before displaying the wait dialog. The default (null) is 2 seconds.</param>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown if not called on the UI thread.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.Run``1(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,System.Func{System.IProgress{Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData},System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan})">
            <inheritdoc cref="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.Run(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,System.Func{System.IProgress{Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData},System.Threading.Tasks.Task},System.Nullable{System.TimeSpan})" />
            <typeparam name="T">The return type of the async operation.</typeparam>
            <returns>The result of <paramref name="asyncMethod" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.Run(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,System.String,System.Func{System.IProgress{Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData},System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Nullable{System.TimeSpan})">
            <summary>
            Blocks the calling (UI) thread till an async operation completes.
            Cancellation is offered to the user.
            </summary>
            <param name="joinableTaskFactory">The factory to use for creating the task.</param>
            <param name="waitCaption">The title of the wait dialog, when and if it appears.</param>
            <param name="waitMessage">The message inside the wait dialog, when and if it appears.</param>
            <param name="asyncMethod">
            The operation which would otherwise be async but is blocking the UI thread in this scenario.
            </param>
            <param name="delayToShowDialog">The time to wait for <paramref name="asyncMethod" /> to complete before displaying the wait dialog. The default (null) is 2 seconds.</param>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown if not called on the UI thread.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.Run``1(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,System.String,System.Func{System.IProgress{Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData},System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan})">
            <inheritdoc cref="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.Run(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,System.String,System.Func{System.IProgress{Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData},System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Nullable{System.TimeSpan})" />
            <typeparam name="T">The return type of the async operation.</typeparam>
            <returns>The result of <paramref name="asyncMethod" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.Run(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,System.String,System.Func{System.IProgress{Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData},System.Threading.Tasks.Task},System.Nullable{System.TimeSpan})">
            <summary>
            Blocks the calling (UI) thread till an async operation completes.
            No cancellation is offered to the user.
            </summary>
            <param name="joinableTaskFactory">The factory to use for creating the task.</param>
            <param name="waitCaption">The title of the wait dialog, when and if it appears.</param>
            <param name="waitMessage">The message inside the wait dialog, when and if it appears.</param>
            <param name="asyncMethod">
            The operation which would otherwise be async but is blocking the UI thread in this scenario.
            </param>
            <param name="delayToShowDialog">The time to wait for <paramref name="asyncMethod" /> to complete before displaying the wait dialog. The default (null) is 2 seconds.</param>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown if not called on the UI thread.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.Run``1(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,System.String,System.Func{System.IProgress{Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData},System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan})">
            <inheritdoc cref="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.Run(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,System.String,System.Func{System.IProgress{Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData},System.Threading.Tasks.Task},System.Nullable{System.TimeSpan})" />
            <typeparam name="T">The return type of the async operation.</typeparam>
            <returns>The result of <paramref name="asyncMethod" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.StartOnIdle(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.Func{System.Threading.Tasks.Task},Microsoft.VisualStudio.Shell.VsTaskRunContext)">
            <summary>
            Schedules a delegate for background execution on the UI thread without inheriting any claim to the UI thread from its caller.
            </summary>
            <param name="joinableTaskFactory">The factory to use for creating the task.</param>
            <param name="asyncMethod">The async delegate to invoke on the UI thread sometime in the future.</param>
            <param name="priority">The priority to use when switching to the UI thread or resuming after a yielding await.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Threading.JoinableTask" /> that represents the on-idle operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.StartOnIdle(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.Action,Microsoft.VisualStudio.Shell.VsTaskRunContext)">
            <summary>
            Schedules a delegate for background execution on the UI thread without inheriting any claim to the UI thread from its caller.
            </summary>
            <param name="joinableTaskFactory">The factory to use for creating the task.</param>
            <param name="action">The delegate to invoke on the UI thread sometime in the future.</param>
            <param name="priority">The priority to use when switching to the UI thread or resuming after a yielding await.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Threading.JoinableTask" /> that represents the on-idle operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.FileAndForget(Microsoft.VisualStudio.Threading.JoinableTask,System.String,System.String,System.Func{System.Exception,System.Boolean})">
            <summary>
            Records error information when the given <see cref="T:Microsoft.VisualStudio.Threading.JoinableTask" /> faults.
            </summary>
            <param name="joinableTask">The task to track failures of.</param>
            <param name="faultEventName">
            An event name following data model schema to use when filing a fault event when <paramref name="joinableTask" /> faults.
            Must not be null or empty.
            It consists of 3 parts and must follows pattern [product]/[featureName]/[entityName]. FeatureName could be a one-level feature or feature hierarchy delimited by "/".
            For examples: vs/platform/opensolution; vs/platform/editor/lightbulb/fixerror.
            </param>
            <param name="faultDescription">
            A description to include in the fault telemetry event when <paramref name="joinableTask" /> faults.
            This value is not put in a bucket parameter, but it is in the ErrorInformation.txt file in the
            Cab file sent to Watson, and in the AI event.</param>
            <param name="fileOnlyIf">
            An optional exception filter that must return <c>true</c> for the exception to be reported to the VS activity log and fault telemetry.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.FileAndForget(System.Threading.Tasks.Task,System.String,System.String,System.Func{System.Exception,System.Boolean})">
            <summary>
            Records error information when the given <see cref="T:System.Threading.Tasks.Task" /> faults.
            </summary>
            <param name="task">The task to track failures of.</param>
            <param name="faultEventName">
            An event name following data model schema to use when filing a fault event when <paramref name="task" /> faults.
            Must not be null or empty.
            It consists of 3 parts and must follows pattern [product]/[featureName]/[entityName]. FeatureName could be a one-level feature or feature hierarchy delimited by "/".
            For examples,
            vs/platform/opensolution;
            vs/platform/editor/lightbulb/fixerror;
            This value is also provided as the source (first argument) to <see cref="M:Microsoft.VisualStudio.Shell.ActivityLog.TryLogError(System.String,System.String)" />.
            </param>
            <param name="faultDescription">
            A description to include in the fault telemetry event when <paramref name="task" /> faults.
            This value is not put in a bucket parameter, but it is in the ErrorInformation.txt file in the
            Cab file sent to Watson, and in the AI event.
            If specified, this value is used as part of the message (second argument) to <see cref="M:Microsoft.VisualStudio.Shell.ActivityLog.TryLogError(System.String,System.String)" />.
            </param>
            <param name="fileOnlyIf">
            An optional exception filter that must return <c>true</c> for the exception to be reported to the VS activity log and fault telemetry.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.AsVsTask``1(Microsoft.VisualStudio.Threading.JoinableTask{``0})">
            <summary>
            Wraps a <see cref="T:Microsoft.VisualStudio.Threading.JoinableTask`1" /> instance in an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTask" /> that can be
            returned to COM clients.
            </summary>
            <typeparam name="T">The type of value returned by the asynchronous operation.</typeparam>
            <param name="joinableTask">The task to wrap.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTask" /> instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.WithPriority(Microsoft.VisualStudio.Threading.JoinableTaskFactory,Microsoft.VisualStudio.Shell.VsTaskRunContext)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskFactory" /> that schedules work with the specified Visual Studio UI thread priority.
            </summary>
            <param name="joinableTaskFactory">The underlying <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskFactory" /> to use.</param>
            <param name="priority">
            The priority with which to schedule any work on the UI thread,
            when and if <see cref="M:Microsoft.VisualStudio.Threading.JoinableTaskFactory.SwitchToMainThreadAsync(System.Threading.CancellationToken)" /> is called.
            </param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskFactory" /> that may be used for scheduling async work with the specified priority.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.GetAwaiter(Microsoft.VisualStudio.Shell.Interop.IVsTask)">
            <summary>
            Extension method for IVsTask to support await syntax in managed code.
            </summary>
            <param name="task">IVsTask instance to be used for scheduling continuations.</param>
            <returns>an awaitable object for IVsTask instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.GetAwaiter(Microsoft.Internal.VisualStudio.Shell.VsTaskAwaiter)">
             <summary>
             Extension method to add await support for VsTaskAwaiter instance which can be
             returned from ResumeWith call.
            
             We simply return the same awaiter instance.
             </summary>
             <returns>Returns the same instance of awaiter that this method was called on.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.GetAwaiter(Microsoft.VisualStudio.Shell.VsTaskRunContext)">
            <summary>
            Allows awaiting on a <see cref="T:Microsoft.VisualStudio.Shell.VsTaskRunContext" /> in order to execute code at a particular priority
            on or off the UI thread.
            </summary>
            <param name="context">The context to run the next segment from the calling async method with.</param>
            <returns>An awaiter that will cause the caller to switch to a particular <see cref="T:System.Threading.Tasks.TaskScheduler" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.GetTaskScheduler(Microsoft.VisualStudio.Shell.VsTaskRunContext)">
            <summary>
            Gets the <see cref="T:System.Threading.Tasks.TaskScheduler" /> that executes tasks on the thread and with the priority
            specified by the specified <see cref="T:Microsoft.VisualStudio.Shell.VsTaskRunContext" />.
            </summary>
            <param name="context">Indicates the thread and priority that tasks should be scheduled on.</param>
            <returns>The requested <see cref="T:System.Threading.Tasks.TaskScheduler" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.ResumeWith(Microsoft.VisualStudio.Shell.Interop.IVsTask,Microsoft.VisualStudio.Shell.VsTaskRunContext)">
            <summary>
            Extension method for task awatier to support awaits with a specific context.
            </summary>
            <param name="task">The task that will be used to schedule continuations.</param>
            <param name="context">Context that the continuation would be scheduled under.</param>
            <returns>an awaitable object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.ContinueWith(Microsoft.VisualStudio.Shell.Interop.IVsTask,Microsoft.VisualStudio.Shell.VsTaskRunContext,Microsoft.VisualStudio.Shell.Interop.IVsTaskBody)">
            <summary>
            Override for IVsTask.ContinueWith to use proper enum types.
            </summary>
            <remarks>See comments for IVsTask for method documentation.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.ContinueWith(Microsoft.VisualStudio.Shell.Interop.IVsTask,Microsoft.VisualStudio.Shell.VsTaskRunContext,Microsoft.VisualStudio.Shell.VsTaskContinuationOptions,Microsoft.VisualStudio.Shell.Interop.IVsTaskBody,System.Object)">
            <summary>
            Override for IVsTask.ContinueWithEx to use proper enum types.
            </summary>
            <remarks>See comments for IVsTask for method documentation.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.Wait(Microsoft.VisualStudio.Shell.Interop.IVsTask,System.Int32,Microsoft.VisualStudio.Shell.VsTaskWaitOptions)">
            <summary>
            Override for IvsTask.WaitEx to use proper enum types.
            </summary>
            <remarks>See comments for IVsTask for method documentation.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.Wait(Microsoft.VisualStudio.Shell.Interop.IVsTask,System.Int32)">
            <summary>
            Override for IvsTask.WaitEx with default options.
            </summary>
            <remarks>See comments for IVsTask for method documentation.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.CreateTask(Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService,Microsoft.VisualStudio.Shell.VsTaskRunContext,Microsoft.VisualStudio.Shell.Interop.IVsTaskBody)">
            <summary>
            Override for IVsTaskSchedulerService.CreateTask to use proper enum types.
            </summary>
            <remarks>See comments for IVsTaskSchedulerService for method documentation.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.CreateTask(Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService,Microsoft.VisualStudio.Shell.VsTaskRunContext,Microsoft.VisualStudio.Shell.VsTaskCreationOptions,Microsoft.VisualStudio.Shell.Interop.IVsTaskBody,System.Object)">
            <summary>
            Override for IVsTaskSchedulerService.CreateTaskEx to use proper enum types.
            </summary>
            <remarks>See comments for IVsTaskSchedulerService for method documentation.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.CreateTaskCompletionSource(Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService,Microsoft.VisualStudio.Shell.VsTaskCreationOptions,System.Object)">
            <summary>
            Override for IVsTaskSchedulerService.CreateTaskCompletionSourceEx to use proper enum types.
            </summary>
            <remarks>See comments for IVsTaskSchedulerService for method documentation.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.ContinueWhenAllCompleted(Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService,Microsoft.VisualStudio.Shell.VsTaskRunContext,Microsoft.VisualStudio.Shell.Interop.IVsTask[],Microsoft.VisualStudio.Shell.Interop.IVsTaskBody)">
            <summary>
            Override for IVsTaskSchedulerService.ContinueWhenAllCompleted to use proper enum types.
            </summary>
            <remarks>See comments for IVsTaskSchedulerService for method documentation.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.ContinueWhenAllCompleted(Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService,Microsoft.VisualStudio.Shell.VsTaskRunContext,Microsoft.VisualStudio.Shell.Interop.IVsTask[],Microsoft.VisualStudio.Shell.VsTaskContinuationOptions,Microsoft.VisualStudio.Shell.Interop.IVsTaskBody,System.Object)">
            <summary>
            Override for IVsTaskSchedulerService.ContinueWhenAllCompletedEx to use proper enum types.
            </summary>
            <remarks>See comments for IVsTaskSchedulerService for method documentation.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.ApplyCancellationToken(Microsoft.VisualStudio.Shell.Interop.IVsTask,System.Threading.CancellationToken)">
            <summary>
            Signals a VS Task to abort operations as soon as possible when the specified token is canceled.
            </summary>
            <param name="task">The task that may be canceled.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.CancelWhenCancellationRequested(Microsoft.VisualStudio.Shell.Interop.IVsTask,Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.Threading.CancellationToken)">
            <summary>
            Ensures that <paramref name="task" /> will be canceled when cancellation is requested for
            <paramref name="cancellationToken" />.
            </summary>
            <param name="task">The task to cancel.</param>
            <param name="jtf">The <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskFactory" /> to use.</param>
            <param name="cancellationToken">The token whose cancellation triggers the cancellation of <paramref name="task" />.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.IsUIThreadContext(Microsoft.VisualStudio.Shell.VsTaskRunContext)">
            <summary>
            Gets a value indicating whether the specified context represents UI thread work.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.IsUIThreadJoinableTaskSafeContext(Microsoft.VisualStudio.Shell.VsTaskRunContext)">
            <summary>
            Gets a value indicating whether the specified context represents UI thread work.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.SchedulerModifyingJoinableTaskFactoryWrapper">
            <summary>
            A JoinableTaskFactory that delegates to an existing one, except for scheduling UI thread work,
            which can be customized.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.SchedulerModifyingJoinableTaskFactoryWrapper.scheduler">
            <summary>
            The scheduler to use for UI thread work.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.SchedulerModifyingJoinableTaskFactoryWrapper.#ctor(Microsoft.VisualStudio.Threading.JoinableTaskFactory,Microsoft.VisualStudio.Shell.VsTaskRunContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.SchedulerModifyingJoinableTaskFactoryWrapper" /> class.
            </summary>
            <param name="innerFactory">The existing factory.</param>
            <param name="context">The priority with which to schedule any UI thread work.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Framework.VsTaskLibraryHelper.SchedulerModifyingJoinableTaskFactoryWrapper.PostToUnderlyingSynchronizationContext(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Posts work to the UI thread.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Framework.VsManagedTaskBody">
            <summary>
            Managed implementation of a task body that will be within a task in the library.
            This object has to be thread safe.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderManager">
            <summary>
            Platform SCC service.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderManager.SccStatusChanged">
            <summary>
            Aggregates the events from active providers and routes to subscribers.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderManager.OpenFolder(System.String)">
            <summary>
            Visual Studio can call it to hint working in particular folder and will be interested in SCC status for items under it.
            </summary>
            <param name="absolutePath">Path to folder being actively worked on (like one by Open Folder feature). Must be absolute path.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderManager.CloseFolder(System.String)">
            <summary>
            Inform Folder SCC Manager that given folder is not a dev focus anymore. We may release associated bindings currently opened for this folder.
            </summary>
            <param name="absolutePath">Path to folder. Must be absolute path.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderManager.GetSccStatusAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Platform will delegate to the provider that binds to the path or its parent.
            </summary>
            <param name="absolutePath">Path to the file or folder.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The SCC status.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderProvider">
            <summary>
            Folder based SCC provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderProvider.RootFolder">
            <summary>
            root folder full path that is serviced by this provider instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderProvider.GetSccStatusAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the scc status (checkout state and icon) of file or folder.
            </summary>
            <param name="absolutePath">path to the file or folder.</param>
            <param name="cancellationToken">cancelation token.</param>
            <returns>the item's status.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderProviderBinder">
            <summary>
            Discovers SCC providers for a folder.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderProviderBinder.BindAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Find a controling scc provider for "rootFolder".
            It is ok to look inside but that would be at discretion of what is convenient
            and performant for the current provider.
            It might return all known "roots" if it is global registration based.
            IVsSccFolderManager will attempt to rebind dynamically on get status.
            </summary>
            <param name="rootFolder">the folder root we need <see cref="T:Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderProvider" /> for. Must be absolute path.</param>
            <param name="cancellationToken">cancelation token.</param>
            <returns>IVsSccFolderProvider that was associated with this location.</returns>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderProviderBinder.SccBindingsChanged">
            <summary>
            Notifies when bindings are changed (aka new repositories created or deleted, or provider is deactivated).
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.SccIntegration.IVsSccFolderProviderBinder.SccStatusChanged">
            <summary>
            Aggregates the item status changed events from active providers and route to subscribers (FolderManager).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SccIntegration.SccBindingChangedEventArgs">
            <summary>
            Describes SCC bindings changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.SccIntegration.SccBindingChangedEventArgs.ChangedBindings">
            <summary>
            Full paths to locations that bindigs changed(optional – can be empty collection or null in which case all bindings should be considered invalid).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SccIntegration.SccItemStatus">
            <summary>
            Scc status info for item (file or folder).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SccIntegration.SccStatusChangedEventArgs">
            <summary>
            Describes SCC status changes for items (files or folders).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.SccIntegration.SccStatusChangedEventArgs.ChangeRoot">
            <summary>
            root folder that enclose all changes. It can be a repo root.
            If scoped down can optimize the user workload.
            If this value is null (or empty) ChangedItems is ignored, and it means every item (potentially across multiple repos
            may changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.SccIntegration.SccStatusChangedEventArgs.ChangedItems">
            <summary>
            Changed files (optional – can be null  in which case everything under ChangeRoot should be considered changed).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IVsSccChangesDisplayInformation">
            <summary>
            Information about pending changes in the current repository of the active Scc provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IVsSccChangesDisplayInformation.PendingChangeCount">
            <summary>
            The total number of pending changes in the current repository.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IVsSccChangesDisplayInformation.PendingChangeLabel">
            <summary>
            The label that temporarily indicates busy status when the number of pending changes is being calculated.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IVsSccChangesDisplayInformation.PendingChangeDetail">
            <summary>
            The detailed information for pending changes in a repository. This could, for example, be displayed as a
            tooltip on control.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IVsSccCommitPendingChangesPrompt">
            <summary>
            An interface that is implemented by a Source Control Provider to set a message displayed to users
            to prompt them to commit their pending changes early and often.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IVsSccCommitPendingChangesPrompt.CommitPendingChangesPromptMessage">
            <summary>
            Prompt message.
            </summary>
            <remarks>
            Implementors of this interface should ensure that this property is localized.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IVsSccCurrentBranchDisplayInformation">
            <summary>
            Information about the current branch of the active Scc provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IVsSccCurrentBranchDisplayInformation.BranchName">
            <summary>
            The branch name that will be displayed in a UI.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IVsSccCurrentBranchDisplayInformation.BranchIcon">
            <summary>
            The icon to be displayed along with the branch name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IVsSccCurrentBranchDisplayInformation.BranchDetail">
            <summary>
            The detailed information for a branch. This could, for example, be displayed as a
            tooltip on control.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IVsSccCurrentRepositoryDisplayInformation">
            <summary>
            Information about the current repository of the active Scc provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IVsSccCurrentRepositoryDisplayInformation.RepositoryName">
            <summary>
            The repository name that will be displayed in a UI.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IVsSccCurrentRepositoryDisplayInformation.RepositoryIcon">
            <summary>
            The icon to be displayed along with the repository name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IVsSccCurrentRepositoryDisplayInformation.RepositoryDetail">
            <summary>
            The detailed information for a repository. This could, for example, be displayed as a
            tooltip on control.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IVsSccPublish">
            <summary>
            Interface that supports publishing of source code that is in a local repository.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IVsSccPublish.BeginPublishWorkflowAsync(System.Threading.CancellationToken)">
            <summary>
            Initiates a workflow to enable publishing of a local repository to a remote server.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>
            A task that completes when the event has been handled. If the task is faulted, the exception will be recorded in the VS activity log.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IVsSccSolution">
            <summary>
            Interface that raises events related to a loaded solution and Scc.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.IVsSccSolution.AddedToSourceControl">
            <summary>
            Event that is fired when a solution is added to Source Control.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IVsSccUnpublishedCommitsDisplayInformation">
            <summary>
            Information about Unpublished Commits.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IVsSccUnpublishedCommitsDisplayInformation.UnpublishedCommitCount">
            <summary>
            The number of unpublished commits in the current repository.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IVsSccUnpublishedCommitsDisplayInformation.UnpublishedCommitLabel">
            <summary>
            The label that temporarily indicates busy status when the number of pending changes is being calculated.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IVsSccUnpublishedCommitsDisplayInformation.UnpublishedCommitDetail">
            <summary>
            The detailed information for unpublished commits. This could, for example, be displayed as a
            tooltip on control.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SVsSccDisplayInformationService">
            <summary>
            The service ID by which several SCC interfaces can be obtained including:
            <see cref="T:Microsoft.VisualStudio.Shell.IVsSccCurrentBranchDisplayInformation" />,
            <see cref="T:Microsoft.VisualStudio.Shell.IVsSccCurrentRepositoryDisplayInformation" />,
            <see cref="T:Microsoft.VisualStudio.Shell.IVsSccChangesDisplayInformation" /> and
            <see cref="T:Microsoft.VisualStudio.Shell.IVsSccUnpublishedCommitsDisplayInformation" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceProgressData">
            <summary>
            This class used to propagate service or package load progress for async service and packages
            Messages and values passed through this class will be shown to the user in some appropriate manner by the shell.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceProgressData.#ctor(System.String,System.String)">
            <summary>
            Reports progress with no completion information.
            </summary>
            <param name="waitMessage">Message to be displayed to user.</param>
            <param name="progressText">Message indicating current progress of the operation.</param>
            <remarks>Threaded wait dialog will show marquee style progress bar because no detailed progress information is provided.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceProgressData.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Report progress with completion information.
            </summary>
            <param name="waitMessage">Message to be displayed to user.</param>
            <param name="progressText">Message indicating current progress of the operation.</param>
            <param name="currentStep">Current step in the progress.</param>
            <param name="totalSteps">Total number of steps available.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceProvider">
            <devdoc>
                This class acts as a bridge between Microsoft.VisualStudio.OLE.Interop.IServiceProvider
                and System.IServiceProvider.  It implements System.IServiceProvider and takes
                as a constructor argument an instance of Microsoft.VisualStudio.OLE.Interop.IServiceProvider.
                It supports both GUID and type based lookups and also has debug code to assert
                for common native implementation pitfalls, like not implementing IUnknown on
                an object or requiring a specific IID along with a matching SID.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.#ctor(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
            <devdoc>
                Creates a new ServiceProvider object and uses the given interface to resolve
                services.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.#ctor(Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.Boolean)">
            <devdoc>
                Creates a new ServiceProvider object and uses the given interface to resolve
                services.  If defaultServices is true (the default) this service  provider will
                respond to Microsoft.VisualStudio.OLE.Interop.IServiceProvider and IObjectWithSite
                as services.  A query for Microsoft.VisualStudio.OLE.Interop.IServiceProvider will
                return the underlying COM service provider and a query for IObjectWithSite will
                return this object.  If false is passed into defaultServices these two services
                will not be provided and the service provider will be "transparent".
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.#ctor">
            <devdoc>
                Private, default constructor used to create a dummy ServiceProvider with
                no underlying services.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.GetService(System.Type)">
            <devdoc>
                Retrieves the requested service.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.GetService(System.Type,System.Boolean)">
            <summary>
            Retrieves the requested service.
            </summary>
            <param name="serviceType">The ID of the service to acquire.</param>
            <param name="setShellErrorInfo"><c>true</c> to save any exception information such that it isn't lost when converted to an HRESULT. Must be <c>false</c> when called off the main thread.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.QueryService(System.Type,System.Object@)">
            <summary>
            Gets type-based services from the unmanaged service provider.
            </summary>
            <param name="serviceType">The type of service to retrieve. The GUID of this type is used to obtain the service from the native service provider.</param>
            <param name="service">The requested service, or a null reference (Nothing in Visual Basic) if the service could not be located.</param>
            <returns>The HRESULT of the QueryService invocation on the native service provider.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.QueryService(System.Type,System.Boolean,System.Object@)">
            <devdoc>
            Gets type-based services from the unmanaged service provider, with an option to prevent the error being sent to the shell.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.GetService(System.Guid)">
            <devdoc>
                Retrieves the requested service.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.QueryService(System.Guid,System.Object@)">
            <summary>
            Gets the specified service from the unmanaged service provider.
            </summary>
            <param name="guid">The GUID of the service to retrieve.</param>
            <param name="service">The requested service, or a null reference (Nothing in Visual Basic) if the service could not be located.</param>
            <returns>The HRESULT of the QueryService invocation on the native service provider.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.QueryService(System.Guid,System.Type,System.Object@)">
            <summary>
            Gets type-based services from the unmanaged service provider.
            </summary>
            <param name="guid">The GUID of the service to retrieve.</param>
            <param name="serviceType">The type of service to retrieve. The GUID of this type is used to obtain the service from the native service provider.</param>
            <param name="service">The requested service, or a null reference (Nothing in Visual Basic) if the service could not be located.</param>
            <returns>The HRESULT of the QueryService invocation on the native service provider.</returns>
            <devdoc>
                Retrieves the requested service.  The guid must be specified; the class is only
                used when debugging and it may be null.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.QueryService(System.Guid,System.Type,System.Boolean,System.Object@)">
            <summary>
            Gets type-based services from the unmanaged service provider, with an option to prevent the error being sent to the shell.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.Microsoft#VisualStudio#OLE#Interop#IObjectWithSite#GetSite(System.Guid@,System.IntPtr@)">
            <internalonly />
            <devdoc>
            Retrieves the current site object we're using to
            resolve services.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.Microsoft#VisualStudio#OLE#Interop#IObjectWithSite#SetSite(System.Object)">
            <internalonly />
            <devdoc>
            Sets the site object we will be using to resolve services.
            </devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceProvider.globalProvider">
            <devdoc>
                The global service provider.
                Note that this is not a ThreadStatic field. Once a non-empty
                global service provider has been created, it will act as the
                proxy for all other threads.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.IsNullOrUnsited(Microsoft.VisualStudio.Shell.ServiceProvider)">
            <devdoc>
                Determines if the given ServiceProvider is uninitialized.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceProvider.GlobalProvider">
            <devdoc>
            Get the global service provider for the calling thread. The global
            service provider is set by calling ServiceProvider.CreateFromSetSite.
            If ServiceProvider.CreateFromSetSite has not been called, an attempt
            is made to retrieve the a service provider from the OLE message filter.
            If no suitable service provider can be found on the calling thread, then
            a new, empty ServiceProvider is returned.
            </devdoc>
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.GetGlobalServiceAsync(System.Type)">
            <summary>
            Retrieves a proffered service asynchronously.
            </summary>
            <param name="serviceType">The service identity of the proffered service to retrieve.</param>
            <returns>
            A task whose result is one of the following:
            <list type="bullet">
                <item>
                    <description>The service if the request was successful.</description>
                </item>
                <item>
                    <description><see langword="null" /> if the service threw an exception during activation.</description>
                </item>
                <item>
                    <description><see langword="null" /> if the associated package failed to load.</description>
                </item>
                <item>
                    <description><see langword="null" /> if the associated package proffered <see langword="null" />.</description>
                </item>
                <item>
                    <description><see langword="null" /> if the associated package could not be found, or the package did not correctly proffer the service.</description>
                </item>
                <item>
                    <description><see langword="null" /> if the environment has starting shutting down and the retrieval would have resulted in a package load.</description>
                </item>
                <item>
                    <description>Otherwise; <see langword="null" /> if there was any other failure retrieving the service.<see langword="true" />.</description>
                </item>
            </list>
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="serviceType" /> is <see langword="null" />.</exception>
            <remarks>
            <para>
            Performing an explicit cast of the resulting service to a specific interface could perform a blocking RPC call if the underlying service is STA-bound,
            which can hang if the UI thread is blocked in a <see cref="M:Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run(System.Func{System.Threading.Tasks.Task})" /> or <see cref="M:Microsoft.VisualStudio.Threading.JoinableTask.Join(System.Threading.CancellationToken)" />. Instead, prefer the
            generic equivalent <see cref="M:Microsoft.VisualStudio.Shell.ServiceProvider.GetGlobalServiceAsync``2" />, noting the difference in behavior around exceptions.
            </para>
            <para>This method is safe to access from any thread.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.GetGlobalServiceAsync(System.Type,System.Boolean)">
            <summary>
            Retrieves a proffered service asynchronously, specifying a hint whether to throw an exception if it could not be retrieved. It does not, however, guarantee exceptions will be thrown for all failure cases.
            </summary>
            <param name="serviceType">The service identity of the proffered service to retrieve.</param>
            <param name="swallowExceptions"><see langword="true" /> to return <see langword="null" /> on failure; otherwise, <see langword="false" /> to throw an exception if the service could not be retrieved. NOTE, specifying <see langword="false" /> does not does not guarantee exceptions will be thrown for all failures.</param>
            <returns>
            A task whose result is one of the following:
            <list type="bullet">
                <item>
                    <description>The service if the request was successful.</description>
                </item>
                <item>
                    <description><see langword="null" /> if the associated package proffered <see langword="null" />.</description>
                </item>
                <item>
                    <description><see langword="null" /> if the associated package could not be found, or the package did not correctly proffer the service.</description>
                </item>
                <item>
                    <description><see langword="null" /> if the environment has starting shutting down and the retrieval would have resulted in a package load.</description>
                </item>
                <item>
                    <description>Otherwise; <see langword="null" /> if there was any other failure retrieving the service and <paramref name="swallowExceptions" /> is <see langword="true" />.</description>
                </item>
            </list>
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="serviceType" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Exception">
            <paramref name="swallowExceptions" /> is <see langword="false" /> and there was failure retrieving the service due to one of the following conditions:
            <list type="bullet">
                <item>
                    <description>The service threw an exception during activation. <see cref="P:System.Exception.InnerException" /> may include details about the underlying failure.</description>
                </item>
                <item>
                    <description>The associated package failed to load. <see cref="P:System.Exception.InnerException" /> may include details about the underlying failure.</description>
                </item>
            </list>
            </exception>
            <remarks>
            <para>Performing an explicit cast of the resulting service to a specific interface could perform a blocking RPC call if the underlying service is STA-bound,
            which can hang if the UI thread is blocked in a <see cref="M:Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run(System.Func{System.Threading.Tasks.Task})" /> or <see cref="M:Microsoft.VisualStudio.Threading.JoinableTask.Join(System.Threading.CancellationToken)" />. Instead, prefer the
            generic equivalent <see cref="M:Microsoft.VisualStudio.Shell.ServiceProvider.GetGlobalServiceAsync``2(System.Boolean)" />, noting the difference in behavior around exceptions.</para>
            <para>This method is safe to access from any thread.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.GetGlobalServiceAsync``2">
            <summary>
            Retrieves a proffered service asynchronously, throwing an exception if it could not be retrieved.
            </summary>
            <typeparam name="TService">The service identity of the proffered service to retrieve.</typeparam>
            <typeparam name="TInterface">The interface used to interact with the proffered service. If <typeparamref name="TService" /> is not registered as async or free-threaded, then this cast will be performed on the main thread.</typeparam>
            <returns>A task representing the service retrieval whose result is the service.</returns>
            <exception cref="T:Microsoft.VisualStudio.Shell.ServiceUnavailableException">
            There was a failure retrieving the service due to one of the following conditions:
            <list type="bullet">
                <item>
                    <description>The service threw an exception during activation. <see cref="P:System.Exception.InnerException" /> may include details about the underlying failure.</description>
                </item>
                <item>
                    <description>The associated package failed to load. <see cref="P:System.Exception.InnerException" /> may include details about the underlying failure.</description>
                </item>
                <item>
                    <description>The associated package could not be found, or the package did not correctly proffer the service.</description>
                </item>
                <item>
                    <description>The associated package proffered <see langword="null" />.</description>
                </item>
                <item>
                    <description>The service does not support the requested interface specified by <typeparamref name="TInterface" />.</description>
                </item>
                <item>
                    <description>The environment has starting shutting down and the retrieval would have resulted in a package load.</description>
                </item>
            </list>
            </exception>
            <remarks>
            <para>Prefer this method over an explicit cast to <typeparamref name="TInterface" /> to avoid a blocking RPC call if the underlying service is STA-bound,
            which can hang if the UI thread is blocked in a <see cref="M:Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run(System.Func{System.Threading.Tasks.Task})" /> or <see cref="M:Microsoft.VisualStudio.Threading.JoinableTask.Join(System.Threading.CancellationToken)" />.</para>
            <para>Note the difference in behavior this method has around exceptions to its non-generic equivalents <see cref="M:Microsoft.VisualStudio.Shell.ServiceProvider.GetGlobalServiceAsync(System.Type)" /> and
            <see cref="M:Microsoft.VisualStudio.Shell.ServiceProvider.GetGlobalServiceAsync(System.Type,System.Boolean)" />.</para>
            <para>This method is safe to access from any thread.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.GetGlobalServiceAsync``2(System.Boolean)">
            <summary>
            Retrieves a proffered service asynchronously, specifying whether to throw an exception if it could not be retrieved.
            </summary>
            <typeparam name="TService">The service identity of the proffered service to retrieve.</typeparam>
            <typeparam name="TInterface">The interface used to interact with the proffered service. If <typeparamref name="TService" /> is not registered as async or free-threaded, then this cast will be performed on the main thread.</typeparam>
            <param name="throwOnFailure"><see langword="true" /> to throw an exception if the service could not be retrieved; otherwise, <see langword="false" /> to return <see langword="null" /> on failure.</param>
            <returns>A task representing the service retrieval whose result is the service or <see langword="null" /> if there was a failure and <paramref name="throwOnFailure" /> is <see langword="true" />.</returns>
            <exception cref="T:Microsoft.VisualStudio.Shell.ServiceUnavailableException">
            <paramref name="throwOnFailure" /> is <see langword="true" /> and there was a failure retrieving the service due to one of the following conditions:
            <list type="bullet">
                <item>
                    <description>The service threw an exception during activation. <see cref="P:System.Exception.InnerException" /> may include details about the underlying failure.</description>
                </item>
                <item>
                    <description>The associated package failed to load. <see cref="P:System.Exception.InnerException" /> may include details about the underlying failure.</description>
                </item>
                <item>
                    <description>The associated package could not be found, or the package did not correctly proffer the service.</description>
                </item>
                <item>
                    <description>The associated package proffered <see langword="null" />.</description>
                </item>
                <item>
                    <description>The service does not support the requested interface specified by <typeparamref name="TInterface" />.</description>
                </item>
                <item>
                    <description>The environment has starting shutting down and the retrieval would have resulted in a package load.</description>
                </item>
            </list>
            </exception>
            <remarks>
            <para>Prefer this method over an explicit cast to <typeparamref name="TInterface" /> to avoid a blocking RPC call if the underlying service is STA-bound,
            which can hang if the UI thread is blocked in a <see cref="M:Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run(System.Func{System.Threading.Tasks.Task})" /> or <see cref="M:Microsoft.VisualStudio.Threading.JoinableTask.Join(System.Threading.CancellationToken)" />.</para>
            <para>Note the difference in behavior this method has around exceptions to its non-generic equivalents <see cref="M:Microsoft.VisualStudio.Shell.ServiceProvider.GetGlobalServiceAsync(System.Type)" /> and
            <see cref="M:Microsoft.VisualStudio.Shell.ServiceProvider.GetGlobalServiceAsync(System.Type,System.Boolean)" />.</para>
            <para>This method is safe to access from any thread.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.GetGlobalServiceAsync``2(System.Threading.CancellationToken)">
            <summary>
            Retrieves a proffered service asynchronously, throwing an exception if it could not be retrieved.
            </summary>
            <typeparam name="TService">The service identity of the proffered service to retrieve.</typeparam>
            <typeparam name="TInterface">The interface used to interact with the proffered service. If <typeparamref name="TService" /> is not registered as async or free-threaded, then this cast will be performed on the main thread.</typeparam>
            <param name="cancellationToken">A token whose cancellation indicates that the caller no longer is interested in the result. This will not cancel the in-progress loading of packages and/or creation of services as a result of the service retrieval, but this token will result in an expediant cancellation of the returned Task.</param>
            <returns>A task representing the service retrieval whose result is the service.</returns>
            <exception cref="T:System.OperationCanceledException">
            <paramref name="cancellationToken" /> has been canceled.
            </exception>
            <exception cref="T:Microsoft.VisualStudio.Shell.ServiceUnavailableException">
            There was a failure retrieving the service due to one of the following conditions:
            <list type="bullet">
                <item>
                    <description>The service threw an exception during activation. <see cref="P:System.Exception.InnerException" /> may include details about the underlying failure.</description>
                </item>
                <item>
                    <description>The associated package failed to load. <see cref="P:System.Exception.InnerException" /> may include details about the underlying failure.</description>
                </item>
                <item>
                    <description>The associated package could not be found, or the package did not correctly proffer the service.</description>
                </item>
                <item>
                    <description>The associated package proffered <see langword="null" />.</description>
                </item>
                <item>
                    <description>The service does not support the requested interface specified by <typeparamref name="TInterface" />.</description>
                </item>
                <item>
                    <description>The environment has starting shutting down and the retrieval would have resulted in a package load.</description>
                </item>
            </list>
            </exception>
            <remarks>
            <para>Prefer this method over an explicit cast to <typeparamref name="TInterface" /> to avoid a blocking RPC call if the underlying service is STA-bound,
            which can hang if the UI thread is blocked in a <see cref="M:Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run(System.Func{System.Threading.Tasks.Task})" /> or <see cref="M:Microsoft.VisualStudio.Threading.JoinableTask.Join(System.Threading.CancellationToken)" />.</para>
            <para>Note the difference in behavior this method has around exceptions to its non-generic equivalents <see cref="M:Microsoft.VisualStudio.Shell.ServiceProvider.GetGlobalServiceAsync(System.Type)" /> and
            <see cref="M:Microsoft.VisualStudio.Shell.ServiceProvider.GetGlobalServiceAsync(System.Type,System.Boolean)" />.</para>
            <para>This method is safe to access from any thread.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.GetGlobalServiceAsync``2(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Retrieves a proffered service asynchronously, specifying whether to throw an exception if it could not be retrieved.
            </summary>
            <typeparam name="TService">The service identity of the proffered service to retrieve.</typeparam>
            <typeparam name="TInterface">The interface used to interact with the proffered service. If <typeparamref name="TService" /> is not registered as async or free-threaded, then this cast will be performed on the main thread.</typeparam>
            <param name="throwOnFailure"><see langword="true" /> to throw an exception if the service could not be retrieved; otherwise, <see langword="false" /> to return <see langword="null" /> on failure.</param>
            <param name="cancellationToken">A token whose cancellation indicates that the caller no longer is interested in the result. This will not cancel the in-progress loading of packages and/or creation of services as a result of the service retrieval, but this token will result in an expediant cancellation of the returned Task.</param>
            <returns>A task representing the service retrieval whose result is the service or <see langword="null" /> if there was a failure and <paramref name="throwOnFailure" /> is <see langword="false" />.</returns>
            <exception cref="T:System.OperationCanceledException">
            <paramref name="cancellationToken" /> has been canceled.
            </exception>
            <exception cref="T:Microsoft.VisualStudio.Shell.ServiceUnavailableException">
            <paramref name="throwOnFailure" /> is <see langword="true" /> and there was a failure retrieving the service due to one of the following conditions:
            <list type="bullet">
                <item>
                    <description>The service threw an exception during activation. <see cref="P:System.Exception.InnerException" /> may include details about the underlying failure.</description>
                </item>
                <item>
                    <description>The associated package failed to load. <see cref="P:System.Exception.InnerException" /> may include details about the underlying failure.</description>
                </item>
                <item>
                    <description>The associated package could not be found, or the package did not correctly proffer the service.</description>
                </item>
                <item>
                    <description>The associated package proffered <see langword="null" />.</description>
                </item>
                <item>
                    <description>The service does not support the requested interface specified by <typeparamref name="TInterface" />.</description>
                </item>
                <item>
                    <description>The environment has starting shutting down and the retrieval would have resulted in a package load.</description>
                </item>
            </list>
            </exception>
            <remarks>
            <para>Prefer this method over an explicit cast to <typeparamref name="TInterface" /> to avoid a blocking RPC call if the underlying service is STA-bound,
            which can hang if the UI thread is blocked in a <see cref="M:Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run(System.Func{System.Threading.Tasks.Task})" /> or <see cref="M:Microsoft.VisualStudio.Threading.JoinableTask.Join(System.Threading.CancellationToken)" />.</para>
            <para>Note the difference in behavior this method has around exceptions to its non-generic equivalents <see cref="M:Microsoft.VisualStudio.Shell.ServiceProvider.GetGlobalServiceAsync(System.Type)" /> and
            <see cref="M:Microsoft.VisualStudio.Shell.ServiceProvider.GetGlobalServiceAsync(System.Type,System.Boolean)" />.</para>
            <para>This method is safe to access from any thread.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.CreateFromSetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
            <devdoc>
            Create a new ServiceProvider for the given site.
            Should be called from an object that implements SetSite
            (IObjectWithSite or IVsPackage). Automatically sets the global
            service provider if it hasn't already been set.
            This method is typically called from the SetSite method of a
            Visual Studio package.
            Note: By calling this method, the caller declares that it knows
            the global OLE service provider for the calling thread and that
            the ServiceProvider instance returned may be used by other,
            unrelated components, accessed via the ServiceProvider.GlobalProvider
            static property.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Services.IProjectItemDesignerTypeUpdateService">
            <summary>
            An optional project level service for the language service to update the designer type of project items.
            It is implemented by (but not limited to) the .Net Core project system to allow a background process detecting WinForm and other designer related files in the project,
            and saves the state to the project system.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Services.IProjectItemDesignerTypeUpdateService.SetProjectItemDesignerTypeAsync(System.String,System.String)">
            <summary>
            Sets the designer type of a single project item.
            </summary>
            <param name="projectItemPath">The relative path (or full path) of a file inside the project.</param>
            <param name="designerType">The designer type should be set to the project item.</param>
            <returns>A task which finishes when the operation is done.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Services.IProjectItemDesignerTypeUpdateService.SetProjectItemsDesignerTypeAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Sets the designer type of a set of project items.
            </summary>
            <param name="itemPathAndDesignerTypes">
            A collection of value pairs, where the key represents the file item path (either project related path, or a full path), and the value represents a designer type.
            </param>
            <returns>A task which finishes when the operation is done.</returns>
            <remarks>Project items which are no longer in the project will be skipped.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Services.BulletinHandler">
            <summary>
            This is the delegate, provided by subscribers, that is called when a bulletin is published.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Services.IVsPublishSubscribeService">
            <summary>
            Represents a service for publishing and subscribing to bulletins.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Services.IVsPublishSubscribeService.Publish(System.Object)">
            <summary>
            Sends a bulletin to all the subscribers for that bulletin.
            </summary>
            <param name="bulletin">The bulletin to be published.</param>
            <exception cref="T:System.NullReferenceException">Thrown when <paramref name="bulletin" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Services.IVsPublishSubscribeService.Publish(System.Type,System.Object)">
            <summary>
            Sends a bulletin to all the subscribers for that bulletin identified by a specific Type.
            </summary>
            <param name="bulletinType">The Type that identifies the bulletin.</param>
            <param name="bulletin">The bulletin to be published.</param>
            <exception cref="T:System.NullReferenceException">Thrown when <paramref name="bulletinType" /> or <paramref name="bulletin" /> are null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Services.IVsPublishSubscribeService.Subscribe(System.Type,Microsoft.VisualStudio.Shell.Services.BulletinHandler)">
            <summary>
            Registers a handler for the specified bulletin.
            </summary>
            <param name="bulletinType">The type of the bulletin being subscribed to.</param>
            <param name="handler">The handler to be invoked when this bulletin is published.</param>
            <exception cref="T:System.NullReferenceException">Thrown when <paramref name="bulletinType" /> or <paramref name="handler" /> are null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Services.IVsPublishSubscribeService.Unsubscribe(System.Type,Microsoft.VisualStudio.Shell.Services.BulletinHandler)">
            <summary>
            Unregisters a handler for the specified bulletin.
            </summary>
            <param name="bulletinType">The type of the bulletin being unsubscribed from.</param>
            <param name="handler">The handler that is associated with the bulletin type.</param>
            <exception cref="T:System.NullReferenceException">Thrown when <paramref name="bulletinType" /> or <paramref name="handler" /> are null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Services.SVsPublishSubscribeService">
            <summary>
            Represents a service for publishing and subscribing to bulletins.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SVsProjectLocalSecrets">
            <summary>
            The service ID to query an <see cref="T:System.IServiceProvider" /> for to obtain
            an implementation of <see cref="T:Microsoft.VisualStudio.Shell.IVsProjectSecrets" />
            that stores secrets in a project's secrets.json file,
            or equivalent file that is never stored in source control and is local
            to the individual user or machine.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SVsServiceProvider">
            <summary>
            Represents a Visual Studio service provider and intended for dynamic discovery of other VS services from MEF components.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CircularTaskDependencyException">
            <summary>
            Exception raised when a circular dependency would cause a deadlock during a requested task wait operation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.CircularTaskDependencyException.VS_E_CIRCULARTASKDEPENDENCY">
            <summary>
            VS specific error HRESULT code returned when an attempt to do a task wait operation would result in a
            deadlock due to circular dependency.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IVsTaskEvents">
            <summary>
            Interface for managed events implemented by IVsTask.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.IVsTaskEvents.OnBlockingWaitBegin">
            <summary>
            Raised when a blocking wait call made to IVsTask instance on main thread of Visual Studio
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.IVsTaskEvents.OnBlockingWaitEnd">
            <summary>
            Raised when a blocking wait call to IVsTask is finished on main thread of Visual Studio
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.IVsTaskEvents.OnMarkedAsBlocking">
            <summary>
            Raised when this task is marked as a blocking task for a wait on main thread of Visual Studio
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.BlockingTaskEventArgs">
            <summary>
            Event argument to be used with event that passes in blocking task information.
            The parameters identify the task that is being waited on UI thread (blocked task) and
            task that is blocking the wait (blocking task).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.BlockingTaskEventArgs.BlockedTask">
            <summary>
            Gets the task that is being waited on UI thread and that needs to be unblocked.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.BlockingTaskEventArgs.BlockingTask">
            <summary>
            Gets the task that is blocking a task being waited on UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BlockingTaskEventArgs.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsTask,Microsoft.VisualStudio.Shell.Interop.IVsTask)">
            <summary>
            Creates a new BlockingTaskEventArgs instance.
            </summary>
            <param name="blockingTask">task that is blocking a task being waited on UI thread.</param>
            <param name="blockedTask">task that is being waited on UI thread and that needs to be unblocked.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TaskSchedulingException">
            <summary>
            Exception raised when a task scheduling failed and could not be retried.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TaskSchedulingException.VS_E_TASKSCHEDULERFAIL">
            <summary>
            VS specific error HRESULT code returned when a task couldn't be scheduled at the requested time.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TelemetryExtensions.PostCorrelatedFaultEvent(Microsoft.VisualStudio.Telemetry.TelemetrySession,Microsoft.VisualStudio.Telemetry.TelemetryScope{Microsoft.VisualStudio.Telemetry.OperationEvent},System.String,System.String,System.Exception,System.Func{Microsoft.VisualStudio.Telemetry.IFaultUtility,System.Int32})">
            <summary>
            Posts a <see cref="T:Microsoft.VisualStudio.Telemetry.FaultEvent" /> that is correlated with <paramref name="operation" />
            to <paramref name="session" />.
            </summary>
            <param name="session">The telemetry session.</param>
            <param name="operation">The telemetry operation.</param>
            <param name="faultEventName">
            The name of the fault event.  If this is <c>null</c>, the name of the fault event is the
            name of <paramref name="operation" />'s <see cref="P:Microsoft.VisualStudio.Telemetry.TelemetryScope`1.EndEvent" /> with a
            "-fault" suffix appended to it.
            </param>
            <param name="faultDescription">The description of the fault.</param>
            <param name="exceptionObject">The exception to include with the fault event.</param>
            <param name="gatherEventDetails">
            This delegate is called to gather expensive details (like jscript call stacks)
            only when not sampled. The callback parameter can be cast to to a FaultEvent
            or (IVsFaultEvent in native) which inherits from TelemetryEvent (IVsTelemetryEvent
            in native) Microsoft.VisualStudio.Telemetry.IFaultUtility.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TelemetryExtensions.PostCorrelatedFaultEvent(Microsoft.VisualStudio.Telemetry.TelemetrySession,Microsoft.VisualStudio.Telemetry.TelemetryScope{Microsoft.VisualStudio.Telemetry.OperationEvent},System.String,System.String,Microsoft.VisualStudio.Telemetry.FaultSeverity,System.Exception,System.Func{Microsoft.VisualStudio.Telemetry.IFaultUtility,System.Int32})">
            <summary>
            Posts a <see cref="T:Microsoft.VisualStudio.Telemetry.FaultEvent" /> that is correlated with <paramref name="operation" />
            to <paramref name="session" />.
            </summary>
            <param name="session">The telemetry session.</param>
            <param name="operation">The telemetry operation.</param>
            <param name="faultEventName">
            The name of the fault event.  If this is <c>null</c>, the name of the fault event is the
            name of <paramref name="operation" />'s <see cref="P:Microsoft.VisualStudio.Telemetry.TelemetryScope`1.EndEvent" /> with a
            "-fault" suffix appended to it.
            </param>
            <param name="faultDescription">The description of the fault.</param>
            <param name="faultSeverity">
            The severity of the fault, used to identify actionable or important faults in
            divisional tools and reporting.
            </param>
            <param name="exceptionObject">The exception to include with the fault event.</param>
            <param name="gatherEventDetails">
            This delegate is called to gather expensive details (like jscript call stacks)
            only when not sampled. The callback parameter can be cast to to a FaultEvent
            or (IVsFaultEvent in native) which inherits from TelemetryEvent (IVsTelemetryEvent
            in native) Microsoft.VisualStudio.Telemetry.IFaultUtility.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ThemeResourceKey">
            <summary>
            Represents a key used in a ResourceDictionary for accessing
            theme color resources.  Theme color resources include brushes
            and colors associated with a given color category and color name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ThemeResourceKey.Category">
            <summary>
            Gets the category associated with this key.  A combination
            of the name, category, and key type uniquely identify
            the resource being referenced by this key.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ThemeResourceKey.Name">
            <summary>
            Gets the name associated with this key.  A combination
            of the name, category, and key type uniquely identify
            the resource being referenced by this key.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ThemeResourceKey.KeyType">
            <summary>
            Gets the type of resource specified by this key.  A combination
            of the name, category, and key type uniquely identify
            the resource being referenced by this key.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ThemeResourceKeyType">
            <summary>
            Specifies the type of resource being referenced by a <see cref="T:Microsoft.VisualStudio.Shell.ThemeResourceKey" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ThreadedWaitDialogHelper">
            <summary>
            Extension methods for the threaded wait dialog that makes it more consumable
            using common managed code patterns.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ThreadedWaitDialogHelper.CreateInstance(Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialogFactory)">
            <summary>
            Creates an instance of the threaded wait dialog.
            </summary>
            <param name="factory">The threaded wait dialog factory.</param>
            <returns>The created dialog.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ThreadedWaitDialogHelper.StartWaitDialog(Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialogFactory,System.String,Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData,System.TimeSpan)">
            <summary>
            Show the threaded wait dialog and wire it up to receive progress updates
            via <see cref="T:System.IProgress`1" />
            and report cancellation via <see cref="T:System.Threading.CancellationToken" />.
            </summary>
            <param name="dialogFactory">The dialog factory to use for showing the wait dialog.</param>
            <param name="waitCaption">The caption for the dialog.</param>
            <param name="initialProgress">The initial progress data for the dialog.</param>
            <param name="delayToShowDialog">The delay before the dialog becomes visible. Resolution is limited to seconds.</param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Shell.ThreadedWaitDialogHelper.Session" /> instance that can be used to report progress to the dialog
            and check for user cancellation of the operation.
            Call <see cref="M:System.IDisposable.Dispose" /> on the returned value to dismiss the dialog.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ThreadedWaitDialogHelper.EndWaitDialog(Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog2)">
            <summary>
            Closes the wait dialog.
            </summary>
            <param name="dialog">The dialog to be closed.</param>
            <returns><c>true</c> if the user has requested cancellation; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ThreadedWaitDialogHelper.Session">
            <summary>
            Offers two-way communication with a visible threaded wait dialog.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ThreadedWaitDialogHelper.Session.dialog">
            <summary>
            The dialog to close when this instance is disposed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ThreadedWaitDialogHelper.Session.disposed">
            <summary>
            Tracks when this instance is disposed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ThreadedWaitDialogHelper.Session.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog2,System.IProgress{Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData},System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.ThreadedWaitDialogHelper.Session" /> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ThreadedWaitDialogHelper.Session.Progress">
            <summary>
            Gets the <see cref="T:System.IProgress`1" /> instance to use for updating
            the progress of the operation that is reported to the user.
            </summary>
            <remarks>
            If <see cref="M:System.IProgress`1.Report(`0)" /> is invoked on the UI thread, this method will report progress and update the dialog immediately.
            If <see cref="M:System.IProgress`1.Report(`0)" /> is invoked from another thread, the dialog will be updated asynchronously when
            <see cref="M:Microsoft.VisualStudio.Threading.JoinableTaskFactory.SwitchToMainThreadAsync(System.Threading.CancellationToken)" /> can reach the UI thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ThreadedWaitDialogHelper.Session.UserCancellationToken">
            <summary>
            Gets a token that is canceled when the user clicks the Cancel button
            in the threaded wait dialog.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ThreadedWaitDialogHelper.Session.Dispose">
            <summary>
            Closes the threaded wait dialog.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ThreadedWaitDialogHelper.Session.DisposeAsync">
            <summary>
            Closes the threaded wait dialog.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ThreadedWaitDialogHelper.ProgressAdapter.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog2,System.Threading.CancellationTokenSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.ThreadedWaitDialogHelper.ProgressAdapter" /> class.
            </summary>
            <param name="dialog">The threaded wait dialog to update when progress is reported.</param>
            <param name="cancellationTokenSource">A <see cref="T:System.Threading.CancellationTokenSource" /> to cancel when the user clicks the Cancel button. May be <c>null</c>.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ThreadedWaitDialogHelper.ProgressAdapter.Report(Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData)">
            <summary>
            Updates the threaded wait dialog with progress of the long operation.
            </summary>
            <param name="value">The update for the threaded wait dialog.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData">
            <summary>
            Contains details on the progress of a long-running operation for purposes of updating the
            IVsThreadedWaitDialog.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData" /> class
            without reporting completion information.
            </summary>
            <param name="waitMessage">High-level description of the operation.</param>
            <param name="progressText">A more precise description of the operation in progress.</param>
            <param name="statusBarText">Message to display on the status bar.</param>
            <param name="isCancelable">A value indicating whether the user should be offered an option to cancel the operation.</param>
            <remarks>Threaded wait dialog will show marquee style progress bar because no detailed progress information is provided.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData.#ctor(System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData" /> class
            and report completion information.
            </summary>
            <param name="waitMessage">High-level description of the operation.</param>
            <param name="progressText">A more precise description of the operation in progress.</param>
            <param name="statusBarText">Message to display on the status bar.</param>
            <param name="isCancelable">A value indicating whether the user should be offered an option to cancel the operation.</param>
            <param name="currentStep">Current step in the progress.</param>
            <param name="totalSteps">Total number of steps available. Use 0 to display the indeterminate marquee in the wait dialog.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData.NextStep">
            <summary>
            Creates a clone of this instance with <see cref="P:Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData.CurrentStep" /> incremented by one.
            </summary>
            <returns>A modified clone of this instance.</returns>
            <remarks>
            No validation is done by this method to ensure that
            <see cref="P:Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData.CurrentStep" /> remains less than or equal to <see cref="P:Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData.TotalSteps" />.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ThreadHelper">
            <summary>
            Provide a generic dispatcher helper ensure that a method is invoked on the Application's
            main thread. We use the current Application's Dispatcher for convenient identification of
            the main thread. Note that this means that the Application's instance must be initialized.
            Currently, the WindowManager initializes it.
            However, we don't use DispatcherOperation because they are not RPC friendly. For example,
            if the UI thread is in the middle of an RPC call, and we need to run code on the UI thread,
            then DispatcherOperations will not get through. This is because DispatcherOperations are
            initiated by posting a message to the UI thread and the UI thread needs to dispatch that
            message. If the UI thread is making an RPC call, these messages will not be removed from
            the queue. The standard OLE message filter processes only a limited set of messages from
            the queue and even the Visual Studio message filter ignores most others.
            By going through the UIThreadInvokerPrivate service, the operation becomes a COM call on
            the UI thread. This operation will be allowed through our message filter IF it is part of
            the same logical call - the message filter will see it as a "nested call" and may not
            reject it.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ThreadHelper._generic">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ThreadHelper._joinableTaskContextCache">
            <summary>
            A cached reference to the <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskContext" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ThreadHelper.JoinableTaskContext">
            <summary>
            Gets the singleton JoinableTaskContext instance for Visual Studio.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ThreadHelper.JoinableTaskFactory">
            <summary>
            Gets the joinable task factory for Visual Studio.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ThreadHelper.SetUIThread">
            <summary>
            Called from the ServiceProvider when the first package is sited. Since packages
            are always sited on the UI thread, by calling this the ServiceProvider informs
            ThreadHelper about the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ThreadHelper.GetInvocationWrapper">
            <summary>
            Derived classes must implement the GetInvocationWrapper method to implement a
            a disposable object that will wrap the called method. This may be null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ThreadHelper.GetInvoker">
            <summary>
            Returns the IVsInvokerPrivate service interface or null if the RPC call to obtain this interface was rejected and the call should be retried later.
            </summary>
            <remarks>
            The service interface is not cached intentionally as COM proxies will be recycled by Windows internally after 6 minutes.
            In addition to that, CLR has a bug currently where they will not invalidate RCW's after its underlying proxy is recycled,
            so an immediate requery of the service after setting it to null will end up returning the same invalid RCW.
            More details can be found in bug 154688, but recommendation from CLR team was to not cache this instance and instead it query it each time
            as a workaround.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ThreadHelper.CheckAccess">
            <summary>
            Determines if the call is being made on the UI thread.
            </summary>
            <returns>true if the call is on the UI thread.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ThreadHelper.ThrowIfOnUIThread(System.String)">
            <summary>
            Determines if the call is being made on the UI thread and throws COMException(RPC_E_WRONG_THREAD) if it is.
            </summary>
            <param name="callerMemberName">Optional name of caller if a Debug Assert is desired if on the UI thread.</param>
            <exception type="COMException">Thrown with RPC_E_WRONG_THREAD when called on the main UI thread.</exception>
            <remarks>
            The exception thrown from this method is not expected to be caught and handled by anyone. It is meant to cause the caller to fail,
            and get their attention that they should not be invoking the throwing code on the UI thread.
            This is analogous to throwing <see cref="T:System.ArgumentException" /> when the caller simply did not understand the contract of the method
            they were calling.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ThreadHelper.ThrowIfNotOnUIThread(System.String)">
            <summary>
            Determines if the call is being made on the UI thread and throws COMException(RPC_E_WRONG_THREAD) if it is NOT.
            </summary>
            <param name="callerMemberName">Optional name of caller if a Debug Assert is desired if NOT on the UI thread.</param>
            <exception type="COMException">Thrown with RPC_E_WRONG_THREAD when called on any thread other than the main UI thread.</exception>
            <remarks>
            The exception thrown from this method is not expected to be caught and handled by anyone. It is meant to cause the caller to fail,
            and get their attention that they should be invoking the throwing code on the UI thread.
            This is analogous to throwing <see cref="T:System.ArgumentException" /> when the caller simply did not understand the contract of the method
            they were calling.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ThreadHelper.WrapException(System.Exception)">
            <summary>
            Wraps the given exception in another exception so we can preserve the
            stack trace of the original exception.
            </summary>
            <param name="inner">Exception to wrap.</param>
            <returns>A new exception whose InnerException is <paramref name="inner" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.GenericThreadHelper.GetInvocationWrapper">
            <summary>
            The generic thread helper does not use a wrapper.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.UIThreadReentrancyScope.PendingRequest">
            <summary>
            represents a request for assisted execution on action on UI thread.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.UIThreadReentrancyScope.PendingRequest.WorkCompleteEvent">
            <summary>
            Task we associate with action execution to wait on on the BG thread.
            Task will return true if work was completed successfully, false if it was not executed due to timeout or
            be in faulted state if an exception occured in the work executed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.UIThreadReentrancyScope.PendingRequest.AllowCleanup">
            <summary>
            If true this request can be cleaned up at the end of a scope and does not need to guarantee execution.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.UIThreadReentrancyScope.PendingRequest.Revoked">
            <summary>
            set when this item is Revoked from the queue (either because it is executed, or because BG thread does not to wait any more for re-entrance assisted execution.
            this must be accessed only inside the _lockObj lock.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.UIThreadReentrancyScope.PendingRequest.InitiateExecute(System.Threading.Tasks.TaskCompletionSource{System.Boolean}@,Microsoft.VisualStudio.Shell.InvokableBase@)">
            <summary>
            run the action (called from MT reentrancy assist points).
            must be called inside _lockObj.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.UIThreadReentrancyScope.PendingRequest.SkipExecution">
            <summary>
            called when we established UI thread will never run this guy.  Must be called inside _lockObj lock.
            </summary>
            <returns>Task representing work to be executed, if task result is false it means work was skipped and not executed.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.UIThreadReentrancyScope.PendingRequest.Waiter">
            <summary>
            Task we associate with action execution to wait on on the BG thread.
            Task will return true if work was completed successfully, false if it was not executed due to timeout or
            be in faulted state if an exception occured in the work executed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.UIThreadReentrancyScope.ClearQueue">
            <summary>
            Clears the pending requests queue and removes all operation that can be cleaned up.
            This is called at the point of scope termination to ensure we can GC actions that were not executed since those will likely to be executed
            at outside of the scope and there is no need to hold on to them until the next scope activation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.UIThreadReentrancyScope.EnqueueActionAsync(System.Action)">
             <summary>
             Enqueues an action to be executed on the explicit reentrancy point. These will only execute when a UIThreadReentrancyScope is
             registered on main thread blocking on a task.
            
             Note that execution is not guaranteed as the scope might clear before the action is executed in which case the action is ignored.
             </summary>
             <remarks>This is internal use only.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.UIThreadReentrancyScope.TryExecuteActionAsync(Microsoft.VisualStudio.Shell.InvokableBase,System.Int32)">
            <summary>
            Enqueues an action to be executed on the explicit reentrancy point and waits for it until the timeout specified.
            </summary>
            <returns>-1 if action is not executed, HR code otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ToolboxItemDiscoveryContext">
            <summary>
            Indicates the context in which <see cref="M:Microsoft.VisualStudio.Shell.IToolboxItemDiscoveryWithContext.GetItemInfo(Microsoft.VisualStudio.Shell.IToolboxType,Microsoft.VisualStudio.Shell.ToolboxItemDiscoveryContext)" /> is being called.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ToolboxItemDiscoveryContext.AutoAddingToToolbox">
            <summary>
            If <see cref="M:Microsoft.VisualStudio.Shell.IToolboxItemDiscoveryWithContext.GetItemInfo(Microsoft.VisualStudio.Shell.IToolboxType,Microsoft.VisualStudio.Shell.ToolboxItemDiscoveryContext)" /> returns non-null, the item will be
            automatically added to the toolbox.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ToolboxItemDiscoveryContext.ListingAddableItems">
            <summary>
            If <see cref="M:Microsoft.VisualStudio.Shell.IToolboxItemDiscoveryWithContext.GetItemInfo(Microsoft.VisualStudio.Shell.IToolboxType,Microsoft.VisualStudio.Shell.ToolboxItemDiscoveryContext)" /> returns non-null, the item will be
            added to a list of types in the Choose Toolbox Items dialog which the user may add to the toolbox.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IInstalledToolboxItemInfo">
            <summary>
            Supplies information about an existing toolbox item.
            </summary>
            <remarks>
            Implemented by packages and supplied via IToolboxItemCreator.GetItemInfo.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IInstalledToolboxItemInfo.TypeName">
            <summary>
            Gets the full hierarchical type name of the item (not including the assembly name).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IInstalledToolboxItemInfo.AssemblyName">
            <summary>
            Gets the assembly name of the item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IInstalledToolboxItemInfo.CustomProperties">
            <summary>
            Gets the strings to display in the dialog's "custom" columns, or null if no custom
            properties are needed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxAppDomainControl">
            <summary>
            This interface is implemented by clients who want to control the creation of the appdomain
            in which their IToolboxItemDiscovery implementation is created.  If your package derives
            from Microsoft.VisualStudio.Shell.Package, set the AppDomainCreatorType property of your
            ProvideToolboxItemDiscoveryAttribute to the type of your class which implements this
            interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IToolboxAppDomainControl.CreateAppDomain">
            <summary>
            Creates an appdomain for assembly loading.  This is the appdomain that will be passed to
            IToolboxItemDiscoveryFactory.CreateItemDiscovery, and in which assemblies will be loaded
            so that their types can be enumerated and passed to IToolboxItemDiscovery.GetItemInfo.
            </summary>
            <returns>The newly created appdomain.</returns>
            <remarks>
            This method may be called on a background thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IToolboxAppDomainControl.UnloadAppDomain(System.AppDomain)">
            <summary>
            Unloads an appdomain created by CreateAppDomain.
            </summary>
            <param name="appDomain">The appdomain to unload.</param>
            <remarks>
            This method may be called on a background thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxAssemblyInfo">
            <summary>
            Supplies information about an assembly.
            </summary>
            <remarks>
            Implemented by the shell and supplied via IToolboxType.AssemblyInfo.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IToolboxAssemblyInfo.OriginalPath">
            <summary>
            The original path from which the assembly was loaded.  This may differ from the Location
            property of the assembly, for example if the assembly is in the GAC.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxExtensionsSdkInfo">
            <summary>
            Supplies information about an extensions SDK.
            </summary>
            <remarks>
            Implemented by the shell and supplied via IToolboxExtensionsSdkType.SdkInfo.  See the SDK
            schema documentation for details about these properties.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IToolboxExtensionsSdkInfo.Path">
            <summary>
            The path of the SDK on disk.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IToolboxExtensionsSdkInfo.TargetPlatform">
            <summary>
            The target platform of the SDK, e.g. "Windows, Version=8.0".
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxExtensionsSdkType">
            <summary>
            Represents a managed type from an extensions SDK.
            </summary>
            <remarks>
            Implemented by the shell and supplied to IToolboxItemDiscovery.GetItemInfo.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxExtensionsSdkTypeByName">
            <summary>
            Represents a simple type from an extensions SDK.
            </summary>
            <remarks>
            Implemented by the shell and supplied to IToolboxItemDiscovery.GetItemInfo.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxItemCreator">
            <summary>
            Creates new toolbox items and supplies information about existing toolbox items.
            </summary>
            <remarks>
            Implemented by packages and supplied from IToolboxItemDiscoveryFactory.ItemCreator.
            Packages deriving from Microsoft.VisualStudio.Shell.Package supply this object via the
            itemCreatorType argument to ProvideToolboxItemDiscoveryAttribute.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IToolboxItemCreator.GetItemInfo(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
            <summary>
            Returns information about a control installed on the toolbox.
            </summary>
            <returns>The info about this item, or null if the item is not recognized by this provider.</returns>
            <remarks>
            This method may be called on a background thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IToolboxItemCreator.CreateToolboxItem(System.String,System.Reflection.AssemblyName,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Creates a toolbox item from the specified type.
            </summary>
            <param name="typeName">A full hierarchical type name.</param>
            <param name="assemblyName">The assembly in which <paramref name="typeName" /> was found.</param>
            <param name="itemProperties">The properties obtained from IToolboxItemInfo.GetPropertyValue for this item.</param>
            <param name="extraInfo">The collection returned from IToolboxItemInfo.ExtraInfo for this item.</param>
            <remarks>
            This method may be called on a background thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxItemDiscovery">
            <summary>
            Provides information about managed types from which toolbox items could be created.
            </summary>
            <remarks>
            Implemented by packages and supplied from IToolboxItemDiscoveryFactory.CreateItemDiscovery.
            Packages deriving from Microsoft.VisualStudio.Shell.Package supply this object via the
            discoveryType argument to ProvideToolboxItemDiscoveryAttribute.  This object is only used
            in a secondary appdomain which is unloaded after assembly enumeration completes.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IToolboxItemDiscovery.AdditionalAssemblyPaths">
             <summary>
             Gets a collection of additional assembly paths to search for toolbox items.
             </summary>
             <remarks>
             For each framework in the "frameworksToEnumerate" argument of the ProvideToolboxItemDiscovery
             attribute, the toolbox will enumerate all assemblies registered under AssemblyFoldersEx keys,
             and pass their types to GetItemInfo.  However, if you want additional assemblies to show up
             in your list, you can supply their paths here.  You can even omit the "frameworksToEnumerate"
             argument altogether to use only the assemblies returned from this property.  You can return
             null or an empty enumerator if you don't need to provide any additional assemblies.
            
             This method may be called on a background thread.
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IToolboxItemDiscovery.GetItemInfo(Microsoft.VisualStudio.Shell.IToolboxType)">
             <summary>
             Returns the IToolboxItemInfo corresponding to a given type.
             </summary>
             <returns>The info about this type, or null if the type is not a valid toolbox control type recognized by this provider.</returns>
             <remarks>
             This method should inspect the type of the <paramref name="type" /> argument if
             it needs to provide different information depending on the source of the type (such as
             an extension SDK).  See the IToolbox*Type interfaces that derive from IToolboxType.
            
             This method may be called on a background thread.
             </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxItemDiscoveryByName">
            <summary>
            Provides information about types from which toolbox items could be created.
            </summary>
            <remarks>
            Implemented by packages and supplied from IToolboxItemDiscoveryFactory.CreateItemDiscovery.
            Packages deriving from Microsoft.VisualStudio.Shell.Package supply this object via the
            discoveryType argument to ProvideToolboxItemDiscoveryAttribute.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IToolboxItemDiscoveryByName.GetItemInfo(Microsoft.VisualStudio.Shell.IToolboxTypeByName,Microsoft.VisualStudio.Shell.ToolboxItemDiscoveryContext)">
            <summary>
            Returns the IToolboxItemInfo corresponding to a given type.
            </summary>
            <returns>
            The info about this type, or null if the type is not a valid toolbox control type recognized by this provider.
            </returns>
            <remarks>
            This method may be called on a background thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxItemInfo">
            <summary>
            Supplies information about a managed type from which a toolbox item may be created.
            </summary>
            <remarks>
            Implemented by packages and supplied via IToolboxItemDiscovery.GetItemInfo.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IToolboxItemInfo.DisplayName">
            <summary>
            Gets the display name of the toolbox item.
            </summary>
            <remarks>
            This property may be accessed on a background thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IToolboxItemInfo.Icon">
             <summary>
             Gets the icon for the toolbox item, as a file path, byte array, Bitmap, or IntPtr.
             </summary>
             <remarks>
             This value can be any of the following, in order of decreasing efficiency
             (i.e. you should prefer the lower-numbered options):
                 1. The path to an image file (as a string).
                 2. A byte array containing the bytes of an image file.
                 3. A System.Drawing.Bitmap object.
                 4. A win32 GDI bitmap handle (as an IntPtr).
             For the file path and byte array, all GDI+ file types are supported: BMP, GIF, JPG, PNG
             and TIFF.
            
             This property may be accessed on a background thread.
             </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IToolboxItemInfo.TransparentColor">
            <summary>
            Gets the background color which will be rendered as transparent in the toolbox image.
            This may be a System.Drawing.Color or a System.Windows.Media.Color.  Any other type, or
            a null value, will result in an exception being thrown.
            </summary>
            <remarks>
            This property may be accessed on a background thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IToolboxItemInfo.GetPropertyValue(System.String)">
            <summary>
            Given a property ID, returns the corresponding value for this item.
            </summary>
            <param name="name">A non-localized ID from the ItemPropertyIdsAndNames property of ProvideToolboxItemDiscoveryAttribute.</param>
            <remarks>
            This method may be called on a background thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IToolboxItemInfo.ExtraInfo">
            <summary>
            Gets a collection of name-value pairs which will be passed to IToolboxItemCreator.CreateToolboxItem
            if the user chooses to create the item.
            </summary>
            <remarks>
            This property may be accessed on a background thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxPlatformInfo">
            <summary>
            Supplies information about a platform (such as Windows v8.0).
            </summary>
            <remarks>
            Implemented by the shell and supplied via IToolboxPlatformType.TargetPlatform.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxPlatformType">
            <summary>
            Represents a managed type with an associated platform.  Other interfaces derive from this
            to add additional metadata.
            </summary>
            <remarks>
            Implemented by the shell and supplied to IToolboxItemDiscovery.GetItemInfo.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxPlatformTypeByName">
            <summary>
            Represents a simple type with an associated platform.  Other interfaces derive from this
            to add additional metadata.
            </summary>
            <remarks>
            Implemented by the shell and supplied to IToolboxItemDiscovery.GetItemInfo.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxType">
            <summary>
            Represents a simple managed type.  Other interfaces derive from this to add additional
            metadata.
            </summary>
            <remarks>
            Implemented by the shell and supplied to IToolboxItemDiscovery.GetItemInfo.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IToolboxTypeByName">
            <summary>
            Represents a simple type.
            </summary>
            <remarks>
            Implemented by the shell and supplied to IToolboxItemDiscoveryByName.GetItemInfo.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.UIContext">
            <summary>
            Represents the active state of a UIContext.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.UIContext.UIContextChanged">
            <summary>
            Event that fires whenever the UIContext becomes active or inactive.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.UIContext.PropertyChanged">
            <summary>
            Event that fires when the IsActive property changes values.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.UIContext.FromUIContextGuid(System.Guid)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.Shell.UIContext" /> instance identified with the given guid.
            </summary>
            <param name="contextGuid">Guid of the UIContext.</param>
            <returns>Constructed UIContext instance.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.UIContext.IsZombie">
            <summary>
            Gets a value indicating whether this <see cref="T:Microsoft.VisualStudio.Shell.UIContext" /> is a zombie.
            This can be <c>true</c> when VS is in command line mode or /updateConfiguration.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.UIContext.IsActive">
            <summary>
            Returns the current state of the UIContext whether it is active or not.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.UIContext.WhenActivated(System.Action)">
            <summary>
            Execute the given action if the context is active. If the context
            is not currently active, the action will be executed when it is
            first activated. The action executes at most once.
            </summary>
            <param name="action">The operation to execute.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.UIContext.GetAwaiter">
            <summary>
            Method that enables UIContexts going to true (activated) to be awaited on. The awaiter
            resumes the caller on the same context, i.e., If the caller was on the UI thread when
            awaited, the code after the await would resume on the UI thread.
            </summary>
            <returns>A task awaiter.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.UIContext.Guid">
            <summary>
            Gets the Guid used to create this UIContext.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.UIContext.Microsoft#VisualStudio#Shell#Interop#IVsUIContextEvents#OnContextChanged(System.Guid,System.Boolean)">
            <summary>
            Our context changed callback handler. This handles both changes to the Guid we represent, as well as changes to ShellInitialized_guid (which might also be the Guid we represent).
            </summary>
            <param name="uiContext">The UI context that is changing.</param>
            <param name="active">Whether the UI context is now active or inactive.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.UIContext.GetCurrentTriState">
            <summary>
            Gets the current tri-state (NeverSet/Active/Inactive) from the UI context manager.
            </summary>
            <returns>The current tri-state of the UI context.</returns>
            <remarks>The tri-state can be used to differentiate NeverSet (which means the UI context is implicitly <see langword="false" />) from Inactive (which means the UI has explicitly been set to inactive (i.e. <see langword="false" />)).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.UIContext.GetTaskForAwait">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task" /> that will be signaled when the UI context next is set to active.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that will be completed when the UI context next becomes active, or, one that is already completed if the UI context is currently active.</returns>
            <remarks>This method ensures atomicity between checking of the current state of the UI context and either returning an already signaled <see cref="T:System.Threading.Tasks.Task" /> or signing up
            for context change events so we can signal the <see cref="T:System.Threading.Tasks.Task" /> once the UI context is activated.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.UIContext.InvokeOrScheduleCallback(System.Action)">
            <summary>
            Either invokes <paramref name="action" /> immediately if the UI context is currently active, or schedules the action to be invoked when the UI context next becomes activated.
            </summary>
            <param name="action">The action to invoke.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.UIContext.InvokeOrScheduleCallback(System.Action,Microsoft.VisualStudio.Shell.Interop.UIContextState)">
            <summary>
            Either invokes <paramref name="action" /> immediately if the UI context is currently active, or schedules the action to be invoked when the UI context next becomes activated.
            </summary>
            <param name="action">The action to invoke.</param>
            <param name="currentState">The current (tri) state of the UI context.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.UIContext.ScheduleAwait(System.Threading.Tasks.TaskCompletionSource{System.Boolean})">
            <summary>
            Schedules the await, which include adding <paramref name="uiContextActivationTaskCompletionSource" /> to our collection of outstanding awaits and calling either <see cref="M:Microsoft.VisualStudio.Shell.UIContext.WhenActivated(System.Action)" />.
            </summary>
            <param name="uiContextActivationTaskCompletionSource">The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> to set when the UI context enters the desired state.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.UIContext.ScheduleAwait(System.Threading.Tasks.TaskCompletionSource{System.Boolean},Microsoft.VisualStudio.Shell.Interop.UIContextState)">
            <summary>
            Schedules the await, which include adding <paramref name="uiContextActivationTaskCompletionSource" /> to our collection of outstanding awaits and calling <see cref="M:Microsoft.VisualStudio.Shell.UIContext.WhenActivated(System.Action)" />.
            </summary>
            <param name="uiContextActivationTaskCompletionSource">The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> to set when the UI context enters the desired state.</param>
            <param name="currentState">The current (tri) state of the UI context.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.UIContext.GetLockoutGuids">
            <summary>
            Gets the collection of UI context Guids that should be preventing from changing while our lambda is running if we need to do an await off the UI thread in <see cref="M:Microsoft.VisualStudio.Shell.UIContext.GetTaskForAwait" />.
            </summary>
            <returns>A collection Guids representing UI contexts that we need to prevent from changing while our lambda runs in <see cref="M:Microsoft.VisualStudio.Shell.UIContext.GetTaskForAwait" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.UIContextChangedEventArgs">
            <summary>
            Event arguments for <see cref="E:Microsoft.VisualStudio.Shell.UIContext.UIContextChanged" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.UIContextChangedEventArgs.#ctor(System.Boolean)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.VisualStudio.Shell.UIContextChangedEventArgs" />.
            </summary>
            <param name="activated">Whether UIContext is active or not.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.UIContextChangedEventArgs.Activated">
            <summary>
            Gets if the UIContext has become active or not.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsExecutionContextTrackerHelper">
            <summary>
            Helpers for Visual Studio Execution Context Tracker service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsExecutionContextTrackerHelper.Instance">
            <summary>
            Gets the execution context tracker instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsExecutionContextTrackerHelper.GetCurrentContext">
            <summary>
            Gets the current execution context cookie or Nil cookie of service is not available.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsExecutionContextTrackerHelper.CaptureCurrentContext">
            <summary>
            Captures the current execution contexts and returns it.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsExecutionContextTrackerHelper.CapturedContext">
            <summary>
            Helper to execute an action under a different context.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsExecutionContextTypes">
            <summary>
            Context types used in Visual Studio execution tracker.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsExecutionContextTypes.PackageExecutionContext">
            <summary>
            Context type guid for tracking package being executed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsExecutionContextTypes.ToolWindowExecutionContext">
            <summary>
            Context type guid for tracking tool windows being executed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsTaskCreationOptions">
            <summary>
            Managed definition of __VSTASKCREATIONOPTIONS/__VSTASKCREATIONOPTIONS2.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsTaskCreationOptions.LongRunning">
            <summary>
            For background tasks, this will cause the task to run its own thread instead of thread pool.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsTaskCreationOptions.AttachedToParent">
            <summary>
            Creates the task as attached to the currently running task. The parent task
            will not be marked as completed until this task is completed as well.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsTaskCreationOptions.CancelWithParent">
            <summary>
            Cancels the task when its parent is canceled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsTaskCreationOptions.NotCancelable">
            <summary>
            Marks the task as not cancelable. Users will get exception if they try to cancel the task.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsTaskContinuationOptions">
            <summary>
            Managed definition of __VSTASKCONTINUATIONOPTIONS/__VSTASKCONTINUATIONOPTIONS2.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsTaskContinuationOptions.LongRunning">
            <summary>
            For background tasks, this will cause the task to run its own thread instead of thread pool.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsTaskContinuationOptions.AttachedToParent">
            <summary>
            Creates the task as attached to the currently running task. The parent task
            will not be marked as completed until this task is completed as well.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsTaskContinuationOptions.ExecuteSynchronously">
            <summary>
            This option is not supported by the VS task library and it will be ignored hence continuations will not be inlined.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsTaskContinuationOptions.CancelWithParent">
            <summary>
            Cancels the task when its parent is canceled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsTaskContinuationOptions.IndependentlyCanceled">
            <summary>
            Separates the continuation task's cancelation so that it can be canceled independently.
            So canceling the current task doesn't cancel the continuation task and it executes in the
            order it is scheduled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsTaskContinuationOptions.NotCancelable">
            <summary>
            Marks the task as not cancelable. Users will get exception if they try to cancel the task.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsTaskWaitOptions">
            <summary>
            Managed definition of __VSTASKWAITOPTIONS.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsTaskWaitOptions.AbortOnTaskCancellation">
            <summary>
            If this option is set wait will return immediately upon cancellation of the task
            without waiting for task to complete.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsTaskRunContext">
            <summary>
            Managed definition of __VSTASKRUNCONTEXT.
            </summary>
            <devremarks>
            Whenever adding to this enum with a UI thread context,
            please update VsTaskLibraryHelper.IsUIThreadContext(VsTaskRunContext).
            </devremarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsTaskRunContext.BackgroundThread">
            <summary>
            Runs the task on background thread pool with normal priority.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsTaskRunContext.UIThreadSend">
            <summary>
            Runs the task on UI thread using RPC callback to be executed as soon as possible.
            Note: This context may cause reentrancy.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsTaskRunContext.UIThreadBackgroundPriority">
            <summary>
            Runs the task on UI thread using background priority (i.e. below user input).
            Tasks are scheduled even while modal dialogs are open.
            Tasks are scheduled to occur when no user input is pending, plus a short delay.
            Appropriate for short tasks or slightly longer tasks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsTaskRunContext.UIThreadIdlePriority">
            <summary>
            Runs the task on UI thread when Visual Studio is idle.
            Tasks are not scheduled till most modal dialogs have been dismissed.
            Appropriate for very short running tasks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsTaskRunContext.CurrentContext">
            <summary>
            Runs the task on the current context (ie UI thread or background thread).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsTaskRunContext.BackgroundThreadLowIOPriority">
            <summary>
            Runs the task on background thread pool and sets the background mode on the thread while the task is running.
            This is useful for IO heavy background tasks that are not time critical.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsTaskRunContext.UIThreadNormalPriority">
            <summary>
            Runs the task on UI thread using Dispatcher with Normal priority.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.IVsCodeContainerProviderService">
            <summary>
            Exposes functionality related to the code container provider service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.IVsCodeContainerProviderService.IsCodeContainerProviderInstalled(System.Guid)">
            <summary>
            Checks to see if a given provider is installed on the machine.
            </summary>
            <param name="provider">The guid of the provider.</param>
            <returns>True: if the provider is installed, False: if the provider is not installed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.IVsCodeContainerProviderService.AcquireAndTryOpenCodeContainerAsync(System.Guid,Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer)">
            <summary>
            Kick-off the appropriate acquisition workflow provided by <paramref name="provider" /> for
            <paramref name="onlineCodeContainer" />. Also open the acquired Container if acquisition succeeds.
            </summary>
            <param name="provider">The ID of the <see cref="T:Microsoft.VisualStudio.Shell.ICodeContainerProvider" /> that can be used to acquire <paramref name="onlineCodeContainer" />.</param>
            <param name="onlineCodeContainer">The online code container to acquire if any.</param>
            <returns>A flag indicating whether acquisition succeeded or not.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.RemoteSettings.IVsRemoteSettingsProvider">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.RemoteSettings.IVsRemoteSettingsProvider.GetValue``1(System.String,System.String,``0)">
            <summary>
            Gets a remote setting value. This does not return the most up-to-date setting, but the value
            of whatever RemoteSettings has processed so far.
            </summary>
            <typeparam name="T">The type of setting. This must match the value read from the registry (e.g. <see cref="T:System.String" />, <see cref="T:System.Int32" />, etc.). It cannot be an enum type based on an <see cref="T:System.Int32" />, for example.</typeparam>
            <param name="collectionPath">Path to the remote setting collection in the form My\Custom\Path.</param>
            <param name="key">Key of the remote setting.</param>
            <param name="defaultValue">Value to return if remote setting does not exist.</param>
            <returns>Remote setting value if it exists, otherwise defaultValue.</returns>
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.RemoteSettings.IVsRemoteSettingsProvider.GetValueAsync``1(System.String,System.String,``0)">
            <summary>
            Gets a remote setting value, that is updated with both Targeted Notifications backend and RemoteControl
            file. Must be called after Start.
            </summary>
            <typeparam name="T">The type of setting. This must match the value read from the registry (e.g. <see cref="T:System.String" />, <see cref="T:System.Int32" />, etc.). It cannot be an enum type based on an <see cref="T:System.Int32" />, for example.</typeparam>
            <param name="collectionPath">Path to the remote setting collection in the form My\Custom\Path.</param>
            <param name="key">Key of the remote setting.</param>
            <param name="defaultValue">Value to return if remote setting does not exist.</param>
            <returns>Remote setting value if it exists, otherwise defaultValue.</returns>
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.RemoteSettings.IVsRemoteSettingsProvider.GetActionsAsync``1(System.String)">
            <summary>
            Gets all remote actions of type T, wrapped in ActionWrapper. Waits for the call to Targeted Notifications backend
            to complete. Must be called after Start.
            </summary>
            <typeparam name="T">The type of action.</typeparam>
            <param name="actionPath">Unique path to identify the actions to retrieve.</param>
            <returns></returns>
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.RemoteSettings.IVsRemoteSettingsProvider2">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.RemoteSettings.IVsRemoteSettingsProvider2.SubscribeActions``1(System.String,System.Action{Microsoft.VisualStudio.RemoteSettings.ActionWrapper{``0}})">
            <summary>
            Subscribes to triggered remote actions of type T on the given action path.
            </summary>
            <typeparam name="T">The type of action.</typeparam>
            <param name="actionPath">Unique path to identify the actions to subscribe.</param>
            <param name="callback">Callback to be invoked with each individual action when it becomes available.</param>
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.RemoteSettings.IVsRemoteSettingsProvider2.UnsubscribeActions(System.String)">
            <summary>
            Unsubscribes from triggered remote actions on the given action path.
            </summary>
            <param name="actionPath">Unique path to identify the actions to unsubscribe.</param>
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.RemoteSettings.SVsRemoteSettingsProvider">
            <remarks>
            The service represented by this interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ErrorHandler.Succeeded(System.Int32)">
            <summary>
            Checks if a HRESULT is a success return code.
            </summary>
            <param name="hr">The HRESULT to test.</param>
            <returns>true if hr represents a success, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ErrorHandler.Failed(System.Int32)">
            <summary>
            Checks if a HRESULT is an error return code.
            </summary>
            <param name="hr">The HRESULT to test.</param>
            <returns>true if hr represents an error, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ErrorHandler.ThrowOnFailure(System.Int32)">
            <summary>
            Checks if the parameter is a success or failure HRESULT and throws an exception in case
            of failure.
            </summary>
            <param name="hr">The HRESULT to test.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ErrorHandler.ThrowOnFailure(System.Int32,System.Int32[])">
            <summary>
            Checks if the parameter is a success or failure HRESULT and throws an exception if it is a
            failure that is not included in the array of well-known failures.
            </summary>
            <param name="hr">The HRESULT to test.</param>
            <param name="expectedHRFailure">Array of well-known and expected failures.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ErrorHandler.IsRejectedRpcCall(System.Int32)">
            <summary>
            Checks if the parameter is a failure HRESULT indicating a failed RPC call
            that may succeed if retried at a later time.
            </summary>
            <param name="hr">The HRESULT to test.</param>
            <returns>True if the HRESULT indicate the RPC call was rejected and should be retried later.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ErrorHandler.IsCriticalException(System.Exception)">
            <summary>
            Returns true if the <see cref="T:System.Exception" /> is one of:
            <list type="bullet">
                <item>
                    <description><see cref="T:System.StackOverflowException" /></description>
                </item>
                <item>
                    <description><see cref="T:System.AccessViolationException" /></description>
                </item>
                <item>
                    <description><see cref="T:System.AppDomainUnloadedException" /></description>
                </item>
                <item>
                    <description><see cref="T:System.BadImageFormatException" /></description>
                </item>
                <item>
                    <description><see cref="T:System.DivideByZeroException" /></description>
                </item>
            </list>
            These exceptions should be re-thrown even the exception would cross a COM boundary. Such
            exceptions are considered critical and should immediately terminate the application.
            </summary>
            <param name="ex">The exception to test.</param>
            <returns>True if <paramref name="ex" /> is one of the critical exceptions that should not be converted to an HRESULT.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ErrorHandler.CallWithCOMConvention(System.Func{System.Int32},System.Boolean)">
             <summary>
             Use CallWithCOMConvention when an interop interface might be implimentd by managed code and it is
             expected to return HRESULT error codes but also throws exceptions.  This method will catch all but
             critical exceptions and return the corresponding HRESULT for the caught exception.
            
             Call as follows:
                 hr = ErrorHandler.CallWithCOMConvention(delegate() { object.method(param); }); }
             or
                 hr = ErrorHandler.CallWithCOMConvention(() =&gt; object.method(param)); }
             </summary>
             <param name="method"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ErrorHandler.CallWithCOMConvention(System.Func{System.Int32},System.Boolean,System.Boolean)">
            <devdoc>
            Executes the given method, allowing critical exceptions to be thrown, and returning the corresponding HRESULT
            for non-critical exceptions.
            </devdoc>
            <param name="setShellErrorInfo">Whether or not to try to get the shell service to set the error info.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ErrorHandler.CallWithCOMConvention(System.Action,System.Boolean)">
             <summary>
             Use CallWithCOMConvention when an interop interface might be implemented by managed code and it is
             expected to return HRESULT error codes but also throws exceptions.  This method will catch all but
             critical exceptions and return the corresponding HRESULT for the caught exception.
            
             Call as follows:
                 <code>hr = ErrorHandler.CallWithCOMConvention(delegate() { object.method(param); }); }</code>
             or
                 <code>hr = ErrorHandler.CallWithCOMConvention(() =&gt; object.method(param)); }</code>
             </summary>
             <param name="method">The action to invoke.</param>
             <returns>Zero (S_OK) on success. Otherwise an HRESULT representing the exception thrown by invoking <paramref name="method" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ErrorHandler.ExceptionToHResult(System.Exception,System.Boolean)">
            <summary>
            Convert the given <see cref="T:System.Exception" /> into a COM HRESULT return code and set the COM error info
            on the calling thread. Optionally, report that error to the user.
            </summary>
            <param name="ex">The exception to convert.</param>
            <param name="reportError">If true, then the error is reported to the user.</param>
            <returns>The HRESULT of the converted exception.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.OperationProgress.IOperationProgressStageAccess">
            <summary>
            Represents a contribution to a particular operation stage.
            When contribution is done, consumer should call <see cref="M:System.IDisposable.Dispose" /> or put this
            object in a using.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.IOperationProgressStageAccess.RegisterTask(Microsoft.VisualStudio.OperationProgress.OperationProgressTask)">
            <summary>
            Registers a <see cref="T:Microsoft.VisualStudio.OperationProgress.OperationProgressTask" /> that contributes work to this stage. If more
            tasks are registered than <see cref="P:Microsoft.VisualStudio.OperationProgress.IOperationProgressStageAccess.EstimatedTaskCount" />, the number of registered tasks takes
            priority.
            </summary>
            <param name="operationProgressTask"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.IOperationProgressStageAccess.EstimatedTaskCount">
            <summary>
            Gets or sets the estimated task count for this stage that will be used to help estimate stage progress.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.OperationProgress.IVsOperationProgress">
            <summary>
            Service that tracks and displays information about operations in progress.
            To access a stage please use <see cref="M:Microsoft.VisualStudio.OperationProgress.IVsOperationProgress2.RegisterStageOperationTasksAsync(System.String,System.String,System.UInt32,System.Func{Microsoft.VisualStudio.OperationProgress.IOperationProgressStageAccess,System.Threading.Tasks.Task})" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.IVsOperationProgress.AccessStage(System.String,System.String,System.UInt32)">
            <summary>
            Obsolete. Please use <see cref="M:Microsoft.VisualStudio.OperationProgress.IVsOperationProgress2.RegisterStageOperationTasksAsync(System.String,System.String,System.UInt32,System.Func{Microsoft.VisualStudio.OperationProgress.IOperationProgressStageAccess,System.Threading.Tasks.Task})" /> instead.
            Accesses a particular OperationProgressStage. When there are no more accesses to a particular stage,
            the stage is considered completed.
            </summary>
            <param name="operationProgressStageId">The identifier of the stage to access.
            See <see cref="T:Microsoft.VisualStudio.OperationProgress.CommonOperationProgressStageIds" /> for common stages.</param>
            <param name="name">Invariant name of this access used to log telemetry.</param>
            <param name="estimatedTaskCount">An initial estimate of the number of
            <see cref="T:Microsoft.VisualStudio.OperationProgress.OperationProgressTask" /> that will be registered for this access.
            Used to estimate progress of this access.</param>
            <returns>Instance of <see cref="T:Microsoft.VisualStudio.OperationProgress.IOperationProgressStageAccess" />, the lifetime of which represents
            the liftetime of this access.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.IVsOperationProgress.RegisterStageId(System.String,Microsoft.VisualStudio.OperationProgress.OperationProgressStageOptions)">
            <summary>
            Registers a new stage based on the id passed in. If the id is already registered, this function is a no-op.
            </summary>
            <param name="operationProgressStageId">Id of the stage to register.</param>
            <param name="operationProgressStageOptions">Options around how to display this OperationProgressStage.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.OperationProgress.IVsOperationProgress2">
            <summary>
            Expands <see cref="T:Microsoft.VisualStudio.OperationProgress.IVsOperationProgress" /> to enable stage access in a JoinableTaskFactory compatible way in order to avoid potential deadlocks when awaiting on operations in progress.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.IVsOperationProgress2.RegisterStageOperationTasksAsync(System.String,System.String,System.UInt32,System.Func{Microsoft.VisualStudio.OperationProgress.IOperationProgressStageAccess,System.Threading.Tasks.Task})">
            <summary>
            Registers tasks to the operation progress using a <paramref name="taskRegistrationActionAsync" />.
            When all registered tasks and the task registration action are completed, the access to the stage is considered completed.
            </summary>
            <param name="operationProgressStageId">The identifier of the stage to access.
            See <see cref="T:Microsoft.VisualStudio.OperationProgress.CommonOperationProgressStageIds" /> for common stages.</param>
            <param name="name">Invariant name of this access used to log telemetry.</param>
            <param name="estimatedTaskCount">An initial estimate of the number of
            <see cref="T:Microsoft.VisualStudio.OperationProgress.OperationProgressTask" /> that will be registered for this access.
            Used to estimate progress of this access.</param>
            <param name="taskRegistrationActionAsync">Action that registers work to the stage access.
            Its duration in combination with the duration of the registered tasks control the duration of the stage.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that completes when the <paramref name="taskRegistrationActionAsync" /> completes.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressProjectStageStatus">
            <summary>
            Information about operation progress stages of a particular project.
            Note: Current interface and behavior are preliminary and subject to change.
            The status includes contributions to the project itself as well as its project dependencies.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressProjectStageStatus.Status">
            <summary>
            Gets the status of the stage.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressProjectStageStatus.InProgressChanged">
            <summary>
            Event that gets triggered when the stage becomes in progress or when it completes the scheduled work.
            Notifications are queued and triggered asynchronously, on a background thread and could be delayed.
            Subscribers can use the version number received via <see cref="T:Microsoft.VisualStudio.OperationProgress.ProjectStatusChangedEventArgs" /> in combination with <see cref="P:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressProjectStageStatus.Status" /> to detect whether the notification is old.
            Whenever possible, it is recommended to use <see cref="M:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressProjectStageStatus.WaitForCompletionAsync" /> instead.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressProjectStageStatus.WaitForCompletionAsync">
            <summary>
            Waits for the current work in-progress to complete.
            </summary>
            <returns>A task that transitions to a completed state when the work in progress has completed, associated with the version number at the time of completion.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStageStatus">
            <summary>
            Information about operation progress stages.
            Note: Current interface and behavior are preliminary and subject to change.
            The status includes contributions to the stage itself as well as contributions to the known upstream stages.
            For example, the Intellisense stage status includes scheduled work in the following stages: Projects Loaded, Updating Projects and Intellisense.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStageStatus.Status">
            <summary>
            Gets the status of the stage.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStageStatus.InProgressChanged">
            <summary>
            Event that gets triggered when the stage becomes in progress or when it completes the scheduled work.
            Notifications are queued and triggered asynchronously, on a background thread and could be delayed.
            Subscribers can use the version number received via <see cref="T:Microsoft.VisualStudio.OperationProgress.OperationProgressStatusChangedEventArgs" /> in combination with <see cref="P:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStageStatus.Status" /> to detect whether the notification is old.
            Whenever possible, it is recommended to use <see cref="M:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStageStatus.WaitForCompletionAsync" /> instead.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStageStatus.WaitForCompletionAsync">
            <summary>
            Waits for the current work in-progress to complete.
            </summary>
            <returns>A task that transitions to a completed state when the work in progress has completed, associated with the version number at the time of completion.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStageStatusForSolutionLoad">
            <summary>
            Information about operations in progress correlated with solution load.
            Note: Current interface and behavior are preliminary and subject to change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStageStatusForSolutionLoad.IsInProgress">
            <summary>
            Gets a value indicating whether if the stage is in progres or not.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStageStatusForSolutionLoad.WaitForCompletionAsync">
            <summary>
            Waits for solution load and any in-progress work to complete. If no work was in progress, it completes when solution is loaded.
            </summary>
            <returns>A task that transitions to a completed state when the work in-progress has completed.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStatusService">
            <summary>
            Provides status information about the operations registered with <see cref="T:Microsoft.VisualStudio.OperationProgress.IVsOperationProgress" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStatusService.GetStageStatus(System.String)">
            <summary>
            Provides access to the status of the specified stage.
            </summary>
            <param name="operationProgressStageId">The identifier of the stage to access. See <see cref="T:Microsoft.VisualStudio.OperationProgress.CommonOperationProgressStageIds" /> for common stages.</param>
            <returns>An object that provides status information.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStatusService.GetStageStatusForSolutionLoad(System.String)">
            <summary>
            Provides access to the status of the specified stage, correlated with solution loads.
            </summary>
            <param name="operationProgressStageId">The identifier of the stage to access.See <see cref="T:Microsoft.VisualStudio.OperationProgress.CommonOperationProgressStageIds" /> for common stages.</param>
            <returns>An object that provides status information.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStatusService2">
            <summary>
            Provides status information about the operations registered with <see cref="T:Microsoft.VisualStudio.OperationProgress.IVsOperationProgress" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStatusService2.GetProjectStageStatus(System.Guid,System.String,System.Boolean)">
            <summary>
            Provides information about the stage of a particular project.
            </summary>
            <param name="projectId">The project Id of the project we would like to get the status for.</param>
            <param name="operationProgressStageId">The identifier of the stage to access. See <see cref="T:Microsoft.VisualStudio.OperationProgress.CommonOperationProgressStageIds" /> for common stages.</param>
            <param name="includeDependencies">Specifies if project dependencies should be considered when calculating the status. Currently, only value true is supported.</param>
            <returns>An object that provides status information.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.OperationProgress.OperationProgressStageOptions">
            <summary>
            Holds options for <see cref="M:Microsoft.VisualStudio.OperationProgress.IVsOperationProgress.RegisterStageId(System.String,Microsoft.VisualStudio.OperationProgress.OperationProgressStageOptions)" /> to register a new OperationProgressStage.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.OperationProgressStageOptions.#ctor(System.String)">
            <summary>
            Creates new options for registering an OperationProgressStage.
            </summary>
            <param name="displayName">Display name of the stage that can be shown to user.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.OperationProgressStageOptions.DisplayName">
            <summary>
            Gets the display name of the stage that can be shown to user.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.OperationProgress.OperationProgressStageStatus">
            <summary>
            Represents the status of the stage.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.OperationProgressStageStatus.IsInProgress">
            <summary>
            Gets a value indicating whether the stage is in progress or not.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.OperationProgressStageStatus.Version">
            <summary>
            Gets the associated version number. Version number increases when there are changes to the state.
            Notification events are typically sent in a queue and can be behind the current state. Listeners can use version number to discard outdated notifications.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.OperationProgress.OperationProgressStatusChangedEventArgs">
            <summary>
            Provides data for <see cref="E:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStageStatus.InProgressChanged" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.OperationProgressStatusChangedEventArgs.#ctor(Microsoft.VisualStudio.OperationProgress.OperationProgressStageStatus)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.VisualStudio.OperationProgress.OperationProgressStatusChangedEventArgs" />.
            </summary>
            <param name="status">The new status.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.OperationProgressStatusChangedEventArgs.Status">
            <summary>
            The status of the stage.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.OperationProgress.OperationProgressTask">
            <summary>
            Represents a unit of work that contributes to a <see cref="T:Microsoft.VisualStudio.OperationProgress.IOperationProgressStageAccess" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.OperationProgressTask.#ctor(Microsoft.VisualStudio.Threading.JoinableTask,System.String,System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            Creates a new unit of work that contributes to a <see cref="T:Microsoft.VisualStudio.OperationProgress.IOperationProgressStageAccess" />.
            </summary>
            <param name="joinableTask">Task that represents part of an operation.</param>
            <param name="name">Invariant name of this unit of work.</param>
            <param name="displayName">A function that returns a <see cref="T:System.Threading.Tasks.Task`1" /> to get the DisplayName.
            of this <see cref="T:Microsoft.VisualStudio.OperationProgress.OperationProgressTask" />. Will only be called if actually needed
            to display to user.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.OperationProgressTask.#ctor(Microsoft.VisualStudio.Threading.JoinableTask,System.String,System.Func{System.Threading.Tasks.Task{System.String}},System.Nullable{System.Guid})">
            <summary>
            Creates a new unit of work that contributes to a <see cref="T:Microsoft.VisualStudio.OperationProgress.IOperationProgressStageAccess" />.
            </summary>
            <param name="joinableTask">Task that represents part of an operation.</param>
            <param name="name">Invariant name of this unit of work.</param>
            <param name="displayName">A function that returns a <see cref="T:System.Threading.Tasks.Task`1" /> to get the DisplayName.
            of this <see cref="T:Microsoft.VisualStudio.OperationProgress.OperationProgressTask" />. Will only be called if actually needed
            to display to user.</param>
            <param name="projectId">The id of the project this task contributes to.
            This information can be used to track operations in progres for projects.
            If not specified, the task is considered as impacting all projects.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.OperationProgressTask.#ctor(System.Threading.Tasks.Task,System.String,System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            Obsolete. Please use <see cref="M:Microsoft.VisualStudio.OperationProgress.OperationProgressTask.#ctor(Microsoft.VisualStudio.Threading.JoinableTask,System.String,System.Func{System.Threading.Tasks.Task{System.String}})" /> instead
            to avoid potential deadlocks when awaiters wait on operation progress completion.
            Creates a new unit of work that contributes to a <see cref="T:Microsoft.VisualStudio.OperationProgress.IOperationProgressStageAccess" />.
            </summary>
            <param name="task">Task that represents part of an operation.</param>
            <param name="name">Invariant name of this unit of work.</param>
            <param name="displayName">A function that returns a <see cref="T:System.Threading.Tasks.Task`1" /> to get the DisplayName
            of this <see cref="T:Microsoft.VisualStudio.OperationProgress.OperationProgressTask" />. Will only be called if actually needed
            to display to user.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.OperationProgressTask.Task">
            <summary>
            Gets the <see cref="P:Microsoft.VisualStudio.OperationProgress.OperationProgressTask.Task" /> that represents part of an operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.OperationProgressTask.JoinableTask">
            <summary>
            Gets the <see cref="P:Microsoft.VisualStudio.OperationProgress.OperationProgressTask.JoinableTask" /> that represents part of an operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.OperationProgressTask.DisplayName">
            <summary>
            Gets a function that returns a <see cref="T:System.Threading.Tasks.Task`1" /> to get the DisplayName
            of this <see cref="T:Microsoft.VisualStudio.OperationProgress.OperationProgressTask" />. Will only be called if actually needed
            to display to user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.OperationProgressTask.Name">
            <summary>
            Gets the invariant name of this <see cref="T:Microsoft.VisualStudio.OperationProgress.OperationProgressTask" /> that can be reported in Telemetry.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.OperationProgressTask.ProjectId">
            <summary>
            Gets or sets the optional ProjectId <see cref="T:System.Guid" /> used to tie this task to a Project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.OperationProgressTask.IsRegistrationTask">
            <summary>
            Specifies whether this is the default task used for work registration.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.OperationProgress.ProjectStageStatus">
            <summary>
            Represents the status of the stage for a specific project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.ProjectStageStatus.IsInProgress">
            <summary>
            Gets a value indicating whether the stage is in progress or not.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.ProjectStageStatus.Version">
            <summary>
            Gets the associated version number. Version number increases when there are changes to the state.
            Notification events are typically sent in a queue and can be behind the current state. Listeners can use version number to discard outdated notifications.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.OperationProgress.ProjectStatusChangedEventArgs">
            <summary>
            Provides data for <see cref="E:Microsoft.VisualStudio.OperationProgress.IVsOperationProgressStageStatus.InProgressChanged" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.OperationProgress.ProjectStatusChangedEventArgs.#ctor(Microsoft.VisualStudio.OperationProgress.ProjectStageStatus)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.VisualStudio.OperationProgress.ProjectStatusChangedEventArgs" />.
            </summary>
            <param name="status">The new status.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.OperationProgress.ProjectStatusChangedEventArgs.Status">
            <summary>
            The status of the stage.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TaskStatusCenter.CompletionActions">
            <summary>
             A set of flags that mark the visibility of a <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler" /> in the Task Status Center UI upon completion.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.CompletionActions.None">
            <summary>
             After completion the task associated with this flag is removed from the Task Status Center UI.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.CompletionActions.RetainOnRanToCompletion">
            <summary>
            After the task associated with this flag runs to completion it is retained in the Task Status Center UI.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.CompletionActions.RetainOnFaulted">
            <summary>
            After the task associated with this flag faults it is retained in the Task Status Center UI.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.CompletionActions.RetainAndNotifyOnRanToCompletion">
            <summary>
            After the task associated with this flag runs to completion it is retained in the Task Status Center UI
            and a visual notification is provided to the user indicating the task completed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.CompletionActions.RetainAndNotifyOnFaulted">
            <summary>
            After the task associated with this flag faults it is retained in the Task Status Center UI
            and a visual notification is provided to the user indicating the task faulted.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler">
            <summary>
             Interface representing the objects tracked by the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService" />.
             These objects are given back to callers to interact with the
             <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService" /> with regards to their registered
             task.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler.Options">
            <summary>
             Gets a copy of the options configured at initialization
             for an <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler" /> behaviour and data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler.UserCancellation">
            <summary>
             Gets the token that indicates whether the user has requested cancellation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler.Progress">
            <summary>
             Gets  the <see cref="T:System.IProgress`1" /> from this.
             Can be used to update the behaviour and state of this via <see cref="M:System.IProgress`1.Report(`0)" />.
            </summary>
            <requires>
             <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData.PercentComplete" /> must be &gt;= 0 AND &lt;= 100.
            </requires>
            <remarks>
            If requires is not met, then the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData" /> will not be updated
            and will appear as a non operation.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler.RegisterTask(System.Threading.Tasks.Task)">
            <summary>
             Registers task with the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService" /> that the
             caller wants to have tracked.
             Task will be displayed in the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService" /> UI.
            </summary>
            <param name="task">The <see cref="T:System.Threading.Tasks.Task" /> that the caller wants to
             have tracked via the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService" />.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler2">
            <summary>
             Interface representing the objects tracked by the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService" />.
             These objects are given back to callers to interact with the
             <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService" /> with regards to their registered
             task.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler2.Dismiss">
            <summary>
            Removes this task from being tracked or presented by the task status center.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TaskStatusCenter.IVsProgressStreamConverter">
            <summary>
            An interface that enables implementors to convert a stream into
            a format that can be displayed in a readable format.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TaskStatusCenter.IVsProgressStreamConverter.ConvertToDisplayFormat(System.IO.Stream)">
            <summary>
            Converts a stream that gets progress into a format
            that can be displayed in a UI.
            </summary>
            <param name="progressStream">The <see cref="T:System.IO.Stream" /> where progress will be reported.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskDisplayItem" /> that will be updated with progress information from the <see cref="T:System.IO.Stream" />.</returns>
            <remarks>It is expected that the stream progress updates will be reported through the same <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskDisplayItem" />.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress">
            <summary>
            An interface representing tasks in an <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress.Options">
            <summary>
            Gets a copy of the options configured at initialization
            for an <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress" /> behaviour and data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress.UserCancellation">
            <summary>
            Gets the token that indicates whether the user has requested cancellation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress.Progress">
            <summary>
            Gets the <see cref="T:System.IProgress`1" /> from this.
            Can be used to update the behaviour and state of this via <see cref="M:System.IProgress`1.Report(`0)" />.
            <para>
            <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData.PercentComplete" /> must be between 0 and 100 (inclusive),
            or null for indeterminate progress.
            </para>
            </summary>
            <remarks>
            If the requirement is not met, then the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData" /> will not be updated
            and will appear as a non operation.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress.Status">
            <summary>
            Gets a value indicating the status of the task.  If this is null, the status of the task is
            unknown.  If no task is registered with this object, <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress.Status" /> will be set automatically
            based on the value of <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress.PercentComplete" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress.CanRunInBackground">
            <summary>
            Gets or sets a value indicating whether the task can run without modal UI being displayed for it.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress.CanBeCanceled">
            <summary>
            Gets a value indicating whether the task is cancellable at this moment in time.
            This is updated via <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress.Progress" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress.ProgressText">
            <summary>
            Gets a string value indicating extra information about the current progress of the task.
            This is updated via <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress.Progress" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress.PercentComplete">
            <summary>
            Gets a value indicating the percentage complete the task associated with this is.
            If this value is null, the progress is indeterminate.
            This is updated via <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress.Progress" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress.Task">
            <summary>
            The task that was registered with this instance via the <see cref="M:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress.RegisterTask(System.Threading.Tasks.Task)" /> method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress.RegisterTask(System.Threading.Tasks.Task)">
            <summary>
            Registers task with the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService" /> that the
            caller wants to have tracked.
            Task will be displayed in the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService" /> UI.
            </summary>
            <param name="task">
            The <see cref="T:System.Threading.Tasks.Task" /> that the caller wants to have tracked via the
            <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService" />.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection" /> represents a set of tasks to be collected together
            for display as a group in a progress indicator control or in the Task Status Center.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection.Title">
            <summary>
            Gets the title of the task collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection.Id">
            <summary>
            Gets the unique identifier of the task collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection.AutoUpdateStatus">
            <summary>
            Gets or sets a value indicating whether the collection's <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection.Status" /> should
            be automatically updated as task statuses change.  The default value is true.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection.Status">
            <summary>
            Gets or sets the status of the task collection.
            <para>
            If <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection.AutoUpdateStatus" /> is true, the status is implicitly derived from the
            statuses of the elements in the <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection.Tasks" /> collection.  The status cannot
            be set explicitly.
            </para>
            <para>
            If <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection.AutoUpdateStatus" /> is false, the owner of the collection should set this
            property explicitly; its value is not derived from the statuses of the elements in the
            <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection.Tasks" /> collection.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection.CurrentTask">
            <summary>
            Gets the currently executing task for the collection.  This is the first item in the
            <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection.Tasks" /> collection whose status is not one of
            <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or
            <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection.Tasks">
            <summary>
            Gets the set of tasks that comprise the task collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection.CumulativePercentComplete">
            <summary>
            Gets the cumulative percent complete of all of the tasks in the collection.
            It can range from 0 to 100.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection.AllowUserCancellation">
            <summary>
            Gets or sets a value indicating whether the user can cancel the task collection.
            Default value: true.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection.CanBeCanceled">
            <summary>
            Gets a value indicating whether the task collection can canceled.  This value is computed based
            on the <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress.CanBeCanceled" /> properties for the incomplete tasks
            in the collection's <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection.Tasks" /> collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection.CanRunInBackground">
            <summary>
            Gets a value indicating whether the task collection can run without modal UI being displayed
            for it.  This value is computed based on the <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress.CanRunInBackground" />
            properties for the incomplete tasks in the collection's <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection.Tasks" /> collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection.AllowRunInBackground">
            <summary>
            Gets or sets a value indicating whether the "Run in Background" button should be visible.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection.AddTaskAsync(Microsoft.VisualStudio.TaskStatusCenter.TaskProgressOptions,Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData,System.Threading.CancellationToken)">
            <summary>
            Creates a task and adds it to the collection's <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection.Tasks" /> collection.
            </summary>
            <param name="options">
            A <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressOptions" /> dictating the immutable states, behaviours,
            and action of the new task.
            </param>
            <param name="progressData">The initial progress data for the new task.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The task that was added to the collection.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection.ShowProgress(System.Boolean)">
            <summary>
            Displays progress for the task collection.  If <paramref name="modal" /> is true, progress is
            displayed in a dialog and this method will not return until the task collection completes, is
            canceled, or is moved to the background.
            </summary>
            <param name="modal">
            Indicates whether progress UI is to be displayed in a modal dialog or in the background
            (e.g. the Task Status Center).
            </param>
            <returns>The result of showing the progress UI.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressService">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressService" /> allows a set of tasks to be collected together
            for display as a group in a user interface such as the Task Status Center.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressService.CreateTaskCollectionAsync(Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionOptions,System.Threading.CancellationToken)">
            <summary>
            Creates a task collection with the given <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionOptions" />.
            </summary>
            <param name="options">The options for the task collection.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The task collection.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressService.TryGetTaskCollection(System.String,Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection@)">
            <summary>
            Gets an existing task collection.
            </summary>
            <param name="taskCollectionId">A task collection id.</param>
            <param name="taskCollection">
            The <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection" /> associated with the id if available. null if it's not available.
            </param>
            <returns>True: if the task collection was found. False: otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService">
            <summary>
             The <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService" /> allows the caller of this service
             to Register <see cref="T:System.Threading.Tasks.Task" /> tasks with this service.  The caller can then
             configure how information about their task is displayed to the User via the
             <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService" /> UI.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService.PreRegister(Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions,Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData)">
            <summary>
             PreRegister configures an initial <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler" /> based on the
             <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions" /> and <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData" /> passed in.
             The <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions" /> will be immutable for the life time of
             the task.  The <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData" /> are mutable, and can be updated via
             the <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler.Progress" />.
            </summary>
            <param name="options"> a <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions" /> dictating the
             immutable states, behaviours, and action of the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler" />
             returned.
            </param>
            <param name="data">
             When a <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler" /> is initialized, it has not been
             "reported" on yet via the <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler.Progress" />
             so an initial <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData" /> can be passed in here.
            </param>
            <returns>
             Returns an <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler" /> that can be used to register and update the
             the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService" /> UI's display regarding the task
             registered.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TaskStatusCenter.LogDisplayType">
            <summary>
            The UI where output would be directed for an <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress" /> or <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.LogDisplayType.None">
            <summary>
            Output will not be directed to a persistent UI like the output window, etc.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.LogDisplayType.OutputWindow">
            <summary>
            Output will be directed to the output window.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.ShowProgressResult.Completed">
            <summary>
            The collection of tasks completed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.ShowProgressResult.Canceled">
            <summary>
            The collection of tasks was canceled before all tasks completed,
            although some of the tasks in the collection may have completed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.ShowProgressResult.MovedToBackground">
            <summary>
            The progress reporting for the task collection was moved to the
            background (e.g. the Task Status Center).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TaskStatusCenter.SVsTaskProgressService">
            <summary>
             Interface for getting the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.SVsTaskProgressService" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TaskStatusCenter.SVsTaskStatusCenterService">
            <summary>
             Interface for getting the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.SVsTaskStatusCenterService" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TaskStatusCenter.SVsTaskStatusCenterViewFactory">
            <summary>
            Service Interface for the TaskStatusCenterService.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TaskStatusCenter.TaskDisplayItem">
            <summary>
            Information about a running task that would be displayed in a UI
            such as the Task Status Center.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TaskStatusCenter.TaskDisplayItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskDisplayItem" /> class.
            </summary>
            <param name="title">The title of the task.</param>
            <param name="description">The description.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.TaskDisplayItem.Title">
            <summary>
            The title of the task.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.TaskDisplayItem.Description">
            <summary>
            A description of the task.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions">
            <summary>
             Holds options for a <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler" /> that are configured
             on initialization.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions.Title">
            <summary>
             A value indicating the title of the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler" />
             associated with these options.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions.ActionsAfterCompletion">
            <summary>
            A value indicating a set of flag(s) that represent the visibility in the Task Status Center UI
            that the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler" /> associated with these options will have upon completion.
            If any visibility is set then <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions.DisplayTaskDetails" /> can not be null.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions.DisplayTaskDetails">
            <summary>
            A value used to invoke a caller supplied <see cref="T:System.Action`1" />.
            to give more details about the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler" /> associated with
            this, to the user.  Could lead the user to the tool window associated with the
            task, or open up an error log for example.  If the task has any visibility
            after completion regarding <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.CompletionActions" />, then
            <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions.DisplayTaskDetails" /> can not be null.  The <see cref="T:System.Threading.Tasks.Task" />
            in the <see cref="T:System.Action`1" /> will be the <see cref="T:System.Threading.Tasks.Task" /> registered
            with the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService" />.  This will be passed
            in when <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions.DisplayTaskDetails" /> is invoked.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions.TaskSuccessMessage">
            <summary>
            An optional value that clients can use to specify a customized success message
            upon completion of task.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions.ClientId">
            <summary>
            An optional value that clients can specify in order to display tips, either at the
            start or end of a task. This must be approved by the IDE Exp team via an allow list.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions.StartTipCalloutId">
            <summary>
            An optional value that clients can specify in order to display a tip at the start of a task.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.TaskHandlerOptions.EndTipCalloutId">
            <summary>
            An optional value that clients can specify in order to display a tip at the completion of a task.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionOptions">
            <summary>
            Holds immutable options for an <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionOptions.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionOptions" /> class.
            </summary>
            <param name="title">The title for the collection.</param>
            <param name="id">The unique identifier for the collection.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionOptions.Title">
            <summary>
            Gets the title for the collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionOptions.Id">
            <summary>
            Gets the unique identifier for the collection.  This is typically a dotted
            string much like a namespace, such as "Company.Product.Feature.CollectionName".
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionStatus">
            <summary>
            Represents the status of an <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection" />.
            </summary>
            <remarks>
            A collection starts with a status of <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionStatus.WaitingToRun" />.  Once the first task in the
            collection begins to run, the status changes to <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionStatus.Running" />.  When every task in
            the collection has finished running (regardless of how it finished), the <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionStatus.Running" />
            bit will be removed and the <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionStatus.Completed" /> bit will be added to the status.
            <para>
            As tasks in the collection complete with a status of something other than <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />,
            the <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionStatus.Canceled" /> and/or <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionStatus.Faulted" /> bits will be added to the status, as appropriate.
            A collection with a status of (<see cref="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionStatus.Running" /> | <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionStatus.Faulted" /> | <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionStatus.Canceled" />) has
            at least one task that is still executing, at least one task that faulted, and at least one task that was
            canceled.  When all the tasks in this collection have finished running, the collection's status will change
            to (<see cref="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionStatus.Completed" /> | <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionStatus.Faulted" /> | <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionStatus.Canceled" />).  Individual entries in the
            <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection.Tasks" /> collection can be inspected to determine which tasks ran to
            completion, which ones faulted, and which ones were canceled.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionStatus.WaitingToRun">
            <summary>
            All of the tasks in the collection are waiting to run.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionStatus.Running">
            <summary>
            One or more tasks in the collection is running.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionStatus.Completed">
            <summary>
            All of the tasks in the collection completed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionStatus.Faulted">
            <summary>
            One or more tasks in the collection faulted.  The <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection.Tasks" />
            collection can be inspected to determine which tasks faulted.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionStatus.Canceled">
            <summary>
            One or more tasks in the collection was canceled.  The <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection.Tasks" />
            collection can be inspected to determine which tasks were canceled.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData">
            <summary>
             A struct that holds the updatable data for a <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler" />.
             The data is related to the ongoing progress of a
             <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler" /> task.  The data will be
             displayed in the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskStatusCenterService" /> UI appropriately.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData.ProgressText">
            <summary>
             Gets or sets a string value indicating extra information about the
             current progress of the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler" />
             associated with this <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData.CanBeCanceled">
            <summary>
             Gets or sets a value indicating whether the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.ITaskHandler" />
             associated with this <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData" /> is
             cancellable at this moment in time.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressData.PercentComplete">
            <summary>
             Gets or sets a value indicating the percentage complete
             the task associated with this is.
            </summary>
            <value>
            0 &lt;= PercentComplete &lt;= 100
            Specifying null will result in an indeterminate (spinning with
            no indication of percentage complete) progress bar.
            </value>
            <exception>
            <see cref="T:System.ArgumentException" /> if requires is not met.
            </exception>
        </member>
        <member name="T:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressOptions">
            <summary>
            Holds immutable options for an <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressOptions.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressOptions" /> class.
            </summary>
            <param name="title">The title of the collection.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressOptions.#ctor(System.String,Microsoft.VisualStudio.TaskStatusCenter.CompletionActions,System.Action{System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressOptions" /> class.
            </summary>
            <param name="title">The title of the collection.</param>
            <param name="completionActions">
            A value indicating a set of flag(s) that represent the visibility in the Task Status Center UI
            that the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress" /> associated with these options will have upon completion.
            If this value is something other than <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.CompletionActions.None" />, then
            <paramref name="displayTaskDetails" /> can not be null.
            </param>
            <param name="displayTaskDetails">
            A value used to invoke a caller supplied <see cref="T:System.Action`1" />.
            to give more details about the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress" /> associated with
            this, to the user.  Could lead the user to the tool window associated with the
            task, or open up an error log for example.  If <paramref name="completionActions" />
            is something other than <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.CompletionActions.None" />, then
            this parameter can not be null.  The <see cref="T:System.Threading.Tasks.Task" /> passed to the action
            will be the <see cref="T:System.Threading.Tasks.Task" /> registered with the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress" />.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressOptions.#ctor(System.String,System.IO.Stream,Microsoft.VisualStudio.TaskStatusCenter.IVsProgressStreamConverter,Microsoft.VisualStudio.TaskStatusCenter.CompletionActions,System.Action{System.Threading.Tasks.Task},Microsoft.VisualStudio.TaskStatusCenter.LogDisplayType,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressOptions" /> class.
            </summary>
            <param name="title">The title of the collection.</param>
            <param name="progressStream">A stream that would provide progress of the task.</param>
            <param name="streamConverter">A stream converter that can convert the stream to a displayable format.</param>
            <param name="completionActions">
            A value indicating a set of flag(s) that represent the visibility in the Task Status Center UI
            that the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress" /> associated with these options will have upon completion.
            If this value is something other than <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.CompletionActions.None" />, then
            <paramref name="displayTaskDetails" /> can not be null.
            </param>
            <param name="displayTaskDetails">
            A value used to invoke a caller supplied <see cref="T:System.Action`1" />.
            to give more details about the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress" /> associated with
            this, to the user.  Could lead the user to the tool window associated with the
            task, or open up an error log for example.  If <paramref name="completionActions" />
            is something other than <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.CompletionActions.None" />, then
            this parameter can not be null.  The <see cref="T:System.Threading.Tasks.Task" /> passed to the action
            will be the <see cref="T:System.Threading.Tasks.Task" /> registered with the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress" />.
            </param>
            <param name="displayType">A <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressOptions.DisplayType" /> enum where information should be displayed in a persistent manner. e.g. Output Window.</param>
            <param name="display">
            If <paramref name="displayType" /> is <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.LogDisplayType.None" /> this should be null.
            If the displayType is <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.LogDisplayType.OutputWindow" /> then <paramref name="display" /> should be <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane" />.
            </param>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressOptions.ProgressStream">
            <summary>
            An optional stream which shows the progress of a task.
            This stream output will be rendered in a UI like the output window.
            If no <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressOptions.StreamConverter" /> is specified, the raw stream output
            will be displayed.
            </summary>
            <remarks>
            If no <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressOptions.StreamConverter" /> is provided the <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressOptions.ProgressStream" /> will be read with a
            <see cref="T:System.IO.TextReader" />.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressOptions.StreamConverter">
            <summary>
            An optional stream converter that would convert a <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressOptions.ProgressStream" />
            into a format that is displayed in a UI.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressOptions.Title">
            <summary>
            Gets a value indicating the title of the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress" />
            associated with these options.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressOptions.CompletionActions">
            <summary>
            Gets a value indicating a set of flag(s) that represent the visibility in the Task Status Center UI
            that the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress" /> associated with these options will have upon completion.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressOptions.DisplayTaskDetails">
            <summary>
            Gets a value used to invoke a caller supplied <see cref="T:System.Action`1" />.
            to give more details about the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress" /> associated with
            this, to the user.  Could lead the user to the tool window associated with the
            task, or open up an error log for example.  The <see cref="T:System.Threading.Tasks.Task" /> passed to the action
            will be the <see cref="T:System.Threading.Tasks.Task" /> registered with the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressOptions.DisplayType">
            <summary>
            Gets a property that indicates where the output of the tasks associated with
            the <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress" /> would go.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressOptions.Display">
            <summary>
            The object that will be used to display the output. For e.g. <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane" />
            when the <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.TaskProgressOptions.DisplayType" /> is <see cref="F:Microsoft.VisualStudio.TaskStatusCenter.LogDisplayType.OutputWindow" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.WellKnownOldVersionValues">
            <summary>
            Known values that can be used to specify OldVersion (LowerBound/UpperBound) values for
            ProvideBindingRedirectionAttribute.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.WellKnownOldVersionValues.LowestMajor">
            <summary>
            Value is n.0.0.0, where n is the major version number of the target assembly.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.WellKnownOldVersionValues.LowestMajorMinor">
            <summary>
            Value is n.n.0.0, where n.n is the major and minor version numbers of the target assembly.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.WellKnownOldVersionValues.Current">
            <summary>
            Value is the current version number of the target assembly.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.WellKnownToolboxStringMaps">
             <summary>
            
             </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.ToolboxMultitargetingFields">
             <summary>
            
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.ToolboxMultitargetingFields.TypeName">
            <summary>The full type name, e.g. System.Windows.Forms.Button.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.ToolboxMultitargetingFields.AssemblyName">
            <summary>The full assembly name (strong name), including version.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.ToolboxMultitargetingFields.Frameworks">
            <summary>A semicolon-delimited list of TFMs this item supports (without profiles).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.ToolboxMultitargetingFields.ItemProvider">
            <summary>The GUID of the package that implements IVsProvideTargetedToolboxItems and knows about this item type.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.ToolboxMultitargetingFields.UseProjectTargetFrameworkVersionInTooltip">
            <summary>A boolean value indicating whether to use the project target framework's version in toolbox item tooltips.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.CMDSETID">
             <summary>
            
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.StandardCommandSet97_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.StandardCommandSet97_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.StandardCommandSet2K_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.StandardCommandSet2K_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.StandardCommandSet2010_string">
            <summary>
            GUID for the Visual Studio 2010 command set. This is a set of new commands added to Visual Studio 2010.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.StandardCommandSet2010_guid">
            <summary>
            GUID for the Visual Studio 2010 command set. This is a set of new commands added to Visual Studio 2010.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.StandardCommandSet11_string">
            <summary>
            GUID for the Visual Studio 11 command set. This is a set of new commands added to Visual Studio 11.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.StandardCommandSet11_guid">
            <summary>
            GUID for the Visual Studio 11 command set. This is a set of new commands added to Visual Studio 11.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.StandardCommandSet12_string">
            <summary>
            GUID for the Visual Studio 12 command set. This is a set of new commands added to Visual Studio 12.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.StandardCommandSet12_guid">
            <summary>
            GUID for the Visual Studio 12 command set. This is a set of new commands added to Visual Studio 12.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.StandardCommandSet14_string">
            <summary>
            GUID for the Visual Studio 14 command set. This is a set of new commands added to Visual Studio 14.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.StandardCommandSet14_guid">
            <summary>
            GUID for the Visual Studio 14 command set. This is a set of new commands added to Visual Studio 14.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.StandardCommandSet15_string">
            <summary>
            GUID for the Visual Studio 15 command set. This is a set of new commands added to Visual Studio 15.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.StandardCommandSet15_guid">
            <summary>
            GUID for the Visual Studio 15 command set. This is a set of new commands added to Visual Studio 15.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.StandardCommandSet16_string">
            <summary>
            GUID for the Visual Studio 16 command set. This is a set of new commands added to Visual Studio 16.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.StandardCommandSet16_guid">
            <summary>
            GUID for the Visual Studio 16 command set. This is a set of new commands added to Visual Studio 16.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.StandardCommandSet17_string">
            <summary>
            GUID for the Visual Studio 17 command set. This is a set of new commands added to Visual Studio 17.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.StandardCommandSet17_guid">
            <summary>
            GUID for the Visual Studio 17 command set. This is a set of new commands added to Visual Studio 17.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.ShellMainMenu_string">
            <summary>
            GUID for the command group representing the shell's main menu.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.ShellMainMenu_guid">
            <summary>
            GUID for the command group representing the shell's main menu.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.UIHierarchyWindowCommandSet_string">
            <summary>Command Group GUID for commands that only apply to the UIHierarchyWindow.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.UIHierarchyWindowCommandSet_guid">
            <summary>Command Group GUID for commands that only apply to the UIHierarchyWindow.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.VsDocOutlinePackageCommandSet_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.VsDocOutlinePackageCommandSet_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.SolutionExplorerPivotList_string">
            <summary>Command Group GUID for commands implemented by the Solution Explorer package.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.SolutionExplorerPivotList_guid">
            <summary>Command Group GUID for commands implemented by the Solution Explorer package.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.CSharpGroup_string">
            <summary>
            GUID for various C# command groups, menus and commands as well as some shared commands (like the refactoring
            commands) that originally were C# only commands.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CMDSETID.CSharpGroup_guid">
            <summary>
            GUID for various C# command groups, menus and commands as well as some shared commands (like the refactoring
            commands) that originally were C# only commands.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.NewDocumentStateReason">
            <summary>
            Well-known reasons used for IVsUIShellOpenDocument3.SetNewDocumentState.
            </summary>
            <devdoc>
            Keep this class in sync with GUIDs defined in vscommon\idl\vsshell*.idl.
            </devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_AppCommand">
            <summary>This GUID identifies commands fired as a resoult of a WM_APPCOMMAND message received by the main window.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_VSStandardCommandSet97">
            <summary>This GUID identifies the standard set of commands known by VisualStudio 97 (version 6).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2K">
            <summary>
            GUID for the 2K command set. This is a set of standard editor commands.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID">
            <summary>
            Set of the standard, shared editor commands in StandardCommandSet2k.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.VSStd2010CmdID">
            <summary>
            Set of the standard, shared commands in CMDSETID.StandardCommandSet2010_guid.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.VSStd11CmdID">
            <summary>
            Set of the standard, shared commands in CMDSETID.StandardCommandSet11_guid.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.VSStd12CmdID">
            <summary>
            Set of the standard, shared commands in CMDSETID.StandardCommandSet12_guid.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.VSStd14CmdID">
            <summary>
            Set of the standard, shared commands in CMDSETID.StandardCommandSet14_guid.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.VSStd15CmdID">
            <summary>
            Set of the standard, shared commands in CMDSETID.StandardCommandSet15_guid.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.VSStd16CmdID">
            <summary>
            Set of the standard, shared commands in the <see cref="F:Microsoft.VisualStudio.VSConstants.CMDSETID.StandardCommandSet16_guid" /> command set.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.VSStd17CmdID">
            <summary>
            Set of the standard, shared commands in the <see cref="F:Microsoft.VisualStudio.VSConstants.CMDSETID.StandardCommandSet17_guid" /> command set.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CEF_CLONEFILE">
            <devdoc>Mutually exclusive w/_OPENFILE.</devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CEF_OPENFILE">
            <devdoc>Mutually exclusive w/_CLONEFILE.</devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CEF_SILENT">
            <devdoc>Editor factory should create editor silently.</devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CEF_OPENASNEW">
            <devdoc>Editor factory should perform necessary fixups.</devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CEF.CloneFile">
            <devdoc>Mutually exclusive w/_OPENFILE.</devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CEF.OpenFile">
            <devdoc>Mutually exclusive w/_CLONEFILE.</devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CEF.Silent">
            <devdoc>Editor factory should create editor silently.</devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CEF.OpenAsNew">
            <devdoc>Editor factory should perform necessary fixups.</devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsUIHierarchyWindowCmds">
            <summary>Command Group GUID for commands that only apply to the UIHierarchyWindow.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds">
            <summary>
            The following commands are special commands that only apply to the UIHierarchyWindow.
            They are defined as part of the command group GUID: CMDSETID.UIHierarchyWindowCommandSet_guid.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds.UIHWCMDID_RightClick">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds.UIHWCMDID_DoubleClick">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds.UIHWCMDID_EnterKey">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds.UIHWCMDID_StartLabelEdit">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds.UIHWCMDID_CommitLabelEdit">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds.UIHWCMDID_CancelLabelEdit">
            <summary></summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.VSSELELEMID">
            <summary>
            These element IDs are the only element IDs that can be used with the selection service.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_UndoManager">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_WindowFrame">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_DocumentFrame">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_StartupProject">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_PropertyBrowserSID">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_UserContext">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_ResultList">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_LastWindowFrame">
            <summary></summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.VsPackageGuid">
             <summary>
            
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsPackageGuid.VsEnvironmentPackage_string">
            <summary>GUID of the HTML Editor package.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsPackageGuid.VsEnvironmentPackage_guid">
            <summary>GUID of the HTML Editor package.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsPackageGuid.HtmlEditorPackage_string">
            <summary>GUID of the HTML Editor package.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsPackageGuid.HtmlEditorPackage_guid">
            <summary>GUID of the HTML Editor package.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsPackageGuid.VsTaskListPackage_string">
            <summary>GUID of the Task &amp; Error List package.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsPackageGuid.VsTaskListPackage_guid">
            <summary>GUID of the Task &amp; Error List package.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsPackageGuid.VsDocOutlinePackage_string">
            <summary>GUID of the Document Outline tool window package.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsPackageGuid.VsDocOutlinePackage_guid">
            <summary>GUID of the Document Outline tool window package.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.VsEditorFactoryGuid">
             <summary>
            
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsEditorFactoryGuid.HtmlEditor_string">
            <summary>GUID of HTML Editor editor factory.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsEditorFactoryGuid.HtmlEditor_guid">
            <summary>GUID of HTML Editor editor factory.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsEditorFactoryGuid.TextEditor_string">
            <summary>GUID of the Source Code (Text) Editor editor factory.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsEditorFactoryGuid.TextEditor_guid">
            <summary>GUID of the Source Code (Text) Editor editor factory.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsEditorFactoryGuid.ExternalEditor_string">
            <summary>Guid for editor factory to launch external (EXE based) editors.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsEditorFactoryGuid.ExternalEditor_guid">
            <summary>Guid for EditorFactory to launch external (EXE based) editors.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsEditorFactoryGuid.ProjectDesignerEditor_string">
            <summary>Guid for Project Properties Designer editor factory.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsEditorFactoryGuid.ProjectDesignerEditor_guid">
            <summary>Guid for Project Properties Designer editor factory.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.VsLanguageServiceGuid">
             <summary>
            
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsLanguageServiceGuid.HtmlLanguageService_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsLanguageServiceGuid.HtmlLanguageService_guid">
            <summary></summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.OutputWindowPaneGuid">
             <summary>
            
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.OutputWindowPaneGuid.BuildOutputPane_string">
            <summary>GUID of the build output pane inside the output window.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.OutputWindowPaneGuid.BuildOutputPane_guid">
            <summary>GUID of the build output pane inside the output window.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.OutputWindowPaneGuid.SortedBuildOutputPane_string">
            <summary>GUID of the sorted build output pane inside the output window.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.OutputWindowPaneGuid.SortedBuildOutputPane_guid">
            <summary>GUID of the sorted build output pane inside the output window.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.OutputWindowPaneGuid.DebugPane_string">
            <summary>GUID of the debug pane inside the output window.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.OutputWindowPaneGuid.DebugPane_guid">
            <summary>GUID of the debug pane inside the output window.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.OutputWindowPaneGuid.GeneralPane_string">
            <summary>GUID of the general output pane inside the output window.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.OutputWindowPaneGuid.GeneralPane_guid">
            <summary>GUID of the general output pane inside the output window.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.OutputWindowPaneGuid.StoreValidationPane_string">
            <summary>GUID of the Store Validation output pane inside the output window.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.OutputWindowPaneGuid.StoreValidationPane_guid">
            <summary>GUID of the Store Validation output pane inside the output window.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.ItemTypeGuid">
            <summary>
            These values are used with the VSHPROPID_ItemType property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.ItemTypeGuid.PhysicalFile_string">
            <summary>Physical file on disk or web (IVsProject::GetMkDocument returns a file path).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.ItemTypeGuid.PhysicalFile_guid">
            <summary>Physical file on disk or web (IVsProject::GetMkDocument returns a file path).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.ItemTypeGuid.PhysicalFolder_string">
            <summary>Physical folder on disk or web (IVsProject::GetMkDocument returns a directory path).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.ItemTypeGuid.PhysicalFolder_guid">
            <summary>Physical folder on disk or web (IVsProject::GetMkDocument returns a directory path).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.ItemTypeGuid.VirtualFolder_string">
            <summary>Non-physical folder (folder is logical and not a physical file system directory).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.ItemTypeGuid.VirtualFolder_guid">
            <summary>Non-physical folder (folder is logical and not a physical file system directory).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.ItemTypeGuid.SubProject_string">
            <summary>Nested or Sub Project.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.ItemTypeGuid.SubProject_guid">
            <summary>Nested or Sub Project.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.ItemTypeGuid.SharedProjectReference_string">
            <summary>SharedProjectReference item (normally child of "References" folder).</summary>
            <remarks>
            SharedProjectReference items represent imported shared MSBuild project files (e.g. *.projitems file).
            Normally these shared MSBuild project files are "owned" by a particular Shared Project
            (aka Shared Assets Project) loaded in the Solution.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.ItemTypeGuid.SharedProjectReference_guid">
            <summary>SharedProjectReference item (normally child of "References" folder).</summary>
            <remarks>
            SharedProjectReference items represent imported shared MSBuild project files (e.g. *.projitems file).
            Normally these shared MSBuild project files are "owned" by a particular Shared Project
            (aka Shared Assets Project) loaded in the Solution.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.VsDependencyTypeGuid">
             <summary>
            
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsDependencyTypeGuid.BuildProject_string">
            <summary>Build project dependency (used with IVsDependency::get_Type).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsDependencyTypeGuid.BuildProject_guid">
            <summary>Build project dependency (used with IVsDependency::get_Type).</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.VsEditorUserDataGuid">
            <summary>
            These are optional general editor settings that can be used to customize editor behaviors.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsEditorUserDataGuid.EditorDpiContext_string">
            <summary>uint: Sets the DPI context in which the editor instance should be created. Valid values for this setting come from <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDPIMODE" />.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsEditorUserDataGuid.EditorDpiContext_guid">
            <summary>uint: Sets the DPI context in which the editor instance should be created. Valid values for this setting come from <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDPIMODE" />.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.VsLanguageUserDataGuid">
            <summary>
            These are optional IVsUserData properties that a Language Service may provide in order to influence
            the behavior of the Source Code (Text) Editor. The IVsUserData interface is retrieved by
            QueryInterface on the IVsLanguageInfo object of the Language Service implementation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsLanguageUserDataGuid.SupportCF_HTML_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsLanguageUserDataGuid.SupportCF_HTML_guid">
            <summary></summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid">
            <summary>
            These are IVsUserData properties that are supported by the TextBuffer (DocData) object
            of the Source Code (Text) Editor. The IVsUserData interface is retrieved by
            QueryInterface on the IVsTextLines object of the Text Editor.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferMoniker_string">
            <summary>string: Moniker of document loaded in the buffer. It will be the full path of file if the document is a file.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferMoniker_guid">
            <summary>string: Moniker of document loaded in the TextBuffer. It will be the full path of file if the document is a file.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferIsDiskFile_string">
            <summary>bool: true if buffer is a file on disk.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferIsDiskFile_guid">
            <summary>bool: true if buffer is a file on disk.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferEncodingVSTFF_string">
            <summary>uint: VS Text File Format (VSTFF) for buffer. codepage = bufferVSTFF &amp; __VSTFF.VSTFF_CPMASK; vstffFlags = bufferVSTFF &amp; __VSTFF.VSTFF_FLAGSMASK;.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferEncodingVSTFF_guid">
            <summary>uint: VS Text File Format (VSTFF) for buffer. codepage = bufferVSTFF &amp; __VSTFF.VSTFF_CPMASK; vstffFlags = bufferVSTFF &amp; __VSTFF.VSTFF_FLAGSMASK;.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferEncodingPromptOnLoad_string">
            <summary>uint: This should only be used by editor factories that want to specify a codepage on loading from the openwith dialog.
            This data is only for a set purpose.  You cannot get the value of this back.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferEncodingPromptOnLoad_guid">
            <summary>uint: This should only be used by editor factories that want to specify a codepage on loading from the openwith dialog.
            This data is only for a set purpose.  You cannot get the value of this back.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferDetectCharSet_string">
            <summary>bool: If true and the current BufferEncoding is CHARFMT_MBCS, the buffer will runs it's HTML charset tag detection code to determine a codepage to load and save the file. The detected codepage overrides any codepage set in CHARFMT_MBCS.
            This is forced on in the buffer's IPersistFileFormat::LoadDocData when it sees an HTML type of file, according to the extension mapping in "$RootKey$\Languages\File Extensions".
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferDetectCharSet_guid">
            <summary>bool: If true and the current BufferEncoding is CHARFMT_MBCS, the buffer will runs it's HTML charset tag detection code to determine a codepage to load and save the file. The detected codepage overrides any codepage set in CHARFMT_MBCS.
            This is forced on in the buffer's IPersistFileFormat::LoadDocData when it sees an HTML type of file, according to the extension mapping in "$RootKey$\Languages\File Extensions".
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferDetectLangSID_string">
            <summary>bool: (default = true) If true then a change to the buffer's moniker will cause the buffer to change the language service
            based on the file extension of the moniker.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferDetectLangSID_guid">
            <summary>bool: (default = true) If true then a change to the buffer's moniker will cause the buffer to change the language service
            based on the file extension of the moniker.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.PropertyBrowserSID_string">
            <summary>string: This property will be used to set the SEID_PropertyBrowserSID element of the selection for text views.
            This is only used if you have a custom property browser. If this property is not set, the standard property browser
            will be associated with the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.PropertyBrowserSID_guid">
            <summary>string: This property will be used to set the SEID_PropertyBrowserSID element of the selection for text views.
            This is only used if you have a custom property browser. If this property is not set, the standard property browser
            will be associated with the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.UserReadOnlyErrorString_string">
            <summary>string: This property provides a specific error message for when the buffer originates the BUFFER_E_READONLY error.
            Set this string to be the (localized) text you want displayed to the user.  Note that the buffer itself does not
            put up UI, but only calls IVsUIShell::SetErrorInfo. The caller can decide whether to show the message to the user.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.UserReadOnlyErrorString_guid">
            <summary>string: This property provides a specific error message for when the buffer originates the BUFFER_E_READONLY error.
            Set this string to be the (localized) text you want displayed to the user.  Note that the buffer itself does not
            put up UI, but only calls IVsUIShell::SetErrorInfo. The caller can decide whether to show the message to the user.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.BufferStorage_string">
            <summary>object: This property is used to get access to the buffer's storage object.
            The returned pointer can be QI'd for IVsTextStorage and IVsPersistentTextImage.
            This is a get-only property. To set the storage, use the buffer's InitializeContentEx method.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.BufferStorage_guid">
            <summary>object: This property is used to get access to the buffer's storage object.
            The returned pointer can be QI'd for IVsTextStorage and IVsPersistentTextImage.
            This is a get-only property. To set the storage, use the buffer's InitializeContentEx method.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferExtraFiles_string">
            <summary>object: Use this property if the file opened in the buffer is associated with list of extra files under source code control (SCC).
            Set this property with an implementation of IVsBufferExtraFiles in order to control how the buffer handles SCC operations.
            The IVsBufferExtraFiles object set will determine what files are checked out from Source Code Control (SCC) when edits are made to the buffer.
            This property controls the behavior of IVsTextManager2::AttemptToCheckOutBufferFromScc3 and GetBufferSccStatus3 as well as which
            files are passed by the buffer when it calls IVsQueryEditQuerySave2 methods.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferExtraFiles_guid">
            <summary>object: Use this property if the file opened in the buffer is associated with list of extra files under source code control (SCC).
            Set this property with an implementation of IVsBufferExtraFiles in order to control how the buffer handles SCC operations.
            The IVsBufferExtraFiles object set will determine what files are checked out from Source Code Control (SCC) when edits are made to the buffer.
            This property controls the behavior of IVsTextManager2::AttemptToCheckOutBufferFromScc3 and GetBufferSccStatus3 as well as which
            files are passed by the buffer when it calls IVsQueryEditQuerySave2 methods.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferFileReload_string">
            <summary>bool:. </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferFileReload_guid">
            <summary>bool:. </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsInitEncodingDialogFromUserData_string">
            <summary>bool:. </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsInitEncodingDialogFromUserData_guid">
            <summary>bool:. </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferContentType_string">
            <summary>string: The ContentType for the text buffer.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsBufferContentType_guid">
            <summary>string: The ContentType for the text buffer.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsTextViewRoles_string">
            <summary>string: The comma-separated list of text view roles for the text view.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTextBufferUserDataGuid.VsTextViewRoles_guid">
            <summary>string: The comma-separated list of text view roles for the text view.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.DocumentMetadataUserDataGuid">
            <summary>
            These are IVsUserData properties that are supported by DocData objects that provide
            additional metadata such as snapshot version.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.DocumentMetadataUserDataGuid.Version_string">
            <summary>Version of the document at the time of call being made, returned type will be converted to string and should be parseable back to original type.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.DocumentMetadataUserDataGuid.Version_guid">
            <inheritdoc cref="F:Microsoft.VisualStudio.VSConstants.DocumentMetadataUserDataGuid.Version_string" />
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.EditPropyCategoryGuid">
            <summary>
            Known editor property categories use with IVsTextEditorPropertyCategoryContainer interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.EditPropyCategoryGuid.TextManagerGlobal_string">
            <summary>GUID for text manager global properties.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.EditPropyCategoryGuid.TextManagerGlobal_guid">
            <summary>GUID for text manager global properties.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.EditPropyCategoryGuid.ViewMasterSettings_string">
            <summary>GUID for view properties that override everything -- Tools.Options *and* user commands.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.EditPropyCategoryGuid.ViewMasterSettings_guid">
            <summary>GUID for view properties that override everything -- Tools.Options *and* user commands.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.CATID">
            <summary>
            These CATID Guids are used to extend objects passed to the property browser and automation objects that support
            Automation Extenders.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CATID.CSharpFileProperties_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CATID.CSharpFolderProperties_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CATID.ProjectAutomationObject_string">
            <summary>This CATID is used to extend EnvDTE.Project automation objects for project types that support it (including VB and C# projects).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CATID.ProjectAutomationObject_guid">
            <summary>This CATID is used to extend EnvDTE.Project automation objects for project types that support it (including VB and C# projects).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CATID.ProjectItemAutomationObject_string">
            <summary>This CATID is used to extend EnvDTE.ProjectItem automation objects for project types that support it (including VB and C# projects).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CATID.ProjectItemAutomationObject_guid">
            <summary>This CATID is used to extend EnvDTE.ProjectItem automation objects for project types that support it (including VB and C# projects).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VBAFileProperties_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VBAFolderProperties_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VBFileProperties_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VBFolderProperties_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VBProjectProperties_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VBReferenceProperties_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VCProjectNode_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VCFileGroup_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VCFileNode_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VCAssemblyReferenceNode_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VCProjectReferenceNode_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VCActiveXReferenceNode_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CATID.VCReferences_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID_HtmDocData">
            <summary>The document's data is HTML.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID_HtmedPackage">
            <summary>GUID of the HTML package.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID_HtmlLanguageService">
            <summary>GUID of the HTML language service.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_HtmlEditorFactory">
            <summary>GUID of the HTML editor factory.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_TextEditorFactory">
            <summary>GUID of the Text editor factory.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_HTMEDAllowExistingDocData">
            <summary>GUID used to mark a TextBuffer in order to tell to the HTML editor factory to accept preexisting doc data.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID_VsEnvironmentPackage">
            <summary>GUID for the environment package.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsNewProjectPseudoFolder">
            <summary>GUID for the "Visual Studio" pseudo folder in the registry.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID_MiscellaneousFilesProject">
            <summary>GUID for the "Miscellaneous Files" project.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID_SolutionItemsProject">
            <summary>GUID for Solution Items project.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.SID_SVsGeneralOutputWindowPane">
            <summary>Pseudo service that returns a IID_IVsOutputWindowPane interface of the General output pane in the VS environment.
            Querying for this service will cause the General output pane to be created if it hasn't yet been created.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.SID_SUIHostCommandDispatcher">
            <summary>
            SUIHostCommandDispatcher service returns an object that implements IOleCommandTarget.
            This object handles command routing for the Environment. Use this service if you need to
            route a command based on the current selection/state of the Environment.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID_VsUIHierarchyWindow">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_DefaultEditor">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_ExternalEditor">
            <summary></summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.CLSID">
             <summary>
            
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.MiscellaneousFilesProject_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.MiscellaneousFilesProject_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.SolutionFolderProject_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.SolutionFolderProject_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.SolutionItemsProject_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.SolutionItemsProject_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsTextBuffer_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsTextBuffer_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.UnloadedProject_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.UnloadedProject_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsCfgProviderEventsHelper_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsCfgProviderEventsHelper_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsEnvironmentPackage_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsEnvironmentPackage_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsTaskListPackage_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsTaskListPackage_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsUIWpfLoader_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsUIWpfLoader_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsSearchQueryParser_string">
            <summary>The guid of the CLSID_VsSearchQueryParser object implementing IVsSearchQueryParser interface.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsSearchQueryParser_guid">
            <summary>The guid of the CLSID_VsSearchQueryParser object implementing IVsSearchQueryParser interface.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.HtmDocData_string">
            <summary>DocData object of the HTML Editor.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.HtmDocData_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsUIHierarchyWindow_string">
            <summary>CLSID of the UIHierarchy window tree control object.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsUIHierarchyWindow_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsTaskList_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID.VsTaskList_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_BuildOutputWindowPane">
            <summary>GUID of the build pane inside the output window.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_OutWindowDebugPane">
            <summary>GUID of the debug pane inside the output window.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_OutWindowGeneralPane">
            <summary>GUID of the general output pane inside the output window.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_ItemType_PhysicalFile">
            <summary>Physical file on disk or web (IVsProject::GetMkDocument returns a file path).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_ItemType_PhysicalFolder">
            <summary>Physical folder on disk or web (IVsProject::GetMkDocument returns a directory path).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_ItemType_VirtualFolder">
            <summary>Non-physical folder (folder is logical and not a physical file system directory).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_ItemType_SubProject">
            <summary>A nested hierarchy project.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_BrowseFilePage">
            <summary>The BrowseFile page.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_ItemType_SharedProjectReference">
            <summary>SharedProjectReference item (normally child of "References" folder).</summary>
            <remarks>
            SharedProjectReference items represent imported shared MSBuild project files (e.g. *.projitems file).
            Normally these shared MSBuild project files are "owned" by a particular Shared Project
            (aka Shared Assets Project) loaded in the Solution.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids">
             <summary>
            
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids.ManagedOnly_guid">
            <summary>The guid of the Debugger Engine for Managed code.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids.ManagedOnlyEngineV2_guid">
            <summary>The guid of the Debugger Engine for managed (v3.5, v3.0, v2.0).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids.ManagedOnlyEngineV4_guid">
            <summary>The guid of the Debugger Engine for managed (v4.5, v4.0).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids.CoreSystemClr_guid">
            <summary>The guid of the Debugger engine for managed (Core).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids.COMPlusLegacyEngine_guid">
            <summary>The guid of the Legacy Debugger Engine (CPDE).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.DebugEnginesGuids.COMPlusNewArchEngine_guid">
            <summary>The guid of the New Debugger Engine (Concord).</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.DebugPortSupplierGuids">
            <summary>
            Debugger Port Supplier Guids for the VsDebugTargetInfo* structures and IVsDebugRemoteDiscoveryUI interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.DebugPortSupplierGuids.NoAuth_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_ProjectDesignerEditor">
            <summary>The project designer guid.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.ProjectTargets">
            <summary>
            Known project target platfoms.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.SetupDrivers">
            <summary>
            Known project retargeting setup drivers
            For installing missing components.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_SolutionBuilding">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_Debugging">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_Dragging">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_FullScreenMode">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_DesignMode">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_NoSolution">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_SolutionExists">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_EmptySolution">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_SolutionHasSingleProject">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_SolutionHasMultipleProjects">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_CodeWindow">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_SolutionHasAppContainerProject">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UIContext_SolutionClosing">
            <summary></summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.UICONTEXT">
             <summary>
            
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.RESXEditor_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.RESXEditor_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SettingsDesigner_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SettingsDesigner_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.PropertyPageDesigner_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.PropertyPageDesigner_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.ApplicationDesigner_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.ApplicationDesigner_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBProjOpened_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBProjOpened_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.CodeWindow_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.CodeWindow_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.DataSourceWindowAutoVisible_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.DataSourceWindowAutoVisible_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.DataSourceWizardSuppressed_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.DataSourceWizardSuppressed_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.DataSourceWindowSupported_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.DataSourceWindowSupported_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.Debugging_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.Debugging_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.DesignMode_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.DesignMode_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.Dragging_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.Dragging_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.EmptySolution_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.EmptySolution_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.FirstLaunchSetup_string">
            <summary>
            Indicates that the first launch after setup is in progress. Packages may use
            ProvideAutoLoad with this UIContext in order to perform expensive one-time per-user
            initialization. Note that during FirstLaunchSetup many services are unavailable
            and a package may NOT display any UI. FirstLaunchSetup is not guaranteed to be
            called; it is just an opportunity for packages to build caches.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.FirstLaunchSetup_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.FullScreenMode_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.FullScreenMode_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.MinimalMode_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.MinimalMode_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.MainToolBarVisible_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.MainToolBarVisible_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.MainToolBarInvisible_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.MainToolBarInvisible_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.HistoricalDebugging_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.HistoricalDebugging_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.CloudDebugging_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.CloudDebugging_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.NoSolution_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.NoSolution_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionClosing_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionClosing_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.NotBuildingAndNotDebugging_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.NotBuildingAndNotDebugging_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.OsWindows8OrHigher_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.OsWindows8OrHigher_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.ToolboxVisible_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.ToolboxVisible_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.ProjectRetargeting_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.ProjectRetargeting_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.RepositoryOpen_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.RepositoryOpen_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionBuilding_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionBuilding_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionExists_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionExists_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionExistsAndFullyLoaded_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionExistsAndFullyLoaded_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionExistsAndNotBuildingAndNotDebugging_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionExistsAndNotBuildingAndNotDebugging_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionHasMultipleProjects_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionHasMultipleProjects_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionHasSingleProject_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionHasSingleProject_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionHasAppContainerProject_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionHasAppContainerProject_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionOpening_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionOpening_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.FullSolutionLoading_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.FullSolutionLoading_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.BulkFileOperation_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.BulkFileOperation_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionOrProjectUpgrading_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionOrProjectUpgrading_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.ProjectCreating_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.ProjectCreating_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.ToolboxInitialized_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.ToolboxInitialized_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.ToolboxChooseItemsDataSourceInitialized_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.ToolboxChooseItemsDataSourceInitialized_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.UnifiedSettingsActive_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.UnifiedSettingsActive_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBProject_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBProject_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.CSharpProject_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.CSharpProject_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VCProject_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VCProject_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.FSharpProject_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.FSharpProject_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeAttribute_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeAttribute_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeClass_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeClass_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeDelegate_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeDelegate_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeEnum_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeEnum_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeFunction_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeFunction_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeInterface_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeInterface_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeNamespace_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeNamespace_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeParameter_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeParameter_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeProperty_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeProperty_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeStruct_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeStruct_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeVariable_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.VBCodeVariable_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.BackgroundProjectLoad_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.BackgroundProjectLoad_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.StandardPreviewerConfigurationChanging_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.StandardPreviewerConfigurationChanging_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.IdeUserSignedIn_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.IdeUserSignedIn_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionHasSilverlightWindowsPhoneProject_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.WizardOpen_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.WizardOpen_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SolutionHasWindowsPhone80NativeProject_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SynchronousSolutionOperation_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SynchronousSolutionOperation_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SharedMSBuildFilesManagerHierarchyLoaded_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.SharedMSBuildFilesManagerHierarchyLoaded_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.ShellInitialized_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.ShellInitialized_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.FolderOpened_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.FolderOpened_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.DocumentWindowActive_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.DocumentWindowActive_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.ToolWindowActive_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.ToolWindowActive_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.CloudEnvironmentConnected_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.CloudEnvironmentConnected_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.OutputWindowCreated_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.OutputWindowCreated_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.XamlDesignerContext_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.XamlDesignerContext_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.DevDriveSupported_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.DevDriveSupported_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.DevDriveMounted_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT.DevDriveMounted_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewAll">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewUserTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewShortcutTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewHTMLTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewCompilerTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewCommentTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewCurrentFileTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewCheckedTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewUncheckedTasks">
            <summary></summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.VsTaskListView">
             <summary>
            
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTaskListView.All">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTaskListView.UserTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTaskListView.ShortcutTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTaskListView.HTMLTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTaskListView.CompilerTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTaskListView.CommentTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTaskListView.CurrentFileTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTaskListView.CheckedTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VsTaskListView.UncheckedTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID_VsTaskList">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID_VsTaskListPackage">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.SID_SVsToolboxActiveXDataProvider">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID_VsDocOutlinePackage">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CLSID_VsCfgProviderEventsHelper">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.Autos">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.Behaviors">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.Bookmarks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.Breakpoints">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.CSSApplyStyles">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.CSSManageStyles">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.CSSProperties">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.CSSPropertyGrid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.CallBrowser">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.CallBrowserSecondary">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.CallHierarchy">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.CallStack">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.ClassDetails">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.ClassView">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.CodeCoverageResults">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.CodeDefinition">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.CodeMetrics">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.ColorPalette">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.Command">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.ConditionalFormatting">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.ConsoleIO">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.DBProEventMonitor">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.DataCollectionControl">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.DataGenerationDetails">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.DataGenerationPreview">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.DataSource">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.DatabaseSchemaView">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.DebugHistory">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.DeviceSecurityManager">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.Disassembly">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.DocumentOutline">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.EntityMappingDetails">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.EntityModelBrowser">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.ErrorList">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.Find1">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.Find2">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.FindInFiles">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.FindReplace">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.FindSymbol">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.FindSymbolResults">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.HTMLPropertyGrid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.Immediate">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.Layers">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.LoadTest">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.LoadTestPostRun">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.LocalChanges">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.Locals">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.MacroExplorer">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.ManualTestExecution">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.Modules">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.ObjectBrowser">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.ObjectTestBench">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.Output_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.ParallelStacks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.ParallelTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.PendingCheckIn">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.PerformanceExplorer">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.Processes">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.Properties">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.PropertyManager">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.Registers">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.ResourceView">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.RunningDocuments">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.SQLSchemaUpdateScript">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.ServerExplorer">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.SolutionExplorer">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.SourceControlExplorer">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.SourceHistory">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.StartPage">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.StyleOrganizer">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.TaskList">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.TeamExplorer">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.TestImpactView">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.TestManager">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.TestResults">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.TestRunQueue">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.TestView">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.Threads">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.Toolbox">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.UAMSynchronizations">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.UserNotifications">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.VCPPPropertyManager">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.VSMDPropertyBrowser">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.VSTOAddBookmark">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.Watch">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.WebBrowser">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.WebBrowserPreview">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.WebPartGallery">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StandardToolWindows.XMLSchemaExplorer">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_COMPlusPage">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_COMClassicPage">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.GUID_SolutionPage">
            <summary></summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.ComponentSelectorPageGuid">
             <summary>
            
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.ComponentSelectorPageGuid.ManagedAssemblyPage_string">
            <summary>.Net managed assembly page (used with SVsComponentSelectorDlg -- Add Reference dialog).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.ComponentSelectorPageGuid.COMPage_string">
            <summary>COM object page (used with SVsComponentSelectorDlg -- Add Reference dialog).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.ComponentSelectorPageGuid.ProjectsPage_string">
            <summary>Projects page (used with SVsComponentSelectorDlg -- Add Reference dialog).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Any">
            <summary>Kind of view for document or data: Any defined view.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Primary">
            <summary>Kind of view for document or data: Primary (default) view.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Debugging">
            <summary>Kind of view for document or data: Debugger view.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Code">
            <summary>Kind of view for document or data: Code editor view.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Designer">
            <summary>Kind of view for document or data: Designer view.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView">
            <summary>Kind of view for document or data: Text editor view.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_UserChooseView">
            <summary>Kind of view for document or data: A user defined view.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.LOGVIEWID">
             <summary>
            
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.Any_string">
            <summary>Kind of view for document or data: Any defined view.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.Any_guid">
            <summary>Kind of view for document or data: Any defined view.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.Code_string">
            <summary>Kind of view for document or data: Code editor view.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.Code_guid">
            <summary>Kind of view for document or data: Code editor view.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.Debugging_string">
            <summary>Kind of view for document or data: Debugger view.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.Debugging_guid">
            <summary>Kind of view for document or data: Debugger view.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.Designer_string">
            <summary>Kind of view for document or data: Designer view.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.Designer_guid">
            <summary>Kind of view for document or data: Designer view.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.ProjectSpecificEditor_string">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.ProjectSpecificEditor_guid">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.Primary_guid">
            <summary>Kind of view for document or data: Primary (default) view.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.TextView_string">
            <summary>Kind of view for document or data: Text editor view.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.TextView_guid">
            <summary>Kind of view for document or data: Text editor view.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.UserChooseView_string">
            <summary>Kind of view for document or data: A user defined view.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID.UserChooseView_guid">
            <summary>Kind of view for document or data: A user defined view.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.StandardNavigateToFilterShortcuts">
            <summary>
            Standard filter shortcut names for the Navigate To feature.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.StandardNavigateToKindFilters">
            <summary>
            Standard filter names for item kinds for the Navigate To feature.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.StandardNavigateToDocumentScopeFilters">
            <summary>
            Standard filter names for document scopes for the Navigate To feature.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL">
            <summary>Special items inside a VsHierarchy: no node.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT">
            <summary>Special items inside a VsHierarchy: the hierarchy itself.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION">
            <summary>Special items inside a VsHierarchy: all the currently selected items.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VSITEMID.Nil">
            <summary>Special items inside a VsHierarchy: no node.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VSITEMID.Root">
            <summary>Special items inside a VsHierarchy: the hierarchy itself.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VSITEMID.Selection">
            <summary>Special items inside a VsHierarchy: all the currently selected items.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VSCOOKIE_NIL">
            <summary>Special value for a cookie (e.g. returned from IVsRunningDocumentTable.FindAndLockDocument): no cookie.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UndoManager">
            <summary>IVsSelectionEvents.OnElementValueChanged flag: The undo manager.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.WindowFrame">
            <summary>IVsSelectionEvents.OnElementValueChanged flag: A window frame.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.DocumentFrame">
            <summary>IVsSelectionEvents.OnElementValueChanged flag: A document frame.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.StartupProject">
            <summary>IVsSelectionEvents.OnElementValueChanged flag: The startup project.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.PropertyBrowserSID">
            <summary>IVsSelectionEvents.OnElementValueChanged flag: The property borowser.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UserContext">
            <summary>IVsSelectionEvents.OnElementValueChanged flag: A user context.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.SelectionElement.UndoManager">
            <summary>IVsSelectionEvents.OnElementValueChanged flag: The undo manager.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.SelectionElement.WindowFrame">
            <summary>IVsSelectionEvents.OnElementValueChanged flag: A window frame.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.SelectionElement.DocumentFrame">
            <summary>IVsSelectionEvents.OnElementValueChanged flag: A document frame.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.SelectionElement.StartupProject">
            <summary>IVsSelectionEvents.OnElementValueChanged flag: The startup project.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.SelectionElement.PropertyBrowserSID">
            <summary>IVsSelectionEvents.OnElementValueChanged flag: The property borowser.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.SelectionElement.UserContext">
            <summary>IVsSelectionEvents.OnElementValueChanged flag: A user context.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.SelectionElement.ResultList">
            <summary>IVsSelectionEvents.OnElementValueChanged flag: The current result list.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.SelectionElement.LastWindowFrame">
            <summary>IVsSelectionEvents.OnElementValueChanged flag: The most recently deactivated frame.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_PROJECTALREADYEXISTS">
            <summary>VS specific error HRESULT for "Project already exists".</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_PACKAGENOTLOADED">
            <summary>VS specific error HRESULT for "Package not loaded".</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_PROJECTNOTLOADED">
            <summary>VS specific error HRESULT for "Project not loaded".</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_SOLUTIONNOTOPEN">
            <summary>VS specific error HRESULT for "Solution not open".</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_SOLUTIONALREADYOPEN">
            <summary>VS specific error HRESULT for "Solution already open".</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_PROJECTMIGRATIONFAILED">
            <summary>VS specific error HRESULT for "Project configuration failed".</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_INCOMPATIBLEDOCDATA">
            <summary>VS specific error HRESULT for "Incompatible document data".</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_UNSUPPORTEDFORMAT">
            <summary>VS specific error HRESULT for "Unsupported format".</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_WIZARDBACKBUTTONPRESS">
            <summary>VS specific error HRESULT for "Wizard back button pressed".</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_EDITORDISABLED">
            <summary>VS specific error HRESULT for "Editor disabled".</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VS_S_PROJECTFORWARDED">
            <summary>VS specific success HRESULT for "Project forwarded".</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VS_S_TBXMARKER">
            <summary>VS specific success HRESULT for "Toolbox marker".</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_INCOMPATIBLEPROJECT">
            <summary>VS Specific error HRESULT for a project not supported by current edition of the product.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_INCOMPATIBLECLASSICPROJECT">
            <summary>VS Specific error HRESULT for a non-Windows Store app project, which is not supported by the VS Express SKU.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_INCOMPATIBLEPROJECT_UNSUPPORTED_OS">
            <summary>VS Specific error HRESULT for a project not supported in the current OS version,
            for example Windows Store app projects require Windows 8 or higher.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_PROMPTREQUIRED">
            <summary>
            VS specific error HRESULT code returned when an attempt to do a save using RDTSAVEOPT_SileSave fails because
            source control requires a UI prompt in order to make the file to be saved editable.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_CIRCULARTASKDEPENDENCY">
            <summary>
            VS specific error HRESULT code returned when an attempt to do a task wait operation would result in a
            deadlock due to circular dependency.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VS_S_PROJECT_SAFEREPAIRREQUIRED">
            <summary>
            VS specific success HRESULT returned when a safe-repair is required. A safe-repair is one which is not a real full upgrade but merely a repair to make
            the project asset compatible without the risk of issues being encountered by the previous versions of the product.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VS_S_PROJECT_UNSAFEREPAIRREQUIRED">
            <summary>
            VS specific success HRESULT returned when an unsafe-repair is required. An usafe-repair is one which is not a full upgrade, but with a risk of
            issues being encountered by the newer or previous version of the product. For example if a newer dependent SDK is not currently installed.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VS_S_PROJECT_ONEWAYUPGRADEREQUIRED">
            <summary>VS specific success HRESULT returned when a one-way upgrade is required. A one-way upgrade is a full upgrade which will make the project incompatible
            with the previous version of the product.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VS_S_INCOMPATIBLEPROJECT">
            <summary>VS specific success HRESULT returned when a project is not supported by current edition of the product.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_BUSY">
            <summary>
            VS specific error HRESULT returned by interfaces to asynchronous behavior when the
            object in question in already busy.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_SPECIFYING_OUTPUT_UNSUPPORTED">
            <summary>
            Is returned by build interfaces that have parameters for specifying an array of IVsOutput's
            but the implementation can only apply the method to all outputs.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.S_FALSE">
            <summary>HRESULT for FALSE (not an error).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.S_OK">
            <summary>HRESULT for generic success.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.UNDO_E_CLIENTABORT">
            <summary>Error HRESULT for a client abort.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.E_OUTOFMEMORY">
            <summary>Error HRESULT for out of memory.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.E_INVALIDARG">
            <summary>Error HRESULT for an invalid argument.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.E_FAIL">
            <summary>Error HRESULT for a generic failure.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.E_NOINTERFACE">
            <summary>Error HRESULT for the request of a not implemented interface.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL">
            <summary>Error HRESULT for the call to a not implemented method.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.E_UNEXPECTED">
            <summary>Error HRESULT for an unexpected condition.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.E_POINTER">
            <summary>Error HRESULT for a null or invalid pointer.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.E_HANDLE">
            <summary>Error HRESULT for an invalid HANDLE.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.E_ABORT">
            <summary>Error HRESULT for an abort.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.E_ACCESSDENIED">
            <summary>Error HRESULT for an access denied.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.E_PENDING">
            <summary>Error HRESULT for a pending condition.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VSM_TOOLBARMETRICSCHANGE">
            <summary>Toolbar metrics changed.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VSM_ENTERMODAL">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VSM_EXITMODAL">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VSM_VIRTUALMEMORYLOW">
            <summary>
            Message broadcast via IVsBroadcastMessageEvents::OnBroadcastMessage to indicate that the application is running
            low on available virtual memory. The wParam contains the available virtual memory in bytes. This message
            will be broadcast once per minute for as long as the low memory condition persists.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VSM_VIRTUALMEMORYCRITICAL">
            <summary>
            Message broadcast via IVsBroadcastMessageEvents::OnBroadcastMessage to indicate that the application is running
            critically low on available virtual memory. The wParam contains the available virtual memory in bytes. This
            message will be broadcast once per minute for as long as the critical memory condition persists.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VSM_MEMORYHIGH">
            <summary>
            Message broadcast via IVsBroadcastMessageEvents::OnBroadcastMessage to indicate that the application is using lots of memory
            The wParam contains the current pagefileusage in bytes. This message will be broadcast when memory usage degrades from OK to high.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.VSM_MEMORYEXCESSIVE">
            <summary>
            Message broadcast via IVsBroadcastMessageEvents::OnBroadcastMessage to indicate that the application is using an excessive amount of memory
            The wParam contains the pagefileusage in bytes. This message will be broadcast when memory usage degrades from OK/high to excessive.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CPDN_SELCHANGED">
            <summary>Inform of selection change on page.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CPDN_SELDBLCLICK">
            <summary>Inform of doubld-click on selected item on page.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CPPM_INITIALIZELIST">
            <summary>Initialize list of available components.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CPPM_QUERYCANSELECT">
            <summary>Determine whether Select button should be enabled.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CPPM_GETSELECTION">
            <summary>Retrieve information about selection.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CPPM_INITIALIZETAB">
            <summary>Initialize tab with VARIANT in VSCOMPONENTSELECTORTABINIT.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CPPM_SETMULTISELECT">
            <summary>Set multiple-selection mode for picker.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.CPPM_CLEARSELECTION">
            <summary>Reset and clear selection in list of available components.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSConstants.MessageBoxResult">
            <summary>
            Result codes from IVsUIShell.ShowMessageBox.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.MruList.Projects">
            <summary>
            Guid used for accessing the project MRU list through the IVsMRUItemsStore interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.MruList.Files">
            <summary>
            Guid used for accessing the file MRU list through the IVsMRUItemsStore interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.MruList.SolutionFiles">
            <summary>
            Guid used for accessing the solution file MRU list through the IVsMRUItemsStore interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.DOCDATAEXISTING_UNKNOWN">
            <summary>
            A special docdata pointer value to pass in to methods like OpenSpecificEditor and OpenStandardEditor.
            This value indicates that the method should try retrieving the existing docdata from the RDT.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VSConstants.WellKnownWindowReferences.DocumentWell">
            <summary>
            The document well.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Win32Methods.SetParent(System.IntPtr,System.IntPtr)">
            <summary>
            Changes the parent window of the specified child window.
            </summary>
            <param name="hWnd">Handle to the child window.</param>
            <param name="hWndParent">Handle to the new parent window. If this parameter is NULL, the desktop window becomes the new parent window.</param>
            <returns>A handle to the previous parent window indicates success. NULL indicates failure.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.DirectionalDropArea">
             <summary>
             Determines which areas are supported as drop targets
             by items implementing IDragDropTargetPattern.
            
             NOTE: The values in this enumeration correspond to the values.
             of the Microsoft.VisualStudio.Shell.Interop.__HierarchyDropArea enumeration.
             Changes here should have corresponding changes in __HierarchyDropArea.
             </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.DirectionalDropArea.None">
            <summary>
            Dropping on the item is not supported.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.DirectionalDropArea.On">
            <summary>
            Dropping on the item is supported.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.DirectionalDropArea.Above">
            <summary>
            Dropping above the item is supported.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.DirectionalDropArea.Below">
            <summary>
            Dropping below the item is supported.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IBatchInitializationScopeProvider">
             <summary>
             Represents an extension point that can provide optimized behavior in a scope
             where many items are being initialized.  For example, if many items are initialized
             as part of a transaction, but each individual item is unaware of the larger scope,
             this scope can be used to control that transaction while the initialization is happening.
            
             IBatchInitializationScopeProviders are consumed by an implementation of IRelationshipService
             as part of its CreateBatchInitializationScope logic.
             </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IBrowsablePattern">
            <summary>
            Represents an object that supports returning a browse object.  Browse objects
            are used by UI like the Properties window to expose additional property information
            about an object.  A browse object itself has no contract beyond IDispatch-style
            member discoverability.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IBrowsablePattern.GetBrowseObject">
            <summary>
            Gets the browse object associated with the browsable object.
            </summary>
            <returns>A browse object, or null if browsing isn't supported.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IInteractionPatternProvider">
            <summary>
            Represents an interface that can be used to query for supported UI patterns.
            This type is used by the Solution Navigator tree control to query items
            for support of various UI patterns, including rename, invocation, context menus,
            drag-drop source support, and drag-drop target support.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IInteractionPatternProvider.GetPattern``1">
            <summary>
            Queries the provder for support of the given pattern interface.
            </summary>
            <typeparam name="TPattern">The pattern interface to get an instance of.</typeparam>
            <returns>The instance implementing the pattern, or null if the pattern isn't supported.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.InputSource">
            <summary>
            Specifies the origin of the input for use in a IInvocationControler.Invoke call.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.InputSource.Mouse">
            <summary>
            The source of the invocation is the mouse.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.InputSource.Keyboard">
            <summary>
            The source of the invocation is the keyboard.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.InputSource.None">
            <summary>
            The source of the invocation is not a direct user action.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IPivotItemProviderPattern">
            <summary>
            Represents an option interface an item can implement that allow it to return a
            different item instance when pivoting on a relationship.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IPivotItemProviderPattern.CreatePivotRootItem(Microsoft.VisualStudio.Shell.IAttachedRelationship)">
            <summary>
            Creates a new object representing this item for the given relationship.  This
            can be used to clone the item or to provide additional context to the item
            related to the different relationship it will be displayed with.
            </summary>
            <param name="relationship">The relationship that's being pivoted on.</param>
            <returns>The object instance that should be used to represent this
            item in the new view.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IPrioritizedComparable">
            <summary>
            Represents a comparable item that has a priority associated with it.  Items with inequal priority will be ordered based solely on priority.
            Items with equal priority will be ordrered based on the results of the IComparable.  This allows multiple classes of items which
            aren't comparable with each other (perhaps because they're unaware of each other's existence) to still be ordered deterministically.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IPrioritizedComparable.Priority">
            <summary>
            Gets the priority for this item.  Items with equal priority will be compared
            based on the IComparable.CompareTo result.  Items with inequal priority
            are compared solely by priority.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IRefreshPattern">
            <summary>
            Represents an item that supports manual refresh.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IRefreshPattern.RefreshAsync">
            <summary>
            Begins the asynchronous refresh on the set of items.  When
            execution of the asynchronous refresh has completed, the returned Task
            is completed.
            </summary>
            <returns>A Task which will complete when the asynchronous refresh
            is finished.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IRefreshPattern.CancelLoad">
            <summary>
            Cancels the current load operation, leaving the item in a
            partially-refreshed state.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IRelationshipSearchParameters">
            <summary>
            Represents a set of search parameters that includes information about the
            relationship being searched, the set of source items, and cancelation information.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IRelationshipSearchParameters.CancellationToken">
            <summary>
            Gets the CancellationToken that should be checked in order to
            determine if the search should continue executing.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IRelationshipSearchParameters.SourceItemHints">
            <summary>
            Gets the list of root item of the view being searched.  This can
            optionally be used by the ISearchProvider to provide
            optimized results, as only results that are reachable
            by following the RelationshipHint starting at items in the SourceItemHints
            must be provided.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IRelationshipSearchParameters.RelationshipHint">
            <summary>
            Gets the relationship being shown in the view being searched.
            This can optionally be used by the ISearchProvider to provide
            optmized results, as only results that are reachable by following
            the RelationshipHint starting at the SourceItem hint must be provided.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IResurrectableObject">
            <summary>
            Represents an object which can be "resurrected" after expiration.  This is primarily useful
            for objects which are destroyed and recreated as part of an operation like rename or unload.
            In such cases, these objects can notify observers of resurrection through the provided
            IResurrectionScope.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IResurrectableObject.BeginResurrectionTracking">
            <summary>
            Called if the object should begin watching for and informing others of any
            potential resurrection.
            </summary>
            <returns>An object which tracks resurrection of this object.  This
            scope should be disposed when resurrection tracking is no longer required.</returns>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IResurrectableObject.IsResurrected">
            <summary>
            Indicates whether the has object been resurrected.  If the resurrectable object is
            disposable, this property is explicitly accessible even if the resurrectable object
            is disposed.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IResurrectableObject.ResurrectedObject">
            <summary>
            The object that replaced the resurrectable object.  If the resurrectable object is
            disposable, this property is explicitly accessible even if the resurrectable object
            is disposed.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IResurrectionScope">
            <summary>
            An object which tracks resurrection of an object as a new object instance.
            See IResurrectableObject for more details.
            </summary>
        </member>
        <member name="E:Microsoft.Internal.VisualStudio.PlatformUI.IResurrectionScope.Resurrected">
            <summary>
            Raised when the original source object is replaced by a new object instance.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.ISearchProvider">
            <summary>
            Represents one of potentially many search providers used for searching
            a PivotTreeView's content.  The ISearchProvider implementation must be stateless
            or must guarantee that the Search method can be called simultaneously from
            multiple threads.  GetDisplayItem will always be called from the UI thread
            to convert a result returned on the background thread into a display item
            to be viewed on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ISearchProvider.Search(Microsoft.Internal.VisualStudio.PlatformUI.IRelationshipSearchParameters,System.Action{Microsoft.Internal.VisualStudio.PlatformUI.ISearchResult})">
             <summary>
             Searches the domain understood by the search provider implementation.
             </summary>
             <param name="parameters">Parameters for controlling the scope and result set;
             see the remarks for more details.</param>
             <param name="resultAccumulator">The action that should be invoked each time
             a result is realized.</param>
             <remarks>
             The search provider must return only results matching the SearchQuery provided
             in the search parameters.  Search providers may optionally use the SourceItemHint
             and RelationshipHint properties of the search parameters to implement a more-efficient
             search.  The search provider must return results that are reachable from the source item
             by following the hinted relationship; the provider may optionally return additional results
             that match the search terms but which are not reachable by this relationship,
             if the source item or the relationship are not understood by the provider.
            
             Search must be thread-safe for simultaneous calls from multiple threads.  As such,
             Search should only access properties and members of the SourceItemHint known to be thread-safe.
             </remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.ISearchResult">
            <summary>
            Represents a search result realized on a worker thread.  The search result
            should be able to be asked by the UI thread for the display item associated
            with the result.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ISearchResult.GetDisplayItem">
            <summary>
            Gets the display item that should be shown in the PivotTreeView corresponding
            to the result.
            </summary>
            <returns>The UI object that should be shown in the tree as a search result.</returns>
            <remarks>The data realized on the worker thread may not be showable directly in the UI.
            This result wrapper allows GetDisplayItem to be called on the UI thread to
            get the corresponding UI item for the domain-specific result gather on the
            worker thread.</remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ISolutionAttachedCollectionService.TryGetFilterProvider(System.Guid,System.UInt32)">
            <summary>
            Attempts to find an ISolutionTreeFilterProvider handled by the given command GUID/ID pair.
            </summary>
            <param name="commandGroup">The command group to find the associated filter provider for.</param>
            <param name="commandId">The command ID to find the associated filter provider for.</param>
            <returns>An ISolutionTreeFilterProvider that handles the given command, or null if there is no associated provider.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ISolutionAttachedCollectionService.CreateBatchInitializationScope">
             <summary>
             Creates an object which can be wrapped around a task that may end up initializing
             many IAttachedCollectionSources.  This can be used to optimize certain operations (like transactions)
             that may be more-efficiently performed if it's known that multiple source initializations
             will be occurring.
            
             Extenders can export IBatchInitializationScopeProvider implementations, each of which will
             be called when such a scope is created.  Multiple scopes created at the same time
             will only result in one call to the IBatchInitializationScopeProvider, and upon
             the releast of the last scope, individual scopes returned by IBatchInitializationScopeProvider
             will be freed.
             </summary>
             <returns>An object which should be disposed when the initialization is completed.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ISolutionAttachedCollectionService2.GetItemsForPath(System.String)">
            <summary>
            Retrieves all the items that represent the document at the specified file path.
            </summary>
            <param name="filePath">File path to match.</param>
            <returns>Array of items.</returns>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.MpfHelpers.VsExecutionContextTracker">
            <summary>
            Gets the execution context tracker instance.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.MpfHelpers.shellIsShuttingDown">
            <summary>
            If the shell is shutting down either the shell service won't be available at all or it will be both initialized
            and zombie, on startup it is zombie until initialized.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.MpfHelpers.shuttingDownTokenSource">
            <summary>
            The source of a token that is canceled when shutdown begins.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.MpfHelpers.shuttingDownTokenSourceWiringState">
            <summary>
            A value indicating whether <see cref="F:Microsoft.Internal.VisualStudio.Shell.MpfHelpers.shuttingDownTokenSource" /> has been wired up to actually be canceled on shutdown.
            </summary>
            <remarks>
            Changes to this field should be made within a lock on <see cref="F:Microsoft.Internal.VisualStudio.Shell.MpfHelpers.shuttingDownTokenSource" />.
            </remarks>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.MpfHelpers.ShutdownToken">
            <summary>
            Gets a token that is canceled when the application is shutting down.
            </summary>
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.MpfHelpers.WhenPropertyChanged(Microsoft.VisualStudio.Shell.Interop.IVsShell,System.Int32,System.Action{System.Object})">
            <summary>
            Invokes a callback when a shell property next changes.
            </summary>
            <param name="shell">The shell service.</param>
            <param name="propid">The property to listen for changes to.</param>
            <param name="callback">The callback to invoke at most once when the property next changes.</param>
            <returns>A disposable that may cancel the subscription early.</returns>
            <remarks>Must be called while on the main thread.</remarks>
            <seealso cref="M:Microsoft.Internal.VisualStudio.Shell.MpfHelpers.OnPropertyChanged(Microsoft.VisualStudio.Shell.Interop.IVsShell,System.Int32,System.Action{System.Object})" />
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.MpfHelpers.OnPropertyChanged(Microsoft.VisualStudio.Shell.Interop.IVsShell,System.Int32,System.Action{System.Object})">
            <summary>
            Invokes a callback each time a shell property changes.
            </summary>
            <param name="shell">The shell service.</param>
            <param name="propid">The property to listen for changes to.</param>
            <param name="callback">The callback to invoke each time the property changes.</param>
            <returns>A disposable that may cancel the subscription.</returns>
            <remarks>Must be called while on the main thread.</remarks>
            <seealso cref="M:Microsoft.Internal.VisualStudio.Shell.MpfHelpers.WhenPropertyChanged(Microsoft.VisualStudio.Shell.Interop.IVsShell,System.Int32,System.Action{System.Object})" />
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.MpfHelpers.PropertyChangedSink.Dispose">
            <summary>
            Unadvises from the event sink.
            If called on a thread other than the Main thread, it schedules the unadvise to occur later on the main thread.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.VsTaskAwaiter">
            <summary>
            Internal use only. Awaiter implementation for IVsTask instances intended to be returned from GetAwaiter implementations.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.VsTaskAwaiter.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsTask)">
            <summary>
            Creates a new awaiter instance for the given IVsTask.
            </summary>
            <param name="task">IVsTask instance that will be used to schedule continuations.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.VsTaskAwaiter.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsTask,Microsoft.VisualStudio.Shell.VsTaskRunContext)">
            <summary>
            Creates a new awaiter with a specific context. The task will be retrieved
            from the previous awaiter.
            </summary>
            <param name="task">IVsTask instance that will be used to schedule continuations.</param>
            <param name="context">Context to use for scheduling continuations.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.VsTaskAwaiter.OnCompleted(System.Action)">
            <summary>
            Schedules the action as continuation on the awaited task.
            </summary>
            <param name="continuation">Continuation action.</param>
            <remarks>The continuation is scheduled with VSTC_CURRENTCONTEXT to ensure that UI
            thread awaits are continued on UI thread.</remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.YieldAwaiter">
            <summary>
            Internal use only. Awaiter implementation for yielding operations on UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.YieldAwaiter.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService,Microsoft.VisualStudio.Shell.Interop.IVsTaskCompletionSource,Microsoft.VisualStudio.Shell.VsTaskRunContext)">
            <summary>
            Creates a new awaiter with a specific context. The task will be retrieved
            from the previous awaiter.
            </summary>
            <param name="taskCompletionSource">IVsTaskCompletionSource instance that will be used to assign continuations as dependency.</param>
            <param name="context">Context to use for scheduling continuations.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.YieldAwaiter.OnCompleted(System.Action)">
            <summary>
            Schedules the action as continuation on the awaited task.
            </summary>
            <param name="continuation">Continuation action.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.YieldAwaiter.GetAwaiter">
            <summary>
            Gets the awaiter instance for this object which is itself.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncEventListener">
            <summary>
            Base interface of all background event listeners.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncEventListener.OnUnhandledException(System.Exception)">
            <summary>
            If an exception is raised in an event listener, it is reported back
            to the listener to enable adding diagnostics and telemetry.
            </summary>
            <param name="exception">The exception raised by the listener.</param>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncProject">
            <summary>
            Provides information from a loaded project.
            </summary>
            <remarks>
            This is implemented by each project systems.
            </remarks>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncProject.Id">
            <summary>
            The id of the project in its solution.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncProject.GetInterfaceAsync``1(System.Threading.CancellationToken)">
            <summary>
            Requests a interface from the project. Different interface may be provided
            based on the capabilities of a project system.
            </summary>
            <remarks>
            Some project systems might be able to provide free threaded access, while
            legacy projects might provide IVsHierarchy.
            </remarks>
            <typeparam name="T">The requested facet type.</typeparam>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The requested facet.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterOpenProjectArgs">
            <summary>
            Arguments for the <see cref="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncProjectEventListener.OnAfterOpenProjectAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterOpenProjectArgs,System.Threading.CancellationToken)" /> event.
            </summary>
            <param name="ProjectId">The project id.</param>
            <param name="IsAdded"><c>true</c> if the project was added to the solution.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterOpenProjectArgs.#ctor(System.Guid,System.Boolean)">
            <summary>
            Arguments for the <see cref="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncProjectEventListener.OnAfterOpenProjectAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterOpenProjectArgs,System.Threading.CancellationToken)" /> event.
            </summary>
            <param name="ProjectId">The project id.</param>
            <param name="IsAdded"><c>true</c> if the project was added to the solution.</param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterOpenProjectArgs.ProjectId">
            <summary>The project id.</summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterOpenProjectArgs.IsAdded">
            <summary><c>true</c> if the project was added to the solution.</summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeCloseProjectArgs">
            <summary>
            Arguments for the <see cref="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncProjectEventListener.OnBeforeCloseProjectAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeCloseProjectArgs,System.Threading.CancellationToken)" /> event.
            </summary>
            <param name="ProjectId">The project id.</param>
            <param name="IsRemoved"></param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeCloseProjectArgs.#ctor(System.Guid,System.Boolean)">
            <summary>
            Arguments for the <see cref="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncProjectEventListener.OnBeforeCloseProjectAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeCloseProjectArgs,System.Threading.CancellationToken)" /> event.
            </summary>
            <param name="ProjectId">The project id.</param>
            <param name="IsRemoved"></param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeCloseProjectArgs.ProjectId">
            <summary>The project id.</summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeCloseProjectArgs.IsRemoved">
            <summary></summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterLoadProjectArgs">
            <summary>
            Arguments for the <see cref="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncProjectEventListener.OnAfterLoadProjectAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterLoadProjectArgs,System.Threading.CancellationToken)" /> event.
            </summary>
            <param name="ProjectId">The project id.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterLoadProjectArgs.#ctor(System.Guid)">
            <summary>
            Arguments for the <see cref="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncProjectEventListener.OnAfterLoadProjectAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterLoadProjectArgs,System.Threading.CancellationToken)" /> event.
            </summary>
            <param name="ProjectId">The project id.</param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterLoadProjectArgs.ProjectId">
            <summary>The project id.</summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeUnloadProjectArgs">
            <summary>
            Arguments for the <see cref="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncProjectEventListener.OnBeforeUnloadProjectAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeUnloadProjectArgs,System.Threading.CancellationToken)" /> event.
            </summary>
            <param name="ProjectId">The project id.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeUnloadProjectArgs.#ctor(System.Guid)">
            <summary>
            Arguments for the <see cref="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncProjectEventListener.OnBeforeUnloadProjectAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeUnloadProjectArgs,System.Threading.CancellationToken)" /> event.
            </summary>
            <param name="ProjectId">The project id.</param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeUnloadProjectArgs.ProjectId">
            <summary>The project id.</summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterRenameProjectArgs">
            <summary>
            Arguments for the <see cref="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncProjectEventListener.OnAfterRenameProjectAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterRenameProjectArgs,System.Threading.CancellationToken)" /> event.
            </summary>
            <param name="ProjectId">The project id.</param>
            <param name="PreviousName">The previous project name.</param>
            <param name="Name">The current project name.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterRenameProjectArgs.#ctor(System.Guid,System.String,System.String)">
            <summary>
            Arguments for the <see cref="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncProjectEventListener.OnAfterRenameProjectAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterRenameProjectArgs,System.Threading.CancellationToken)" /> event.
            </summary>
            <param name="ProjectId">The project id.</param>
            <param name="PreviousName">The previous project name.</param>
            <param name="Name">The current project name.</param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterRenameProjectArgs.ProjectId">
            <summary>The project id.</summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterRenameProjectArgs.PreviousName">
            <summary>The previous project name.</summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterRenameProjectArgs.Name">
            <summary>The current project name.</summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncProjectEventListener">
            <summary>
            Event listener for common project events.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncProjectEventListener.OnAfterOpenProjectAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterOpenProjectArgs,System.Threading.CancellationToken)">
            <summary>
            Fired after a project is opened.
            </summary>
            <param name="args">The event args.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task to track the asynchronous call status.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncProjectEventListener.OnBeforeCloseProjectAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeCloseProjectArgs,System.Threading.CancellationToken)">
            <summary>
            Fired before a project is closed.
            </summary>
            <param name="args">The event args.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task to track the asynchronous call status.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncProjectEventListener.OnAfterLoadProjectAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterLoadProjectArgs,System.Threading.CancellationToken)">
            <summary>
            Fired after a project is loaded.
            </summary>
            <param name="args">The event args.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task to track the asynchronous call status.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncProjectEventListener.OnBeforeUnloadProjectAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeUnloadProjectArgs,System.Threading.CancellationToken)">
            <summary>
            Fired before a project is unloaded.
            </summary>
            <param name="args">The event args.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task to track the asynchronous call status.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncProjectEventListener.OnAfterRenameProjectAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterRenameProjectArgs,System.Threading.CancellationToken)">
            <summary>
            Fired after a project is renamed.
            </summary>
            <param name="args">The event args.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task to track the asynchronous call status.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncProjectFactory">
            <summary>
            Provides a way for project factories to create projects asynchronously.
            </summary>
            <remarks>
            This is implemented by each project systems.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncProjectFactory.OpenProjectAsync(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Opens a project and creates an object to represent it to the solution.
            </summary>
            <param name="fileName">The path to the project file to open.</param>
            <param name="projectId">The id of the project to open.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>An object to represent the project to the solution.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeOpenSolutionArgs">
            <summary>
            Arguments for the <see cref="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncSolutionEventListener.OnBeforeOpenSolutionAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeOpenSolutionArgs,System.Threading.CancellationToken)" /> event.
            </summary>
            <param name="SolutionFilename">The path to the solution file.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeOpenSolutionArgs.#ctor(System.String)">
            <summary>
            Arguments for the <see cref="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncSolutionEventListener.OnBeforeOpenSolutionAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeOpenSolutionArgs,System.Threading.CancellationToken)" /> event.
            </summary>
            <param name="SolutionFilename">The path to the solution file.</param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeOpenSolutionArgs.SolutionFilename">
            <summary>The path to the solution file.</summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterOpenSolutionArgs">
            <summary>
            Arguments for the <see cref="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncSolutionEventListener.OnAfterOpenSolutionAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterOpenSolutionArgs,System.Threading.CancellationToken)" /> event.
            </summary>
            <param name="IsNewSolution">Indicates if a new solution was created.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterOpenSolutionArgs.#ctor(System.Boolean)">
            <summary>
            Arguments for the <see cref="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncSolutionEventListener.OnAfterOpenSolutionAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterOpenSolutionArgs,System.Threading.CancellationToken)" /> event.
            </summary>
            <param name="IsNewSolution">Indicates if a new solution was created.</param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterOpenSolutionArgs.IsNewSolution">
            <summary>Indicates if a new solution was created.</summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeCloseSolutionArgs">
            <summary>
            Arguments for the <see cref="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncSolutionEventListener.OnBeforeCloseSolutionAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeCloseSolutionArgs,System.Threading.CancellationToken)" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeCloseSolutionArgs.#ctor">
            <summary>
            Arguments for the <see cref="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncSolutionEventListener.OnBeforeCloseSolutionAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeCloseSolutionArgs,System.Threading.CancellationToken)" /> event.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterCloseSolutionArgs">
            <summary>
            Arguments for the <see cref="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncSolutionEventListener.OnAfterCloseSolutionAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterCloseSolutionArgs,System.Threading.CancellationToken)" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterCloseSolutionArgs.#ctor">
            <summary>
            Arguments for the <see cref="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncSolutionEventListener.OnAfterCloseSolutionAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterCloseSolutionArgs,System.Threading.CancellationToken)" /> event.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterRenameSolutionArgs">
            <summary>
            Arguments for the <see cref="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncSolutionEventListener.OnAfterRenameSolutionAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterRenameSolutionArgs,System.Threading.CancellationToken)" /> event.
            </summary>
            <param name="PreviousName">The previous solution name.</param>
            <param name="Name">The current solution name.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterRenameSolutionArgs.#ctor(System.String,System.String)">
            <summary>
            Arguments for the <see cref="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncSolutionEventListener.OnAfterRenameSolutionAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterRenameSolutionArgs,System.Threading.CancellationToken)" /> event.
            </summary>
            <param name="PreviousName">The previous solution name.</param>
            <param name="Name">The current solution name.</param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterRenameSolutionArgs.PreviousName">
            <summary>The previous solution name.</summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterRenameSolutionArgs.Name">
            <summary>The current solution name.</summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncSolutionEventListener">
            <summary>
            Event listener for common solution events.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncSolutionEventListener.OnBeforeOpenSolutionAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeOpenSolutionArgs,System.Threading.CancellationToken)">
            <summary>
            Fired before a solution is opened.
            </summary>
            <param name="args">The event args.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task to track the asynchronous call status.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncSolutionEventListener.OnAfterOpenSolutionAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterOpenSolutionArgs,System.Threading.CancellationToken)">
            <summary>
            Fired after a solution is opened.
            </summary>
            <param name="args">The event args.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task to track the asynchronous call status.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncSolutionEventListener.OnBeforeCloseSolutionAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.BeforeCloseSolutionArgs,System.Threading.CancellationToken)">
            <summary>
            Fired before a solution is closed.
            </summary>
            <param name="args">The event args.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task to track the asynchronous call status.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncSolutionEventListener.OnAfterCloseSolutionAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterCloseSolutionArgs,System.Threading.CancellationToken)">
            <summary>
            Fired after a solution is closed.
            </summary>
            <param name="args">The event args.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task to track the asynchronous call status.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncSolutionEventListener.OnAfterRenameSolutionAsync(Microsoft.Internal.VisualStudio.Shell.ProjectSystem.AfterRenameSolutionArgs,System.Threading.CancellationToken)">
            <summary>
            Fired after a solution is renamed.
            </summary>
            <param name="args">The event args.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task to track the asynchronous call status.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncSolutionService">
            <summary>
            Provides async access to the solution.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ProjectSystem.IVsAsyncSolutionService.OpenSolutionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Opens a solution asynchronously.
            </summary>
            <param name="path">The path to the solution.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task representing the open solution operation.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.UIContextImpl">
            <summary>
            Implementation details for the UI Context monitor.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.UIContextImpl.DummyContext">
            <summary>
            Dummy UIContext to be used when the monitor selection service is not
            able to support UIContexts (e.g. command line mode).
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.UIContextImpl.Reset">
            <summary>
            Used for unit tests to avoid state bleeding between tests due to the singleton
            instance of this class caching registered UI contexts.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.UIContextImpl.Reset(Microsoft.VisualStudio.Shell.Interop.IVsUIContextManager)">
            <summary>
            Used for unit tests to avoid state bleeding between tests due to the singleton
            instance of this class caching registered UI contexts.
            </summary>
        </member>
        <member name="T:Windows.Win32.Foundation.HRESULT">
            <remarks>
            <para>The **HRESULT** data type is the same as the [SCODE](scode.md) data type. An **HRESULT** value consists of the following fields: - A 1-bit code indicating severity, where zero represents success and 1 represents failure. - A 4-bit reserved value. - An 11-bit code indicating responsibility for the error or warning, also known as a facility code. - A 16-bit code describing the error or warning. Most MAPI interface methods and functions return **HRESULT** values to provide detailed cause formation. **HRESULT** values are also used widely in OLE interface methods. OLE provides several macros for converting between **HRESULT** values and **SCODE** values, another common data type for error handling. &gt; [!NOTE] &gt; In 64-bit MAPI, **HRESULT** is still a 32-bit value. For information about the OLE use of **HRESULT** values, see the  *OLE Programmer's Reference*. For more information about the use of these values in MAPI, see [Error Handling](error-handling-in-mapi.md) and any of the following interface methods: [IABLogon::GetLastError](iablogon-getlasterror.md) [IMAPISupport::GetLastError](imapisupport-getlasterror.md) [IMAPIControl::GetLastError](imapicontrol-getlasterror.md) [IMAPITable::GetLastError](imapitable-getlasterror.md) [IMAPIProp::GetLastError](imapiprop-getlasterror.md) [IMAPIViewAdviseSink::OnPrint](imapiviewadvisesink-onprint.md)</para>
            <para><see href="https://learn.microsoft.com/office/client-developer/outlook/mapi/hresult#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.Foundation.HRESULT.ThrowOnFailure(System.IntPtr)">
            <inheritdoc cref="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)" />
            <param name="errorInfo">
            A pointer to the IErrorInfo interface that provides more information about the
            error. You can specify <see cref="F:System.IntPtr.Zero" /> to use the current IErrorInfo interface, or
            <c>new IntPtr(-1)</c> to ignore the current IErrorInfo interface and construct the exception
            just from the error code.
            </param>
            <returns><see langword="this" /> <see cref="T:Windows.Win32.Foundation.HRESULT" />, if it does not reflect an error.</returns>
            <seealso cref="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)" />
        </member>
        <member name="T:Windows.Win32.UI.WindowsAndMessaging.MSG">
            <summary>Contains message information from a thread's message queue.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-msg">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.MSG.hwnd">
            <summary>
            <para>Type: <b>HWND</b> A handle to the window whose window procedure receives the message. This member is <b>NULL</b> when the message is a thread message.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-msg#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.MSG.message">
            <summary>
            <para>Type: <b>UINT</b> The message identifier. Applications can only use the low word; the high word is reserved by the system.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-msg#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.MSG.wParam">
            <summary>
            <para>Type: <b>WPARAM</b> Additional information about the message. The exact meaning depends on the value of the <b>message</b> member.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-msg#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.MSG.lParam">
            <summary>
            <para>Type: <b>LPARAM</b> Additional information about the message. The exact meaning depends on the value of the <b>message</b> member.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-msg#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.MSG.time">
            <summary>
            <para>Type: <b>DWORD</b> The time at which the message was posted.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-msg#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.MSG.pt">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/win32/api/windef/ns-windef-point">POINT</a></b> The cursor position, in screen coordinates, when the message was posted.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-msg#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.PInvoke">
            <content>
            Contains extern methods from "KERNEL32.dll".
            </content>
            <content>
            Contains extern methods from "USER32.dll".
            </content>
        </member>
        <member name="M:Windows.Win32.PInvoke.CloseHandle(Windows.Win32.Foundation.HANDLE)">
            <summary>Closes an open object handle.</summary>
            <param name="hObject">A valid handle to an open object.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. If the application is running under a debugger,  the function will throw an exception if it receives either a  handle value that is not valid  or a pseudo-handle value. This can happen if you close a handle twice, or if you  call <b>CloseHandle</b> on a handle returned by the <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-findfirstfilea">FindFirstFile</a> function instead of calling the <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-findclose">FindClose</a> function.</para>
            </returns>
            <remarks>
            <para>The <b>CloseHandle</b> function closes handles to the following objects: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/handleapi/nf-handleapi-closehandle#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.SetParent(Windows.Win32.Foundation.HWND,Windows.Win32.Foundation.HWND)">
            <summary>Changes the parent window of the specified child window.</summary>
            <param name="hWndChild">
            <para>Type: <b>HWND</b> A handle to the child window.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-setparent#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="hWndNewParent">
            <para>Type: <b>HWND</b> A handle to the new parent window. If this parameter is <b>NULL</b>, the desktop window becomes the new parent window. If this parameter is <b>HWND_MESSAGE</b>, the child window becomes a <a href="https://docs.microsoft.com/windows/desktop/winmsg/window-features">message-only window</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-setparent#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HWND</b> If the function succeeds, the return value is a handle to the previous parent window. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para>An application can use the <b>SetParent</b> function to set the parent window of a pop-up, overlapped, or child window. If the window identified by the <i>hWndChild</i> parameter is visible, the system performs the appropriate redrawing and repainting. For compatibility reasons, <b>SetParent</b> does not modify the <b>WS_CHILD</b> or <b>WS_POPUP</b> window styles of the window whose parent is being changed. Therefore, if <i>hWndNewParent</i> is <b>NULL</b>, you should also clear the <b>WS_CHILD</b> bit and set the <b>WS_POPUP</b> style after calling <b>SetParent</b>. Conversely, if <i>hWndNewParent</i> is not <b>NULL</b> and the window was previously a child of the desktop, you should clear the <b>WS_POPUP</b> style and set the <b>WS_CHILD</b> style before calling <b>SetParent</b>. When you change the parent of a window, you should synchronize the UISTATE of both windows. For more information, see <a href="https://docs.microsoft.com/windows/desktop/menurc/wm-changeuistate">WM_CHANGEUISTATE</a> and <a href="https://docs.microsoft.com/windows/desktop/menurc/wm-updateuistate">WM_UPDATEUISTATE</a>. Unexpected behavior or errors may occur if <i>hWndNewParent</i> and <i>hWndChild</i> are running in different DPI awareness modes. The table below outlines this behavior: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-setparent#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.IsDialogMessageA(Windows.Win32.Foundation.HWND,Windows.Win32.UI.WindowsAndMessaging.MSG@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.IsDialogMessageA(Windows.Win32.Foundation.HWND,Windows.Win32.UI.WindowsAndMessaging.MSG*)" />
        </member>
        <member name="M:Windows.Win32.PInvoke.IsDialogMessageA(Windows.Win32.Foundation.HWND,Windows.Win32.UI.WindowsAndMessaging.MSG*)">
            <summary>Determines whether a message is intended for the specified dialog box and, if it is, processes the message. (ANSI)</summary>
            <param name="hDlg">
            <para>Type: <b>HWND</b> A handle to the dialog box.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-isdialogmessagea#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpMsg">
            <para>Type: <b>LPMSG</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-msg">MSG</a> structure that contains the message to be checked.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-isdialogmessagea#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> If the message has been processed, the return value is nonzero. If the message has not been processed, the return value is zero.</para>
            </returns>
            <remarks>
            <para>Although the <b>IsDialogMessage</b> function is intended for modeless dialog boxes, you can use it with any window that contains controls, enabling the windows to provide the same keyboard selection as is used in a dialog box. When <b>IsDialogMessage</b> processes a message, it checks for keyboard messages and converts them into selections for the corresponding dialog box. For example, the TAB key, when pressed, selects the next control or group of controls, and the DOWN ARROW key, when pressed, selects the next control in a group. Because the <b>IsDialogMessage</b> function performs all necessary translating and dispatching of messages, a message processed by <b>IsDialogMessage</b> must not be passed to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-translatemessage">TranslateMessage</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-dispatchmessage">DispatchMessage</a> function. <b>IsDialogMessage</b> sends <a href="https://docs.microsoft.com/windows/desktop/dlgbox/wm-getdlgcode">WM_GETDLGCODE</a> messages to the dialog box procedure to determine which keys should be processed. <b>IsDialogMessage</b> can send <a href="https://docs.microsoft.com/windows/desktop/dlgbox/dm-getdefid">DM_GETDEFID</a> and <a href="https://docs.microsoft.com/windows/desktop/dlgbox/dm-setdefid">DM_SETDEFID</a> messages to the window. These messages are defined in the Winuser.h header file as <a href="https://docs.microsoft.com/windows/desktop/winmsg/wm-user">WM_USER</a> and <b>WM_USER</b> + 1, so conflicts are possible with application-defined messages having the same values.</para>
            <para>&gt; [!NOTE] &gt; The winuser.h header defines IsDialogMessage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-isdialogmessagea#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>eXzrus8oP7FE5IKWsYyaNRZh1agd4LyNkg4RnKbm5XQ=</DigestValue></Reference></SignedInfo><SignatureValue>I//zQUiFK0p0qBVcWX8G4rYN9ZJ+FBZ5Oa6rWljUSx9hUyqWqLvOOL1HcI6vQvVXSqMx9wrjoPpn3tWhTBq8vUenqXlmMlVbLCo02ow0VatC6pGduelI1Cd4MfPPLQEtcchbexRCj7HBrhxnwknfP2sgC/xvTEtoQ1MFSe0ajwDz4Sh90P87XAPwtHYa58YckgHziwj1cTkUo/VwHPnaYyrECylekPuGWbVCc4HspbuBa9Jd2AI1TuMVaOEQIf/CdEgXUgd7rY/auaW/ZIjZY6akeuU0ffUlPrk8eKRRNlplHu/F5dn66wjIkz/VP1TClEzj8jl3ECDtDoTaWLZpww==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>zkvLNa2un9GBrYNDoRGkGv7d0PqtTBB4ViYakFbjuWpmF0KcvDAzzaCWJPhVgIXjz+S8cHEoHuWnp/n+UOljT3ehA8Rs6Lb1aTYub3tB/e0txewv2sQ3yscjYdtTBtFvEm9L8Yv76K3Cxzi/Yvrdg+sr7w8y5RHn1Am0Ff8xggY1xpWCXFI+kQM18njQDcUqSlwBnexYfqHBhzz6YXA/S0EziYBu2O2mM7R6gSyYkEOHgIGTVOGnOvvC5xBgC4KNcnQuQSRLiUI2CmzU8vefR6ykruyzt1rNMPI8OqWHQtSDKXU5JNqbk4GNjwzcwbSzOHrxuxWHq91l/vLdVDGDUw==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>MIIF9DCCA9ygAwIBAgITMwAAA68wQA5Mo00FQQAAAAADrzANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExMB4XDTIzMTExNjE5MDkwMFoXDTI0MTExNDE5MDkwMFowdDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzkvLNa2un9GBrYNDoRGkGv7d0PqtTBB4ViYakFbjuWpmF0KcvDAzzaCWJPhVgIXjz+S8cHEoHuWnp/n+UOljT3ehA8Rs6Lb1aTYub3tB/e0txewv2sQ3yscjYdtTBtFvEm9L8Yv76K3Cxzi/Yvrdg+sr7w8y5RHn1Am0Ff8xggY1xpWCXFI+kQM18njQDcUqSlwBnexYfqHBhzz6YXA/S0EziYBu2O2mM7R6gSyYkEOHgIGTVOGnOvvC5xBgC4KNcnQuQSRLiUI2CmzU8vefR6ykruyzt1rNMPI8OqWHQtSDKXU5JNqbk4GNjwzcwbSzOHrxuxWHq91l/vLdVDGDUwIDAQABo4IBczCCAW8wHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYBBQUHAwMwHQYDVR0OBBYEFEcccTTyBDxkjvJKs/m4AgEFhl7BMEUGA1UdEQQ+MDykOjA4MR4wHAYDVQQLExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xFjAUBgNVBAUTDTIzMDAxMis1MDE4MjYwHwYDVR0jBBgwFoAUSG5k5VAF04KqFzc3IrVtqMp1ApUwVAYDVR0fBE0wSzBJoEegRYZDaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNybDBhBggrBgEFBQcBAQRVMFMwUQYIKwYBBQUHMAKGRWh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMvTWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNydDAMBgNVHRMBAf8EAjAAMA0GCSqGSIb3DQEBCwUAA4ICAQCEsRbf80dn60xTweOWHZoWaQdpzSaDqIvqpYHE5ZzuEMJWDdcP72MGw8v6BSaJQ+a+hTCXdERnIBDPKvU4ENjgu4EBJocHlSe8riiZUAR+z+z4OUYqoFd3EqJyfjjOJBR2z94Dy4ss7LEkHUbj2NZiFqBoPYu2OGQvEk+1oaUsnNKZ7Nl7FHtV7CI2lHBru83e4IPe3glIi0XVZJT5qV6Gx/QhAFmpEVBjSAmDdgII4UUwuI9yiX6jJFNOEek6MoeP06LMJtbqA3Bq+ZWmJ033F97uVpyaiS4bj3vFI/ZBgDnMqNDtZjcA2vi4RRMweggd9vsHyTLpn6+nXoLy03vMeebq0C3k44pgUIEuPQUlJIRTe6IrN3GcjaZ6zHGuQGWgu6SyO9r7qkrEpS2pRjnGZjx2RmCamdAWnDdu+DmfNEPAddYjaJJ7PTnd+PGzG+WeH4ocWgVnm5fJFhItjj70CJjgHqt57e1FiQcyWCwBhKX2rGgN2UICHBF3Q/rsKOspjMw2OlGphTn2KmFl5J7cQxru54A9roClLnHGCiSUYos/iwFHI/dAVXEh0S0KKfTfM6AC6/9bCbsD61QLcRzRIElvgCgaiMWFjOBL99pemoElAHsyzG6uX93fMfas09N9YzA0/rFAKAsNDOcFbQlEHKiDT7mI20tVoCcmSIhJAQ==</X509Certificate><X509Certificate>MIIHejCCBWKgAwIBAgIKYQ6Q0gAAAAAAAzANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwHhcNMTEwNzA4MjA1OTA5WhcNMjYwNzA4MjEwOTA5WjB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAq/D6chAcLq3YbqqCEE00uvK2WCGfQhsqa+laUKq4BjgaBEm6f8MMHt03a8YS2AvwOMKZBrDIOdUBFDFC04kNeWSHfpRgJGyvnkmc6Whe0t+bU7IKLMOv2akrrnoJr9eWWcpgGgXpZnboMlImEi/nqwhQz7NEt13YxC4Ddato88tt8zpcoRb0RrrgOGSsbmQ1eKagYw8t00CT+OPeBw3VXHmlSSnnDb6gE3e+lD3v++MrWhAfTVYoonpy4BI6t0le2O3tQ5GD2Xuye4Yb2T6xjF3oiU+EGvKhL1nkkDstrjNYxbc+/jLTswM9sbKvkjh+0p2ALPVOVpEhNSXDOW5kf1O6nA+tGSOEy/S6A4aN91/w0FK/jJSHvMAhdCVfGCi2zCcoOCWYOUo2z3yxkq4cI6epZuxhH2rhKEmdX4jiJV3TIUs+UsS1Vz8kA/DRelsv1SPjcF0PUUZ3s/gA4bysAoJf28AVs70b1FVL5zmhD+kjSbwYuER8ReTBw3J64HLnJN+/RpnF78IcV9uDjexNSTCnq47f7Fufr/zdsGbiwZeBe+3W7UvnSSmnEyimp31ngOaKYnhfsi+E11ecXL93KCjx7W3DKI8sj0A3T8HhhUSJxAlMxdSlQy90lfdu+HggWCwTXWCVmj5PM4TasIgX3p5O9JawvEagbJjS4NaIjAsCAwEAAaOCAe0wggHpMBAGCSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBRIbmTlUAXTgqoXNzcitW2oynUClTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBRyLToCMZBDuRQFTuHqp8cx0SOJNDBaBgNVHR8EUzBRME+gTaBLhklodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3JsMF4GCCsGAQUFBwEBBFIwUDBOBggrBgEFBQcwAoZCaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3J0MIGfBgNVHSAEgZcwgZQwgZEGCSsGAQQBgjcuAzCBgzA/BggrBgEFBQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9kb2NzL3ByaW1hcnljcHMuaHRtMEAGCCsGAQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAHAAbwBsAGkAYwB5AF8AcwB0AGEAdABlAG0AZQBuAHQALiAdMA0GCSqGSIb3DQEBCwUAA4ICAQBn8oalmOBUeRou09h0ZyKbC5YR4WOSmUKWfdJ5DJDBZV8uLD74w3LRbYP+vj/oCso7v0epo/Np22O/IjWll11lhJB9i0ZQVdgMknzSGksc8zxCi1LQsP1r4z4HLimb5j0bpdS1HXeUOeLpZMlEPXh6I/MTfaaQdION9MsmAkYqwooQu6SpBQyb7Wj6aC6VoCo/KmtYSWMfCWluWpiW5IP0wI/zRive/DvQvTXvbiWu5a8n7dDd8w6vmSiXmE0OPQvyCInWH8MyGOLwxS3OW560STkKxgrCxq2u5bLZ2xWIUUVYODJxJxp/sfQn+N4sOiBpmLJZiWhub6e3dMNABQamASooPoI/E01mC8CzTfXhj38cbxV9Rad25UAqZaPDXVJihsMdYzaXht/a8/jyFqGaJ+HNpZfQ7l1jQeNbB5yHPgZ3BtEGsXUfFL5hYbXw3MYbBL7fQccOKO7eZS/sl/ahXJbYANahRr1Z85elCUtIEJmAH9AAKcWxm6U/RXceNcbSoqKfenoi+kiVH6v7RyOA9Z74v2u3S5fi63V4GuzqN5l5GEv/1rMjaHXmr/r8i+sLgOppO6/8MO0ETI7f33VtY5E90Z1WTk+/gFcioXgRMiF670EKsT/7qMykXcGhiJtXcVZOSEXAQsmbdlsKgEhr/Xmfwb1tbWrJUnMTDXpQzQ==</X509Certificate><X509Certificate>MIIF7TCCA9WgAwIBAgIQP4vItfyfspZDtWnWbELhRDANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwHhcNMTEwMzIyMjIwNTI4WhcNMzYwMzIyMjIxMzA0WjCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCygEGqNThNE3IyaCJNuLLx/9VSvGzH9dJKjDbu0cJcfoyKrq8TKG/Ac+M6ztAlqFo6be+ouFmrEyNozQwph9FvgFyPRH9dkAFSWKxRxV8qh9zc2AodwQO5e7BW6KPeZGHCnvjzfLnsDbVU/ky2ZU+I8JxImQxCCwl8MVkXeQZ4KI2JOkwDJb5xalwL54RgpJki49KvhKSn+9GY7Qyp3pSJ4Q6g3MDOmT3qCFK7VnnkH4S6Hri0xElcTzFLh93dBWcmmYDgcRGjuKVB4qRTufcyKYMME782XgSzS0NHL2vikR7TmE/dQgfI6B0S/Jmpaz6SfsjWaTr8ZL22CZ3K/QwLopt3YEsDlKQwaRLWQi3BQUzK3Kr9j1uDRprZ/LHR47PJf0h6zSTwQY9cdNCssBAgBkm3xy0hyFfj0IbzA2j70M5xwYmZSmQBbP3sMJHPQTySx+W6hh1hhMdfgzlirrSSL0fzC/hV66AfWdC7dJse0Hbm8ukG1xDo+mTeacY1logC8Ea4PyeZb8txiSk190gWAjWP1Xl8TQLPX+uKg09FcYj5qQ1OcunCnAfPSRtOBA5jUYxe2ADBVSy2xuDCZU7JNDn1nLPEfuhhbhNfFcRf2X7tHc7uROzLLoax7Dj2cO2rXBPB2Q8Nx4CyVe0096yb5MPa50c8prWPMd/FS6/r8QIDAQABo1EwTzALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUci06AjGQQ7kUBU7h6qfHMdEjiTQwEAYJKwYBBAGCNxUBBAMCAQAwDQYJKoZIhvcNAQELBQADggIBAH9yzw+3xRXbm8BJyiZb/p4T5tPw0tuXX/JLP02zrhmu7deXoKzvqTqjwkGw5biRnhOBJAPmCf0/V0A5ISRW0RAvS0CpNoZLtFNXmvvxfomPEf4YbFGq6O0JlbXlccmh6Yd1phV/yX43VF50k8XDZ8wNT2uoFwxtCJJ+i92Bqi1wIcM9BhS7vyRep4TXPw8hIr1LAAbblxzYXtTFC1yHblCk6MM4pPvLLMWSZpuFXst6bJN8gClYW1e1QGm6CHmmZGIVnYeWRbVmIyADixxzoNOieTPgUFmG2y/lAiXqcyqfABTINseSO+lOAOzYVgm5M0kS0lQLAausR7aRKX1MtHWAUgHoyoL2n8ysnI8X6i8msKtyrAv+nlEex0NVZ09Rs1fWtuzuUrc66U7h14GIvE+OdbtLqPA1qibUZ2dJsnBMO5PcHd94kIZysjik0dySTclY6ysSXNQ7roxrsIPlAT/4CTL2kzU0Iq/dNw13CYArzUgA8YyZGUcFAenRv9FO0OYoQzeZpApKCNmacXPSqs0xE2N2oTdvkjgefRI8ZjLny23h/FKJ3crWZgWalmG+oijHHKOnNlA8OqTfSm7mhzvO6/DggTedEzxSjr25HTTGHdUKaj2YKXCMiSrRq4IQSB/c9O+lxbtVGjhjhE63bK2VVOxlIhBJF7jAHscPrFRH</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>MIIHIDCCBQigAwIBAgITMwAAAfPFCkOuA8wdMQABAAAB8zANBgkqhkiG9w0BAQsFADB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDAeFw0yMzEyMDYxODQ2MDJaFw0yNTAzMDUxODQ2MDJaMIHLMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSUwIwYDVQQLExxNaWNyb3NvZnQgQW1lcmljYSBPcGVyYXRpb25zMScwJQYDVQQLEx5uU2hpZWxkIFRTUyBFU046OEQwMC0wNUUwLUQ5NDcxJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2UwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQD+n6ba4SuB9iSO5WMhbngqYAb+z3IfzNpZIWS/sgfXhlLYmGnsUtrGX3OVcg+8krJdixuNUMO7ZAOqCZsXUjOz8zcn1aUD5D2r2PhzVKjHtivWGgGj4x5wqWe1Qov3vMz8WHsKsfadIlWjfBMnVKVomOybQ7+2jc4afzj2XJQQSmE9jQRoBogDwmqZakeYnIx0EmOuucPr674T6/YaTPiIYlGf+XV2u6oQHAkMG56xYPQikitQjjNWHADfBqbBEaqppastxpRNc4id2S1xVQxcQGXjnAgeeVbbPbAoELhbw+z3VetRwuEFJRzT6hbWEgvz9LMYPSbioHL8w+ZiWo3xuw3R7fJsqe7pqsnjwvniP7sfE1utfi7k0NQZMpviOs//239H6eA6IOVtF8w66ipE71EYrcSNrOGlTm5uqq+syO1udZOeKM0xY728NcGDFqnjuFPbEEm6+etZKftU9jxLCSzqXOVOzdqA8O5Xa3E41j3s7MlTF4Q7BYrQmbpxqhTvfuIlYwI2AzeO3OivcezJwBj2FQgTiVHacvMQDgSA7E5vytak0+MLBm0AcW4IPer8A4gOGD9oSprmyAu1J6wFkBrf2Sjn+ieNq6Fx0tWj8Ipg3uQvcug37jSadF6q1rUEaoPIajZCGVk+o5wn6rt+cwdJ39REU43aWCwn0C+XxwIDAQABo4IBSTCCAUUwHQYDVR0OBBYEFMNkFfalEVEMjA3ApoUx9qDrDQokMB8GA1UdIwQYMBaAFJ+nFV0AXmJdg/Tl0mWnG1M1GelyMF8GA1UdHwRYMFYwVKBSoFCGTmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY3JsL01pY3Jvc29mdCUyMFRpbWUtU3RhbXAlMjBQQ0ElMjAyMDEwKDEpLmNybDBsBggrBgEFBQcBAQRgMF4wXAYIKwYBBQUHMAKGUGh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMvTWljcm9zb2Z0JTIwVGltZS1TdGFtcCUyMFBDQSUyMDIwMTAoMSkuY3J0MAwGA1UdEwEB/wQCMAAwFgYDVR0lAQH/BAwwCgYIKwYBBQUHAwgwDgYDVR0PAQH/BAQDAgeAMA0GCSqGSIb3DQEBCwUAA4ICAQDfxByP/NH+79vc3liO4c7nXM/UKFcAm5w61FxRxPxCXRXliNjZ7sDqNP0DzUTBU9tS5DqkqRSiIV15j7q8e6elg8/cD3bv0sW4Go9AML4lhA5MBg3wzKdihfJ0E/HIqcHX11mwtbpTiC2sgAUh7+OZnb9TwJE7pbEBPJQUxxuCiS5/r0s2QVipBmi/8MEW2eIi4mJ+vHI5DCaAGooT4A15/7oNj9zyzRABTUICNNrS19KfryEN5dh5kqOG4Qgca9w6L7CL+SuuTZi0SZ8Zq65iK2hQ8IMAOVxewCpD4lZL6NDsVNSwBNXOUlsxOAO3G0wNT+cBug/HD43B7E2odVfs6H2EYCZxUS1rgReGd2uqQxgQ2wrMuTb5ykO+qd+4nhaf/9SN3getomtQn5IzhfCkraT1KnZF8TI3ye1Z3pner0Cn/p15H7wNwDkBAiZ+2iz9NUEeYLfMGm9vErDVBDRMjGsE/HqqY7QTSTtDvU7+zZwRPGjiYYUFXT+VgkfdHiFpKw42Xsm0MfL5aOa31FyCM17/pPTIKTRiKsDF370SwIwZAjVziD/9QhEFBu9pojFULOZvzuL5iSEJIcqopVAwdbNdroZi2HN8nfDjzJa8CMTkQeSfQsQpKr83OhBmE3MF2sz8gqe3loc05DW8JNvZ328Jps3LJCALt0rQPJYnOw==</X509Certificate><X509Certificate>MIIHcTCCBVmgAwIBAgITMwAAABXF52ueAptJmQAAAAAAFTANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTAwHhcNMjEwOTMwMTgyMjI1WhcNMzAwOTMwMTgzMjI1WjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAOThpkzntHIhC3miy9ckeb0O1YLT/e6cBwfSqWxOdcjKNVf2AX9sSuDivbk+F2Az/1xPx2b3lVNxWuJ+Slr+uDZnhUYjDLWNE893MsAQGOhgfWpSg0S3po5GawcU88V29YZQ3MFEyHFcUTE3oAo4bo3t1w/YJlN8OWECesSq/XJprx2rrPY2vjUmZNqYO7oaezOtgFt+jBAcnVL+tuhiJdxqD89d9P6OU8/W7IVWTe/dvI2k45GPsjksUZzpcGkNyjYtcI4xyDUoveO0hyTD4MmPfrVUj9z6BVWYbWg7mka97aSueik3rMvrg0XnRm7KMtXAhjBcTyziYrLNueKNiOSWrAFKu75xqRdbZ2De+JKRHh09/SDPc31BmkZ1zcRfNN0Sidb9pSB9fvzZnkXftnIv231fgLrbqn427DZM9ituqBJR6L8FA6PRc6ZNN3SUHDSCD/AQ8rdHGO2n6Jl8P0zbr17C89XYcz1DTsEzOUyOArxCaC4Q6oRRRuLRvWoYWmEBc8pnol7XKHYC4jMYctenIPDC+hIK12NvDMk2ZItboKaDIV1fMHSRlJTYuVD5C4lh8zYGNRiER9vcG9H9stQcxWv2XFJRXRLbJbqvUAV6bMURHXLvjflSxIUXk8A8FdsaN8cIFRg/eKtFtvUeh17aj54WcmnGrnu3tz5q4i6tAgMBAAGjggHdMIIB2TASBgkrBgEEAYI3FQEEBQIDAQABMCMGCSsGAQQBgjcVAgQWBBQqp1L+ZMSavoKRPEY1Kc8Q/y8E7jAdBgNVHQ4EFgQUn6cVXQBeYl2D9OXSZacbUzUZ6XIwXAYDVR0gBFUwUzBRBgwrBgEEAYI3TIN9AQEwQTA/BggrBgEFBQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9Eb2NzL1JlcG9zaXRvcnkuaHRtMBMGA1UdJQQMMAoGCCsGAQUFBwMIMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIAQwBBMAsGA1UdDwQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNX2VsuP6KJcYmjRPZSQW9fOmhjEMFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNybDBaBggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3J0MA0GCSqGSIb3DQEBCwUAA4ICAQCdVX38Kq3hLB9nATEkW+Geckv8qW/qXBS2Pk5HZHixBpOXPTEztTnXwnE2P9pkbHzQdTltuw8x5MKP+2zRoZQYIu7pZmc6U03dmLq2HnjYNi6cqYJWAAOwBb6J6Gngugnue99qb74py27YP0h1AdkY3m2CDPVtI1TkeFN1JFe53Z/zjj3G82jfZfakVqr3lbYoVSfQJL1AoL8ZthISEV09J+BAljis9/kpicO8F7BUhUKz/AyeixmJ5/ALaoHCgRlCGVJ1ijbCHcNhcy4sa3tuPywJeBTpkbKpW99Jo3QMvOyRgNI95ko+ZjtPu4b6MhrZlvSP9pEB9s7GdP32THJvEKt1MMU0sHrYUP4KWN1APMdUbZ1jdEgssU5HLcEUBHG/ZPkkvnNtyo4JvbMBV0lUZNlz138eW0QBjloZkWsNn6Qo3GcZKCS6OEuabvshVGtqRRFHqfG3rsjoiV5PndLQTHa1V1QJsWkBRH58oWFsc/4Ku+xBZj1p/cvBQUl+fpO+y/g75LcVv7TOPqUxUYS8vwLBgqJ7Fx0ViY1w/ue10CgaiQuPNtq6TPmb/wrpNPgkNWcr4A245oyZ1uEi6vAnQj0llOZ0dFtq0Z4+7X6gMTN9vMvpe784cETRkPHIqzqKOghif9lwY1NNje6CbaUFEMFxBmoQtB1VM1izoXBm8g==</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003"></CounterSignature></Object></Signature></doc>
